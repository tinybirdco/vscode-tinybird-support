{
	"CH evalMLMethod": {
		"scope": "tinybird,sql",
		"prefix": [
		  "evalMLMethod"
		],
		"body": [
		  "evalMLMethod(${0:x})"
		],
		"description": "**evalMLMethod(x)** \n\nPrediction using fitted regression models uses \\`evalMLMethod\\` function. See link in \\`linearRegression\\`. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/machine-learning-functions/#evalmlmethod)"
	  },
	  "CH stochasticLinearRegression": {
		"scope": "tinybird,sql",
		"prefix": [
		  "stochasticLinearRegression"
		],
		"body": [
		  "stochasticLinearRegression(${0:x})"
		],
		"description": "**stochasticLinearRegression(x)** \n\nThis function implements stochastic linear regression. It supports custom parameters for learning rate, L2 regularization coefficient, mini-batch size and has few methods for updating weights ([Adam](https://en.wikipedia.org/wiki/Stochastic_gradient_descent#Adam) (used by default), [simple SGD](https://en.wikipedia.org/wiki/Stochastic_gradient_descent), [Momentum](https://en.wikipedia.org/wiki/Stochastic_gradient_descent#Momentum), [Nesterov](https://mipt.ru/upload/medialibrary/d7e/41-91.pdf)). [Learn more](https://clickhouse.tech/docs/en/sql-reference/aggregate-functions/reference/stochasticlinearregression/#stochasticlinearregression)"
	  },
	  "CH addressToLine": {
		"scope": "tinybird,sql",
		"prefix": [
		  "addressToLine"
		],
		"body": [
		  "addressToLine(${0:address_of_binary_instruction})"
		],
		"description": "**addressToLine(address_of_binary_instruction)** \n\nConverts virtual memory address inside ClickHouse server process to the filename and the line number in ClickHouse source code. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/introspection/#addresstoline)"
	  },
	  "CH addressToLineWithInlines": {
		"scope": "tinybird,sql",
		"prefix": [
		  "addressToLineWithInlines"
		],
		"body": [
		  "addressToLineWithInlines(${0:address_of_binary_instruction})"
		],
		"description": "**addressToLineWithInlines(address_of_binary_instruction)** \n\nSimilar to \\`addressToLine\\`, but it will return an Array with all inline functions, and will be much slower as a price. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/introspection/#addresstolinewithinlines)"
	  },
	  "CH addressToSymbol": {
		"scope": "tinybird,sql",
		"prefix": [
		  "addressToSymbol"
		],
		"body": [
		  "addressToSymbol(${0:address_of_binary_instruction})"
		],
		"description": "**addressToSymbol(address_of_binary_instruction)** \n\nConverts virtual memory address inside ClickHouse server process to the symbol from ClickHouse object files. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/introspection/#addresstosymbol)"
	  },
	  "CH demangle": {
		"scope": "tinybird,sql",
		"prefix": [
		  "demangle"
		],
		"body": [
		  "demangle(${0:symbol})"
		],
		"description": "**demangle(symbol)** \n\nConverts a symbol that you can get using the [addressToSymbol](https://clickhouse.tech/docs/en/sql-reference/functions/introspection#addresstosymbol) function to the C++ function name. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/introspection/#demangle)"
	  },
	  "CH tid": {
		"scope": "tinybird,sql",
		"prefix": [
		  "tid"
		],
		"body": [
		  "tid()"
		],
		"description": "**tid()** \n\nReturns id of the thread, in which current [Block](https://clickhouse.com/docs/en/development/architecture/#block) is processed. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/introspection/#tid)"
	  },
	  "CH position": {
		"scope": "tinybird,sql",
		"prefix": [
		  "position"
		],
		"body": [
		  "position(${0:needle IN haystack})"
		],
		"description": "**position(needle IN haystack)** \n\nSearches for the substring \\`needle\\` in the string \\`haystack\\`. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-search-functions/#positionhaystack)"
	  },
	  "CH positionCaseInsensitive": {
		"scope": "tinybird,sql",
		"prefix": [
		  "positionCaseInsensitive"
		],
		"body": [
		  "positionCaseInsensitive(${0:haystack}, ${1:needle}[, ${2:start_pos}])"
		],
		"description": "**positionCaseInsensitive(haystack, needle[, start_pos])** \n\nThe same as [position](https://clickhouse.tech/docs/en/sql-reference/functions/string-search-functions#position) returns the position (in bytes) of the found substring in the string, starting from 1. Use the function for a case-insensitive search. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-search-functions/#positioncaseinsensitive)"
	  },
	  "CH positionUTF8": {
		"scope": "tinybird,sql",
		"prefix": [
		  "positionUTF8"
		],
		"body": [
		  "positionUTF8(${0:haystack}, ${1:needle}[, ${2:start_pos}])"
		],
		"description": "**positionUTF8(haystack, needle[, start_pos])** \n\nReturns the position (in Unicode points) of the found substring in the string, starting from 1. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-search-functions/#positionutf8)"
	  },
	  "CH positionCaseInsensitiveUTF8": {
		"scope": "tinybird,sql",
		"prefix": [
		  "positionCaseInsensitiveUTF8"
		],
		"body": [
		  "positionCaseInsensitiveUTF8(${0:haystack}, ${1:needle}[, ${2:start_pos}])"
		],
		"description": "**positionCaseInsensitiveUTF8(haystack, needle[, start_pos])** \n\nThe same as [positionUTF8](https://clickhouse.tech/docs/en/sql-reference/functions/string-search-functions#positionutf8), but is case-insensitive. Returns the position (in Unicode points) of the found substring in the string, starting from 1. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-search-functions/#positioncaseinsensitiveutf8)"
	  },
	  "CH multiSearchAllPositionsUTF8": {
		"scope": "tinybird,sql",
		"prefix": [
		  "multiSearchAllPositionsUTF8"
		],
		"body": [
		  "multiSearchAllPositionsUTF8(${0:x})"
		],
		"description": "**multiSearchAllPositionsUTF8(x)** \n\nSee \\`multiSearchAllPositions\\`. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-search-functions/#multisearchallpositionsutf8)"
	  },
	  "CH multiSearchFirstPosition": {
		"scope": "tinybird,sql",
		"prefix": [
		  "multiSearchFirstPosition"
		],
		"body": [
		  "multiSearchFirstPosition(${0:haystack}, ${1:[needle1}, ${2:needle2}, ${4:needlen}])"
		],
		"description": "**multiSearchFirstPosition(haystack, [needle1, needle2, needlen])** \n\nThe same as \\`position\\` but returns the leftmost offset of the string \\`haystack\\` that is matched to some of the needles. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-search-functions/#multisearchfirstpositionhaystack)"
	  },
	  "CH multiSearchFirstIndex": {
		"scope": "tinybird,sql",
		"prefix": [
		  "multiSearchFirstIndex"
		],
		"body": [
		  "multiSearchFirstIndex(${0:haystack}, ${1:[needle1}, ${2:needle2}, ${4:needlen}])"
		],
		"description": "**multiSearchFirstIndex(haystack, [needle1, needle2, needlen])** \n\nReturns the index \\`i\\` (starting from 1) of the leftmost found needlei in the string \\`haystack\\` and 0 otherwise. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-search-functions/#multisearchfirstindexhaystack)"
	  },
	  "CH multiSearchAny": {
		"scope": "tinybird,sql",
		"prefix": [
		  "multiSearchAny"
		],
		"body": [
		  "multiSearchAny(${0:haystack}, ${1:[needle1}, ${2:needle2}, ${4:needlen}])"
		],
		"description": "**multiSearchAny(haystack, [needle1, needle2, needlen])** \n\nReturns 1, if at least one string needlei matches the string \\`haystack\\` and 0 otherwise. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-search-functions/#multisearchanyhaystack)"
	  },
	  "CH multiMatchAny": {
		"scope": "tinybird,sql",
		"prefix": [
		  "multiMatchAny"
		],
		"body": [
		  "multiMatchAny(${0:haystack}, ${1:[pattern1}, ${2:pattern2}, ${4:patternn}])"
		],
		"description": "**multiMatchAny(haystack, [pattern1, pattern2, patternn])** \n\nThe same as \\`match\\`, but returns 0 if none of the regular expressions are matched and 1 if any of the patterns matches. For patterns to search substrings in a string, it is better to use \\`multiSearchAny\\` since it works much faster. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-search-functions/#multimatchanyhaystack)"
	  },
	  "CH multiMatchAnyIndex": {
		"scope": "tinybird,sql",
		"prefix": [
		  "multiMatchAnyIndex"
		],
		"body": [
		  "multiMatchAnyIndex(${0:haystack}, ${1:[pattern1}, ${2:pattern2}, ${4:patternn}])"
		],
		"description": "**multiMatchAnyIndex(haystack, [pattern1, pattern2, patternn])** \n\nThe same as \\`multiMatchAny\\`, but returns any index that matches the haystack. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-search-functions/#multimatchanyindexhaystack)"
	  },
	  "CH multiMatchAllIndices": {
		"scope": "tinybird,sql",
		"prefix": [
		  "multiMatchAllIndices"
		],
		"body": [
		  "multiMatchAllIndices(${0:haystack}, ${1:[pattern1}, ${2:pattern2}, ${4:patternn}])"
		],
		"description": "**multiMatchAllIndices(haystack, [pattern1, pattern2, patternn])** \n\nThe same as \\`multiMatchAny\\`, but returns the array of all indices that match the haystack in any order. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-search-functions/#multimatchallindiceshaystack)"
	  },
	  "CH multiFuzzyMatchAny": {
		"scope": "tinybird,sql",
		"prefix": [
		  "multiFuzzyMatchAny"
		],
		"body": [
		  "multiFuzzyMatchAny(${0:haystack}, ${1:distance}, ${2:[pattern1}, ${3:pattern2}, ${5:patternn}])"
		],
		"description": "**multiFuzzyMatchAny(haystack, distance, [pattern1, pattern2, patternn])** \n\nThe same as \\`multiMatchAny\\`, but returns 1 if any pattern matches the haystack within a constant [edit distance](https://en.wikipedia.org/wiki/Edit_distance). This function relies on the experimental feature of [hyperscan](https://intel.github.io/hyperscan/dev-reference/compilation.html#approximate-matching) library, and can be slow for some corner cases. The performance depends on the edit distance value and patterns used, but it's always more expensive compared to a non-fuzzy variants. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-search-functions/#multifuzzymatchanyhaystack)"
	  },
	  "CH multiFuzzyMatchAnyIndex": {
		"scope": "tinybird,sql",
		"prefix": [
		  "multiFuzzyMatchAnyIndex"
		],
		"body": [
		  "multiFuzzyMatchAnyIndex(${0:haystack}, ${1:distance}, ${2:[pattern1}, ${3:pattern2}, ${5:patternn}])"
		],
		"description": "**multiFuzzyMatchAnyIndex(haystack, distance, [pattern1, pattern2, patternn])** \n\nThe same as \\`multiFuzzyMatchAny\\`, but returns any index that matches the haystack within a constant edit distance. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-search-functions/#multifuzzymatchanyindexhaystack)"
	  },
	  "CH multiFuzzyMatchAllIndices": {
		"scope": "tinybird,sql",
		"prefix": [
		  "multiFuzzyMatchAllIndices"
		],
		"body": [
		  "multiFuzzyMatchAllIndices(${0:haystack}, ${1:distance}, ${2:[pattern1}, ${3:pattern2}, ${5:patternn}])"
		],
		"description": "**multiFuzzyMatchAllIndices(haystack, distance, [pattern1, pattern2, patternn])** \n\nThe same as \\`multiFuzzyMatchAny\\`, but returns the array of all indices in any order that match the haystack within a constant edit distance. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-search-functions/#multifuzzymatchallindiceshaystack)"
	  },
	  "CH extract": {
		"scope": "tinybird,sql",
		"prefix": [
		  "extract"
		],
		"body": [
		  "extract(${0:haystack}, ${1:pattern})"
		],
		"description": "**extract(haystack, pattern)** \n\nExtracts a fragment of a string using a regular expression. If 'haystack' does not match the 'pattern' regex, an empty string is returned. If the regex does not contain subpatterns, it takes the fragment that matches the entire regex. Otherwise, it takes the fragment that matches the first subpattern. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-search-functions/#extracthaystack)"
	  },
	  "CH extractAll": {
		"scope": "tinybird,sql",
		"prefix": [
		  "extractAll"
		],
		"body": [
		  "extractAll(${0:haystack}, ${1:pattern})"
		],
		"description": "**extractAll(haystack, pattern)** \n\nExtracts all the fragments of a string using a regular expression. If 'haystack' does not match the 'pattern' regex, an empty string is returned. Returns an array of strings consisting of all matches to the regex. In general, the behavior is the same as the 'extract' function (it takes the first subpattern, or the entire expression if there isn't a subpattern). [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-search-functions/#extractallhaystack)"
	  },
	  "CH extractAllGroupsVertical": {
		"scope": "tinybird,sql",
		"prefix": [
		  "extractAllGroupsVertical"
		],
		"body": [
		  "extractAllGroupsVertical(${0:haystack}, ${1:pattern})"
		],
		"description": "**extractAllGroupsVertical(haystack, pattern)** \n\nMatches all groups of the \\`haystack\\` string using the \\`pattern\\` regular expression. Returns an array of arrays, where each array includes matching fragments from every group. Fragments are grouped in order of appearance in the \\`haystack\\`. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-search-functions/#extractallgroupsvertical)"
	  },
	  "CH like": {
		"scope": "tinybird,sql",
		"prefix": [
		  "like"
		],
		"body": [
		  "like(${0:haystack}, ${1:pattern})"
		],
		"description": "**like(haystack, pattern)** \n\nChecks whether a string matches a LIKE expression. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-search-functions/#likehaystack)"
	  },
	  "CH notLike": {
		"scope": "tinybird,sql",
		"prefix": [
		  "notLike"
		],
		"body": [
		  "notLike(${0:haystack}, ${1:pattern})"
		],
		"description": "**notLike(haystack, pattern)** \n\nThe same thing as 'like', but negative. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-search-functions/#notlikehaystack)"
	  },
	  "CH ngramDistance": {
		"scope": "tinybird,sql",
		"prefix": [
		  "ngramDistance"
		],
		"body": [
		  "ngramDistance(${0:haystack}, ${1:needle})"
		],
		"description": "**ngramDistance(haystack, needle)** \n\nCalculates the 4-gram distance between \\`haystack\\` and \\`needle\\`: counts the symmetric difference between two multisets of 4-grams and normalizes it by the sum of their cardinalities. Returns float number from 0 to 1 \u2013 the closer to zero, the more strings are similar to each other. If the constant \\`needle\\` or \\`haystack\\` is more than 32Kb, throws an exception. If some of the non-constant \\`haystack\\` or \\`needle\\` strings are more than 32Kb, the distance is always one. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-search-functions/#ngramdistancehaystack)"
	  },
	  "CH ngramSearch": {
		"scope": "tinybird,sql",
		"prefix": [
		  "ngramSearch"
		],
		"body": [
		  "ngramSearch(${0:haystack}, ${1:needle})"
		],
		"description": "**ngramSearch(haystack, needle)** \n\nSame as \\`ngramDistance\\` but calculates the non-symmetric difference between \\`needle\\` and \\`haystack\\` \u2013 the number of n-grams from needle minus the common number of n-grams normalized by the number of \\`needle\\` n-grams. The closer to one, the more likely \\`needle\\` is in the \\`haystack\\`. Can be useful for fuzzy string search. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-search-functions/#ngramsearchhaystack)"
	  },
	  "CH countSubstringsCaseInsensitive": {
		"scope": "tinybird,sql",
		"prefix": [
		  "countSubstringsCaseInsensitive"
		],
		"body": [
		  "countSubstringsCaseInsensitive(${0:haystack}, ${1:needle}[, ${2:start_pos}])"
		],
		"description": "**countSubstringsCaseInsensitive(haystack, needle[, start_pos])** \n\nReturns the number of substring occurrences case-insensitive. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-search-functions/#countsubstringscaseinsensitive)"
	  },
	  "CH \\countSubstringsCaseInsensitiveUTF8": {
		"scope": "tinybird,sql",
		"prefix": [
		  "\\countSubstringsCaseInsensitiveUTF8"
		],
		"body": [
		  "\\countSubstringsCaseInsensitiveUTF8(${0:'\u0430\u0431\u0432'}, ${1:'A'})\\"
		],
		"description": "**\\countSubstringsCaseInsensitiveUTF8('\u0430\u0431\u0432', 'A')\\** \n\nReturns the number of substring occurrences in \\`UTF-8\\` case-insensitive. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-search-functions/#countsubstringscaseinsensitiveutf8)"
	  },
	  "CH countMatches": {
		"scope": "tinybird,sql",
		"prefix": [
		  "countMatches"
		],
		"body": [
		  "countMatches(${0:haystack}, ${1:pattern})"
		],
		"description": "**countMatches(haystack, pattern)** \n\nReturns the number of regular expression matches for a \\`pattern\\` in a \\`haystack\\`. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-search-functions/#countmatcheshaystack)"
	  },
	  "CH halfMD5": {
		"scope": "tinybird,sql",
		"prefix": [
		  "halfMD5"
		],
		"body": [
		  "halfMD5(${0:x})"
		],
		"description": "**halfMD5(x)** \n\n[Interprets](/docs/en/sql-reference/functions/type-conversion-functions.md/#type_conversion_functions-reinterpretAsString) all the input parameters as strings and calculates the [MD5](https://en.wikipedia.org/wiki/MD5) hash value for each of them. Then combines hashes, takes the first 8 bytes of the hash of the resulting string, and interprets them as \\`UInt64\\` in big-endian byte order. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/hash-functions/#halfmd5)"
	  },
	  "CH MD4": {
		"scope": "tinybird,sql",
		"prefix": [
		  "MD4"
		],
		"body": [
		  "MD4(${0:x})"
		],
		"description": "**MD4(x)** \n\nCalculates the MD4 from a string and returns the resulting set of bytes as FixedString(16). [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/hash-functions/#md4)"
	  },
	  "CH MD5": {
		"scope": "tinybird,sql",
		"prefix": [
		  "MD5"
		],
		"body": [
		  "MD5(${0:x})"
		],
		"description": "**MD5(x)** \n\nCalculates the MD5 from a string and returns the resulting set of bytes as FixedString(16). [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/hash-functions/#hash_functions-md5)"
	  },
	  "CH sipHash64": {
		"scope": "tinybird,sql",
		"prefix": [
		  "sipHash64"
		],
		"body": [
		  "sipHash64 (#${0:hash_functions-siphash64})"
		],
		"description": "**sipHash64 (#hash_functions-siphash64)** \n\nProduces a 64-bit [SipHash](https://en.wikipedia.org/wiki/SipHash) hash value. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/hash-functions/#siphash64)"
	  },
	  "CH sipHash64Keyed": {
		"scope": "tinybird,sql",
		"prefix": [
		  "sipHash64Keyed"
		],
		"body": [
		  "sipHash64Keyed((${0:k0}, ${1:k1}), par1,...)"
		],
		"description": "**sipHash64Keyed((k0, k1), par1,...)** \n\nSame as [sipHash64](https://clickhouse.tech/docs/en/sql-reference/functions/hash-functions#hash_functions-siphash64) but additionally takes an explicit key argument instead of using a fixed key. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/hash-functions/#siphash64keyed)"
	  },
	  "CH sipHash128Keyed": {
		"scope": "tinybird,sql",
		"prefix": [
		  "sipHash128Keyed"
		],
		"body": [
		  "sipHash128Keyed((${0:k0}, ${1:k1}), par1,...)"
		],
		"description": "**sipHash128Keyed((k0, k1), par1,...)** \n\nSame as [sipHash128](https://clickhouse.tech/docs/en/sql-reference/functions/hash-functions#hash_functions-siphash128) but additionally takes an explicit key argument instead of using a fixed key. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/hash-functions/#siphash128keyed)"
	  },
	  "CH sipHash128Reference": {
		"scope": "tinybird,sql",
		"prefix": [
		  "sipHash128Reference"
		],
		"body": [
		  "sipHash128Reference(${0:par1},...)"
		],
		"description": "**sipHash128Reference(par1,...)** \n\nLike [sipHash128](https://clickhouse.tech/docs/en/sql-reference/functions/hash-functions#hash_functions-siphash128) but implements the 128-bit algorithm from the original authors of SipHash. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/hash-functions/#siphash128reference)"
	  },
	  "CH sipHash128ReferenceKeyed": {
		"scope": "tinybird,sql",
		"prefix": [
		  "sipHash128ReferenceKeyed"
		],
		"body": [
		  "sipHash128ReferenceKeyed((${0:k0}, ${1:k1}), par1,...)"
		],
		"description": "**sipHash128ReferenceKeyed((k0, k1), par1,...)** \n\nSame as [sipHash128Reference](https://clickhouse.tech/docs/en/sql-reference/functions/hash-functions#hash_functions-siphash128reference) but additionally takes an explicit key argument instead of using a fixed key. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/hash-functions/#siphash128referencekeyed)"
	  },
	  "CH cityHash64": {
		"scope": "tinybird,sql",
		"prefix": [
		  "cityHash64"
		],
		"body": [
		  "cityHash64(${0:par1},...)"
		],
		"description": "**cityHash64(par1,...)** \n\nProduces a 64-bit [CityHash](https://github.com/google/cityhash) hash value. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/hash-functions/#cityhash64)"
	  },
	  "CH intHash32": {
		"scope": "tinybird,sql",
		"prefix": [
		  "intHash32"
		],
		"body": [
		  "intHash32(${0:x})"
		],
		"description": "**intHash32(x)** \n\nCalculates a 32-bit hash code from any type of integer. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/hash-functions/#inthash32)"
	  },
	  "CH intHash64": {
		"scope": "tinybird,sql",
		"prefix": [
		  "intHash64"
		],
		"body": [
		  "intHash64(${0:x})"
		],
		"description": "**intHash64(x)** \n\nCalculates a 64-bit hash code from any type of integer. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/hash-functions/#inthash64)"
	  },
	  "CH SHA1": {
		"scope": "tinybird,sql",
		"prefix": [
		  "SHA1"
		],
		"body": [
		  "SHA1(${0:x})"
		],
		"description": "**SHA1(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/hash-functions/#sha1)"
	  },
	  "CH SHA224": {
		"scope": "tinybird,sql",
		"prefix": [
		  "SHA224"
		],
		"body": [
		  "SHA224(${0:x})"
		],
		"description": "**SHA224(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/hash-functions/#sha1)"
	  },
	  "CH SHA256": {
		"scope": "tinybird,sql",
		"prefix": [
		  "SHA256"
		],
		"body": [
		  "SHA256(${0:x})"
		],
		"description": "**SHA256(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/hash-functions/#sha1)"
	  },
	  "CH SHA512": {
		"scope": "tinybird,sql",
		"prefix": [
		  "SHA512"
		],
		"body": [
		  "SHA512(${0:x})"
		],
		"description": "**SHA512(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/hash-functions/#sha1)"
	  },
	  "CH URLHash": {
		"scope": "tinybird,sql",
		"prefix": [
		  "URLHash"
		],
		"body": [
		  "URLHash(${0:url}[, ${1:N}])"
		],
		"description": "**URLHash(url[, N])** \n\nA fast, decent-quality non-cryptographic hash function for a string obtained from a URL using some type of normalization. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/hash-functions/#urlhashurl[)"
	  },
	  "CH farmFingerprint64": {
		"scope": "tinybird,sql",
		"prefix": [
		  "farmFingerprint64"
		],
		"body": [
		  "farmFingerprint64(${0:x})"
		],
		"description": "**farmFingerprint64(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/hash-functions/#farmfingerprint64)"
	  },
	  "CH farmHash64": {
		"scope": "tinybird,sql",
		"prefix": [
		  "farmHash64"
		],
		"body": [
		  "farmHash64(${0:par1}, ...)"
		],
		"description": "**farmHash64(par1, ...)** \n\nProduces a 64-bit [FarmHash](https://github.com/google/farmhash) or Fingerprint value. \\`farmFingerprint64\\` is preferred for a stable and portable value. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/hash-functions/#farmhash64)"
	  },
	  "CH javaHashUTF16LE": {
		"scope": "tinybird,sql",
		"prefix": [
		  "javaHashUTF16LE"
		],
		"body": [
		  "javaHashUTF16LE(${0:stringUtf16le})"
		],
		"description": "**javaHashUTF16LE(stringUtf16le)** \n\nCalculates [JavaHash](http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file/478a4add975b/src/share/classes/java/lang/String.java#l1452) from a string, assuming it contains bytes representing a string in UTF-16LE encoding. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/hash-functions/#javahashutf16le)"
	  },
	  "CH \\hiveHash": {
		"scope": "tinybird,sql",
		"prefix": [
		  "\\hiveHash"
		],
		"body": [
		  "\\hiveHash(${0:'Hello}, ${1:world!'})\\"
		],
		"description": "**\\hiveHash('Hello, world!')\\** \n\nCalculates \\`HiveHash\\` from a string. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/hash-functions/#hivehash)"
	  },
	  "CH metroHash64": {
		"scope": "tinybird,sql",
		"prefix": [
		  "metroHash64"
		],
		"body": [
		  "metroHash64(${0:par1}, ...)"
		],
		"description": "**metroHash64(par1, ...)** \n\nProduces a 64-bit [MetroHash](http://www.jandrewrogers.com/2015/05/27/metrohash/) hash value. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/hash-functions/#metrohash64)"
	  },
	  "CH murmurHash2_32": {
		"scope": "tinybird,sql",
		"prefix": [
		  "murmurHash2_32"
		],
		"body": [
		  "murmurHash2_32(${0:x})"
		],
		"description": "**murmurHash2_32(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/hash-functions/#murmurhash2_32)"
	  },
	  "CH murmurHash2_64": {
		"scope": "tinybird,sql",
		"prefix": [
		  "murmurHash2_64"
		],
		"body": [
		  "murmurHash2_64(${0:x})"
		],
		"description": "**murmurHash2_64(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/hash-functions/#murmurhash2_32)"
	  },
	  "CH gccMurmurHash": {
		"scope": "tinybird,sql",
		"prefix": [
		  "gccMurmurHash"
		],
		"body": [
		  "gccMurmurHash(${0:par1}, ...)"
		],
		"description": "**gccMurmurHash(par1, ...)** \n\nCalculates a 64-bit [MurmurHash2](https://github.com/aappleby/smhasher) hash value using the same hash seed as [gcc](https://github.com/gcc-mirror/gcc/blob/41d6b10e96a1de98e90a7c0378437c3255814b16/libstdc%2B%2B-v3/include/bits/functional_hash.h#L191). It is portable between CLang and GCC builds. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/hash-functions/#gccmurmurhash)"
	  },
	  "CH murmurHash3_32": {
		"scope": "tinybird,sql",
		"prefix": [
		  "murmurHash3_32"
		],
		"body": [
		  "murmurHash3_32(${0:x})"
		],
		"description": "**murmurHash3_32(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/hash-functions/#murmurhash3_32)"
	  },
	  "CH murmurHash3_64": {
		"scope": "tinybird,sql",
		"prefix": [
		  "murmurHash3_64"
		],
		"body": [
		  "murmurHash3_64(${0:x})"
		],
		"description": "**murmurHash3_64(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/hash-functions/#murmurhash3_32)"
	  },
	  "CH murmurHash3_128": {
		"scope": "tinybird,sql",
		"prefix": [
		  "murmurHash3_128"
		],
		"body": [
		  "murmurHash3_128(${0:expr})"
		],
		"description": "**murmurHash3_128(expr)** \n\nProduces a 128-bit [MurmurHash3](https://github.com/aappleby/smhasher) hash value. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/hash-functions/#murmurhash3_128)"
	  },
	  "CH xxHash32": {
		"scope": "tinybird,sql",
		"prefix": [
		  "xxHash32"
		],
		"body": [
		  "${0:x}${0:x}Hash32(${0:x})"
		],
		"description": "**xxHash32(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/hash-functions/#xxhash32)"
	  },
	  "CH xxHash64": {
		"scope": "tinybird,sql",
		"prefix": [
		  "xxHash64"
		],
		"body": [
		  "${0:x}${0:x}Hash64(${0:x})"
		],
		"description": "**xxHash64(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/hash-functions/#xxhash32)"
	  },
	  "CH ngramSimHash": {
		"scope": "tinybird,sql",
		"prefix": [
		  "ngramSimHash"
		],
		"body": [
		  "ngramSimHash(${0:string}[, ${1:ngramsize}])"
		],
		"description": "**ngramSimHash(string[, ngramsize])** \n\nSplits a ASCII string into n-grams of \\`ngramsize\\` symbols and returns the n-gram \\`simhash\\`. Is case sensitive. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/hash-functions/#ngramsimhash)"
	  },
	  "CH ngramSimHashCaseInsensitive": {
		"scope": "tinybird,sql",
		"prefix": [
		  "ngramSimHashCaseInsensitive"
		],
		"body": [
		  "ngramSimHashCaseInsensitive(${0:string}[, ${1:ngramsize}])"
		],
		"description": "**ngramSimHashCaseInsensitive(string[, ngramsize])** \n\nSplits a ASCII string into n-grams of \\`ngramsize\\` symbols and returns the n-gram \\`simhash\\`. Is case insensitive. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/hash-functions/#ngramsimhashcaseinsensitive)"
	  },
	  "CH ngramSimHashUTF8": {
		"scope": "tinybird,sql",
		"prefix": [
		  "ngramSimHashUTF8"
		],
		"body": [
		  "ngramSimHashUTF8(${0:string}[, ${1:ngramsize}])"
		],
		"description": "**ngramSimHashUTF8(string[, ngramsize])** \n\nSplits a UTF-8 string into n-grams of \\`ngramsize\\` symbols and returns the n-gram \\`simhash\\`. Is case sensitive. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/hash-functions/#ngramsimhashutf8)"
	  },
	  "CH ngramSimHashCaseInsensitiveUTF8": {
		"scope": "tinybird,sql",
		"prefix": [
		  "ngramSimHashCaseInsensitiveUTF8"
		],
		"body": [
		  "ngramSimHashCaseInsensitiveUTF8(${0:string}[, ${1:ngramsize}])"
		],
		"description": "**ngramSimHashCaseInsensitiveUTF8(string[, ngramsize])** \n\nSplits a UTF-8 string into n-grams of \\`ngramsize\\` symbols and returns the n-gram \\`simhash\\`. Is case insensitive. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/hash-functions/#ngramsimhashcaseinsensitiveutf8)"
	  },
	  "CH wordShingleSimHash": {
		"scope": "tinybird,sql",
		"prefix": [
		  "wordShingleSimHash"
		],
		"body": [
		  "wordShingleSimHash(${0:string}[, ${1:shinglesize}])"
		],
		"description": "**wordShingleSimHash(string[, shinglesize])** \n\nSplits a ASCII string into parts (shingles) of \\`shinglesize\\` words and returns the word shingle \\`simhash\\`. Is case sensitive. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/hash-functions/#wordshinglesimhash)"
	  },
	  "CH wordShingleSimHashCaseInsensitive": {
		"scope": "tinybird,sql",
		"prefix": [
		  "wordShingleSimHashCaseInsensitive"
		],
		"body": [
		  "wordShingleSimHashCaseInsensitive(${0:string}[, ${1:shinglesize}])"
		],
		"description": "**wordShingleSimHashCaseInsensitive(string[, shinglesize])** \n\nSplits a ASCII string into parts (shingles) of \\`shinglesize\\` words and returns the word shingle \\`simhash\\`. Is case insensitive. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/hash-functions/#wordshinglesimhashcaseinsensitive)"
	  },
	  "CH wordShingleSimHashUTF8": {
		"scope": "tinybird,sql",
		"prefix": [
		  "wordShingleSimHashUTF8"
		],
		"body": [
		  "wordShingleSimHashUTF8(${0:string}[, ${1:shinglesize}])"
		],
		"description": "**wordShingleSimHashUTF8(string[, shinglesize])** \n\nSplits a UTF-8 string into parts (shingles) of \\`shinglesize\\` words and returns the word shingle \\`simhash\\`. Is case sensitive. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/hash-functions/#wordshinglesimhashutf8)"
	  },
	  "CH wordShingleSimHashCaseInsensitiveUTF8": {
		"scope": "tinybird,sql",
		"prefix": [
		  "wordShingleSimHashCaseInsensitiveUTF8"
		],
		"body": [
		  "wordShingleSimHashCaseInsensitiveUTF8(${0:string}[, ${1:shinglesize}])"
		],
		"description": "**wordShingleSimHashCaseInsensitiveUTF8(string[, shinglesize])** \n\nSplits a UTF-8 string into parts (shingles) of \\`shinglesize\\` words and returns the word shingle \\`simhash\\`. Is case insensitive. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/hash-functions/#wordshinglesimhashcaseinsensitiveutf8)"
	  },
	  "CH ngramMinHash": {
		"scope": "tinybird,sql",
		"prefix": [
		  "ngramMinHash"
		],
		"body": [
		  "ngramMinHash(${0:string}[, ${1:ngramsize}, ${2:hashnum}])"
		],
		"description": "**ngramMinHash(string[, ngramsize, hashnum])** \n\nSplits a ASCII string into n-grams of \\`ngramsize\\` symbols and calculates hash values for each n-gram. Uses \\`hashnum\\` minimum hashes to calculate the minimum hash and \\`hashnum\\` maximum hashes to calculate the maximum hash. Returns a tuple with these hashes. Is case sensitive. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/hash-functions/#ngramminhash)"
	  },
	  "CH ngramMinHashCaseInsensitive": {
		"scope": "tinybird,sql",
		"prefix": [
		  "ngramMinHashCaseInsensitive"
		],
		"body": [
		  "ngramMinHashCaseInsensitive(${0:string}[, ${1:ngramsize}, ${2:hashnum}])"
		],
		"description": "**ngramMinHashCaseInsensitive(string[, ngramsize, hashnum])** \n\nSplits a ASCII string into n-grams of \\`ngramsize\\` symbols and calculates hash values for each n-gram. Uses \\`hashnum\\` minimum hashes to calculate the minimum hash and \\`hashnum\\` maximum hashes to calculate the maximum hash. Returns a tuple with these hashes. Is case insensitive. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/hash-functions/#ngramminhashcaseinsensitive)"
	  },
	  "CH ngramMinHashUTF8": {
		"scope": "tinybird,sql",
		"prefix": [
		  "ngramMinHashUTF8"
		],
		"body": [
		  "ngramMinHashUTF8(${0:string}[, ${1:ngramsize}, ${2:hashnum}])"
		],
		"description": "**ngramMinHashUTF8(string[, ngramsize, hashnum])** \n\nSplits a UTF-8 string into n-grams of \\`ngramsize\\` symbols and calculates hash values for each n-gram. Uses \\`hashnum\\` minimum hashes to calculate the minimum hash and \\`hashnum\\` maximum hashes to calculate the maximum hash. Returns a tuple with these hashes. Is case sensitive. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/hash-functions/#ngramminhashutf8)"
	  },
	  "CH ngramMinHashCaseInsensitiveUTF8": {
		"scope": "tinybird,sql",
		"prefix": [
		  "ngramMinHashCaseInsensitiveUTF8"
		],
		"body": [
		  "ngramMinHashCaseInsensitiveUTF8(${0:string} [, ${1:ngramsize}, ${2:hashnum}])"
		],
		"description": "**ngramMinHashCaseInsensitiveUTF8(string [, ngramsize, hashnum])** \n\nSplits a UTF-8 string into n-grams of \\`ngramsize\\` symbols and calculates hash values for each n-gram. Uses \\`hashnum\\` minimum hashes to calculate the minimum hash and \\`hashnum\\` maximum hashes to calculate the maximum hash. Returns a tuple with these hashes. Is case insensitive. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/hash-functions/#ngramminhashcaseinsensitiveutf8)"
	  },
	  "CH ngramMinHashArg": {
		"scope": "tinybird,sql",
		"prefix": [
		  "ngramMinHashArg"
		],
		"body": [
		  "ngramMinHashArg(${0:string}[, ${1:ngramsize}, ${2:hashnum}])"
		],
		"description": "**ngramMinHashArg(string[, ngramsize, hashnum])** \n\nSplits a ASCII string into n-grams of \\`ngramsize\\` symbols and returns the n-grams with minimum and maximum hashes, calculated by the [ngramMinHash](https://clickhouse.tech/docs/en/sql-reference/functions/hash-functions#ngramminhash) function with the same input. Is case sensitive. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/hash-functions/#ngramminhasharg)"
	  },
	  "CH ngramMinHashArgCaseInsensitive": {
		"scope": "tinybird,sql",
		"prefix": [
		  "ngramMinHashArgCaseInsensitive"
		],
		"body": [
		  "ngramMinHashArgCaseInsensitive(${0:string}[, ${1:ngramsize}, ${2:hashnum}])"
		],
		"description": "**ngramMinHashArgCaseInsensitive(string[, ngramsize, hashnum])** \n\nSplits a ASCII string into n-grams of \\`ngramsize\\` symbols and returns the n-grams with minimum and maximum hashes, calculated by the [ngramMinHashCaseInsensitive](https://clickhouse.tech/docs/en/sql-reference/functions/hash-functions#ngramminhashcaseinsensitive) function with the same input. Is case insensitive. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/hash-functions/#ngramminhashargcaseinsensitive)"
	  },
	  "CH ngramMinHashArgUTF8": {
		"scope": "tinybird,sql",
		"prefix": [
		  "ngramMinHashArgUTF8"
		],
		"body": [
		  "ngramMinHashArgUTF8(${0:string}[, ${1:ngramsize}, ${2:hashnum}])"
		],
		"description": "**ngramMinHashArgUTF8(string[, ngramsize, hashnum])** \n\nSplits a UTF-8 string into n-grams of \\`ngramsize\\` symbols and returns the n-grams with minimum and maximum hashes, calculated by the [ngramMinHashUTF8](https://clickhouse.tech/docs/en/sql-reference/functions/hash-functions#ngramminhashutf8) function with the same input. Is case sensitive. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/hash-functions/#ngramminhashargutf8)"
	  },
	  "CH ngramMinHashArgCaseInsensitiveUTF8": {
		"scope": "tinybird,sql",
		"prefix": [
		  "ngramMinHashArgCaseInsensitiveUTF8"
		],
		"body": [
		  "ngramMinHashArgCaseInsensitiveUTF8(${0:string}[, ${1:ngramsize}, ${2:hashnum}])"
		],
		"description": "**ngramMinHashArgCaseInsensitiveUTF8(string[, ngramsize, hashnum])** \n\nSplits a UTF-8 string into n-grams of \\`ngramsize\\` symbols and returns the n-grams with minimum and maximum hashes, calculated by the [ngramMinHashCaseInsensitiveUTF8](https://clickhouse.tech/docs/en/sql-reference/functions/hash-functions#ngramminhashcaseinsensitiveutf8) function with the same input. Is case insensitive. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/hash-functions/#ngramminhashargcaseinsensitiveutf8)"
	  },
	  "CH wordShingleMinHash": {
		"scope": "tinybird,sql",
		"prefix": [
		  "wordShingleMinHash"
		],
		"body": [
		  "wordShingleMinHash(${0:string}[, ${1:shinglesize}, ${2:hashnum}])"
		],
		"description": "**wordShingleMinHash(string[, shinglesize, hashnum])** \n\nSplits a ASCII string into parts (shingles) of \\`shinglesize\\` words and calculates hash values for each word shingle. Uses \\`hashnum\\` minimum hashes to calculate the minimum hash and \\`hashnum\\` maximum hashes to calculate the maximum hash. Returns a tuple with these hashes. Is case sensitive. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/hash-functions/#wordshingleminhash)"
	  },
	  "CH wordShingleMinHashCaseInsensitive": {
		"scope": "tinybird,sql",
		"prefix": [
		  "wordShingleMinHashCaseInsensitive"
		],
		"body": [
		  "wordShingleMinHashCaseInsensitive(${0:string}[, ${1:shinglesize}, ${2:hashnum}])"
		],
		"description": "**wordShingleMinHashCaseInsensitive(string[, shinglesize, hashnum])** \n\nSplits a ASCII string into parts (shingles) of \\`shinglesize\\` words and calculates hash values for each word shingle. Uses \\`hashnum\\` minimum hashes to calculate the minimum hash and \\`hashnum\\` maximum hashes to calculate the maximum hash. Returns a tuple with these hashes. Is case insensitive. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/hash-functions/#wordshingleminhashcaseinsensitive)"
	  },
	  "CH wordShingleMinHashUTF8": {
		"scope": "tinybird,sql",
		"prefix": [
		  "wordShingleMinHashUTF8"
		],
		"body": [
		  "wordShingleMinHashUTF8(${0:string}[, ${1:shinglesize}, ${2:hashnum}])"
		],
		"description": "**wordShingleMinHashUTF8(string[, shinglesize, hashnum])** \n\nSplits a UTF-8 string into parts (shingles) of \\`shinglesize\\` words and calculates hash values for each word shingle. Uses \\`hashnum\\` minimum hashes to calculate the minimum hash and \\`hashnum\\` maximum hashes to calculate the maximum hash. Returns a tuple with these hashes. Is case sensitive. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/hash-functions/#wordshingleminhashutf8)"
	  },
	  "CH wordShingleMinHashCaseInsensitiveUTF8": {
		"scope": "tinybird,sql",
		"prefix": [
		  "wordShingleMinHashCaseInsensitiveUTF8"
		],
		"body": [
		  "wordShingleMinHashCaseInsensitiveUTF8(${0:string}[, ${1:shinglesize}, ${2:hashnum}])"
		],
		"description": "**wordShingleMinHashCaseInsensitiveUTF8(string[, shinglesize, hashnum])** \n\nSplits a UTF-8 string into parts (shingles) of \\`shinglesize\\` words and calculates hash values for each word shingle. Uses \\`hashnum\\` minimum hashes to calculate the minimum hash and \\`hashnum\\` maximum hashes to calculate the maximum hash. Returns a tuple with these hashes. Is case insensitive. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/hash-functions/#wordshingleminhashcaseinsensitiveutf8)"
	  },
	  "CH wordShingleMinHashArg": {
		"scope": "tinybird,sql",
		"prefix": [
		  "wordShingleMinHashArg"
		],
		"body": [
		  "wordShingleMinHashArg(${0:string}[, ${1:shinglesize}, ${2:hashnum}])"
		],
		"description": "**wordShingleMinHashArg(string[, shinglesize, hashnum])** \n\nSplits a ASCII string into parts (shingles) of \\`shinglesize\\` words each and returns the shingles with minimum and maximum word hashes, calculated by the [wordshingleMinHash](https://clickhouse.tech/docs/en/sql-reference/functions/hash-functions#wordshingleminhash) function with the same input. Is case sensitive. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/hash-functions/#wordshingleminhasharg)"
	  },
	  "CH wordShingleMinHashArgCaseInsensitive": {
		"scope": "tinybird,sql",
		"prefix": [
		  "wordShingleMinHashArgCaseInsensitive"
		],
		"body": [
		  "wordShingleMinHashArgCaseInsensitive(${0:string}[, ${1:shinglesize}, ${2:hashnum}])"
		],
		"description": "**wordShingleMinHashArgCaseInsensitive(string[, shinglesize, hashnum])** \n\nSplits a ASCII string into parts (shingles) of \\`shinglesize\\` words each and returns the shingles with minimum and maximum word hashes, calculated by the [wordShingleMinHashCaseInsensitive](https://clickhouse.tech/docs/en/sql-reference/functions/hash-functions#wordshingleminhashcaseinsensitive) function with the same input. Is case insensitive. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/hash-functions/#wordshingleminhashargcaseinsensitive)"
	  },
	  "CH wordShingleMinHashArgUTF8": {
		"scope": "tinybird,sql",
		"prefix": [
		  "wordShingleMinHashArgUTF8"
		],
		"body": [
		  "wordShingleMinHashArgUTF8(${0:string}[, ${1:shinglesize}, ${2:hashnum}])"
		],
		"description": "**wordShingleMinHashArgUTF8(string[, shinglesize, hashnum])** \n\nSplits a UTF-8 string into parts (shingles) of \\`shinglesize\\` words each and returns the shingles with minimum and maximum word hashes, calculated by the [wordShingleMinHashUTF8](https://clickhouse.tech/docs/en/sql-reference/functions/hash-functions#wordshingleminhashutf8) function with the same input. Is case sensitive. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/hash-functions/#wordshingleminhashargutf8)"
	  },
	  "CH generateUUIDv4": {
		"scope": "tinybird,sql",
		"prefix": [
		  "generateUUIDv4"
		],
		"body": [
		  "generateUUIDv4([${0:x}])"
		],
		"description": "**generateUUIDv4([x])** \n\nGenerates the UUID.\n\n\n                            INSERT INTO t_uuid [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/uuid-functions/#generateuuidv4)"
	  },
	  "CH empty": {
		"scope": "tinybird,sql",
		"prefix": [
		  "empty"
		],
		"body": [
		  "empty([${0:x}])"
		],
		"description": "**empty([x])** \n\nChecks whether the input array is empty.\n\n\n                            Can be optimized by enabling the [optimize_functions_to_subcolumns](../../operations/settings/settings.md#optimize-functions-to-subcolumns) setting. With \\`optimize_functions_to_subcolumns = 1\\` the function reads only [size0](../../sql-reference/data-types/array.md#array-size) subcolumn instead of reading and processing the whole array column. The query \\` [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#empty)"
	  },
	  "CH notEmpty": {
		"scope": "tinybird,sql",
		"prefix": [
		  "notEmpty"
		],
		"body": [
		  "notEmpty([${0:x}])"
		],
		"description": "**notEmpty([x])** \n\nChecks whether the input array is non-empty.\n\n\n                            Can be optimized by enabling the [optimize_functions_to_subcolumns](../../operations/settings/settings.md#optimize-functions-to-subcolumns) setting. With \\`optimize_functions_to_subcolumns = 1\\` the function reads only [size0](../../sql-reference/data-types/array.md#array-size) subcolumn instead of reading and processing the whole array column. The query \\` [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#notempty)"
	  },
	  "CH toUUID": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toUUID"
		],
		"body": [
		  "toUUID(${0:String})"
		],
		"description": "**toUUID(String)** \n\nConverts String type value to UUID type. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/uuid-functions/#touuid)"
	  },
	  "CH toUUIDOrDefault": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toUUIDOrDefault"
		],
		"body": [
		  "toUUIDOrDefault (${0:x},${1:y})"
		],
		"description": "**toUUIDOrDefault (x,y)** \n\n**Arguments** [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/uuid-functions/#touuidordefault)"
	  },
	  "CH toUUIDOrNull": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toUUIDOrNull"
		],
		"body": [
		  "toUUIDOrNull(${0:String})"
		],
		"description": "**toUUIDOrNull(String)** \n\nIt takes an argument of type String and tries to parse it into UUID. If failed, returns NULL. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/uuid-functions/#touuidornull)"
	  },
	  "CH toUUIDOrZero": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toUUIDOrZero"
		],
		"body": [
		  "toUUIDOrZero(${0:String})"
		],
		"description": "**toUUIDOrZero(String)** \n\nIt takes an argument of type String and tries to parse it into UUID. If failed, returns zero UUID. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/uuid-functions/#touuidorzero)"
	  },
	  "CH UUIDStringToNum": {
		"scope": "tinybird,sql",
		"prefix": [
		  "UUIDStringToNum"
		],
		"body": [
		  "UUIDStringToNum(${0:string}[, ${1:variant = 1}])"
		],
		"description": "**UUIDStringToNum(string[, variant = 1])** \n\nAccepts \\`string\\` containing 36 characters in the format \\`xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\\`, and returns a FixedString. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/uuid-functions/#uuidstringtonum)"
	  },
	  "CH UUIDNumToString": {
		"scope": "tinybird,sql",
		"prefix": [
		  "UUIDNumToString"
		],
		"body": [
		  "UUIDNumToString(${0:binary}[, ${1:variant = 1}])"
		],
		"description": "**UUIDNumToString(binary[, variant = 1])** \n\nAccepts \\`binary\\` containing a binary representation of a UUID, with its format optionally specified by \\`variant\\` (\\`Big-endian\\` by default), and returns a string containing 36 characters in text format. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/uuid-functions/#uuidnumtostring)"
	  },
	  "CH serverUUID": {
		"scope": "tinybird,sql",
		"prefix": [
		  "serverUUID"
		],
		"body": [
		  "serverUUID()"
		],
		"description": "**serverUUID()** \n\nReturns the random and unique UUID, which is generated when the server is first started and stored forever. The result writes to the file \\`uuid\\` created in the ClickHouse server directory \\`/var/lib/clickhouse/\\`. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/uuid-functions/#serveruuid)"
	  },
	  "CH rand": {
		"scope": "tinybird,sql",
		"prefix": [
		  "rand"
		],
		"body": [
		  "rand(${0:x})"
		],
		"description": "**rand(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/random-functions/#rand)"
	  },
	  "CH rand32": {
		"scope": "tinybird,sql",
		"prefix": [
		  "rand32"
		],
		"body": [
		  "rand32(${0:x})"
		],
		"description": "**rand32(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/random-functions/#rand)"
	  },
	  "CH rand64": {
		"scope": "tinybird,sql",
		"prefix": [
		  "rand64"
		],
		"body": [
		  "rand64(${0:x})"
		],
		"description": "**rand64(x)** \n\nReturns a pseudo-random UInt64 number, evenly distributed among all UInt64-type numbers. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/random-functions/#rand64)"
	  },
	  "CH randCanonical": {
		"scope": "tinybird,sql",
		"prefix": [
		  "randCanonical"
		],
		"body": [
		  "randCanonical(${0:x})"
		],
		"description": "**randCanonical(x)** \n\nThe function generates pseudo random results with independent and identically distributed uniformly distributed values in [0, 1). [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/random-functions/#randcanonical)"
	  },
	  "CH randConstant": {
		"scope": "tinybird,sql",
		"prefix": [
		  "randConstant"
		],
		"body": [
		  "randConstant([${0:x}])"
		],
		"description": "**randConstant([x])** \n\nProduces a constant column with a random value. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/random-functions/#randconstant)"
	  },
	  "CH randUniform": {
		"scope": "tinybird,sql",
		"prefix": [
		  "randUniform"
		],
		"body": [
		  "randUniform(${0:min}, ${1:max})"
		],
		"description": "**randUniform(min, max)** \n\nReturn random number based on [continuous uniform distribution](https://en.wikipedia.org/wiki/Continuous_uniform_distribution) in a specified range from \\`min\\` to \\`max\\`. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/random-functions/#randuniform)"
	  },
	  "CH randNormal": {
		"scope": "tinybird,sql",
		"prefix": [
		  "randNormal"
		],
		"body": [
		  "randNormal(${0:meam}, ${1:variance})"
		],
		"description": "**randNormal(meam, variance)** \n\nReturn random number based on [normal distribution](https://en.wikipedia.org/wiki/Normal_distribution). [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/random-functions/#randnormal)"
	  },
	  "CH randLogNormal": {
		"scope": "tinybird,sql",
		"prefix": [
		  "randLogNormal"
		],
		"body": [
		  "randLogNormal(${0:meam}, ${1:variance})"
		],
		"description": "**randLogNormal(meam, variance)** \n\nReturn random number based on [log-normal distribution](https://en.wikipedia.org/wiki/Log-normal_distribution). [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/random-functions/#randlognormal)"
	  },
	  "CH randBinomial": {
		"scope": "tinybird,sql",
		"prefix": [
		  "randBinomial"
		],
		"body": [
		  "randBinomial(${0:experiments}, ${1:probability})"
		],
		"description": "**randBinomial(experiments, probability)** \n\nReturn random number based on [binomial distribution](https://en.wikipedia.org/wiki/Binomial_distribution). [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/random-functions/#randbinomial)"
	  },
	  "CH randNegativeBinomial": {
		"scope": "tinybird,sql",
		"prefix": [
		  "randNegativeBinomial"
		],
		"body": [
		  "randNegativeBinomial(${0:experiments}, ${1:probability})"
		],
		"description": "**randNegativeBinomial(experiments, probability)** \n\nReturn random number based on [negative binomial distribution](https://en.wikipedia.org/wiki/Negative_binomial_distribution). [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/random-functions/#randnegativebinomial)"
	  },
	  "CH randPoisson": {
		"scope": "tinybird,sql",
		"prefix": [
		  "randPoisson"
		],
		"body": [
		  "ra${0:n}dPoisso${0:n}(${0:n})"
		],
		"description": "**randPoisson(n)** \n\nReturn random number based on [Poisson distribution](https://en.wikipedia.org/wiki/Poisson_distribution). [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/random-functions/#randpoisson)"
	  },
	  "CH randBernoulli": {
		"scope": "tinybird,sql",
		"prefix": [
		  "randBernoulli"
		],
		"body": [
		  "randBernoulli(${0:probability})"
		],
		"description": "**randBernoulli(probability)** \n\nReturn random number based on [Bernoulli distribution](https://en.wikipedia.org/wiki/Bernoulli_distribution). [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/random-functions/#randbernoulli)"
	  },
	  "CH randExponential": {
		"scope": "tinybird,sql",
		"prefix": [
		  "randExponential"
		],
		"body": [
		  "randExponential(${0:lambda})"
		],
		"description": "**randExponential(lambda)** \n\nReturn random number based on [exponential distribution](https://en.wikipedia.org/wiki/Exponential_distribution). [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/random-functions/#randexponential)"
	  },
	  "CH randChiSquared": {
		"scope": "tinybird,sql",
		"prefix": [
		  "randChiSquared"
		],
		"body": [
		  "randChiSquared(${0:degree_of_freedom})"
		],
		"description": "**randChiSquared(degree_of_freedom)** \n\nReturn random number based on [Chi-square distribution](https://en.wikipedia.org/wiki/Chi-squared_distribution) - a distribution of a sum of the squares of k independent standard normal random variables. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/random-functions/#randchisquared)"
	  },
	  "CH randStudentT": {
		"scope": "tinybird,sql",
		"prefix": [
		  "randStudentT"
		],
		"body": [
		  "randStudentT(${0:degree_of_freedom})"
		],
		"description": "**randStudentT(degree_of_freedom)** \n\nReturn random number based on [Student's t-distribution](https://en.wikipedia.org/wiki/Student%27s_t-distribution). [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/random-functions/#randstudentt)"
	  },
	  "CH randFisherF": {
		"scope": "tinybird,sql",
		"prefix": [
		  "randFisherF"
		],
		"body": [
		  "randFisherF(${0:d1}, ${1:d2})"
		],
		"description": "**randFisherF(d1, d2)** \n\nReturn random number based on [F-distribution](https://en.wikipedia.org/wiki/F-distribution). [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/random-functions/#randfisherf)"
	  },
	  "CH randomString": {
		"scope": "tinybird,sql",
		"prefix": [
		  "randomString"
		],
		"body": [
		  "randomString(${0:length})"
		],
		"description": "**randomString(length)** \n\nGenerates a binary string of the specified length filled with random bytes (including zero bytes). [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#randomstring)"
	  },
	  "CH randomFixedString": {
		"scope": "tinybird,sql",
		"prefix": [
		  "randomFixedString"
		],
		"body": [
		  "randomFixedString(${0:length})"
		],
		"description": "**randomFixedString(length)** \n\nGenerates a binary string of the specified length filled with random bytes (including zero bytes). [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#randomfixedstring)"
	  },
	  "CH randomPrintableASCII": {
		"scope": "tinybird,sql",
		"prefix": [
		  "randomPrintableASCII"
		],
		"body": [
		  "randomPrintableASCII(${0:length})"
		],
		"description": "**randomPrintableASCII(length)** \n\nGenerates a string with a random set of [ASCII](https://en.wikipedia.org/wiki/ASCII#Printable_characters) printable characters. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#randomprintableascii)"
	  },
	  "CH randomStringUTF8": {
		"scope": "tinybird,sql",
		"prefix": [
		  "randomStringUTF8"
		],
		"body": [
		  "randomStringUTF8(${0:length})"
		],
		"description": "**randomStringUTF8(length)** \n\nGenerates a random string of a specified length. Result string contains valid UTF-8 code points. The value of code points may be outside of the range of assigned Unicode. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#randomstringutf8)"
	  },
	  "CH fuzzBits": {
		"scope": "tinybird,sql",
		"prefix": [
		  "fuzzBits"
		],
		"body": [
		  "fuzzBits([${0:s}], ${1:[prob}])"
		],
		"description": "**fuzzBits([s], [prob])** \n\n sql [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/random-functions/#fuzzbits)"
	  },
	  "CH stem": {
		"scope": "tinybird,sql",
		"prefix": [
		  "stem"
		],
		"body": [
		  "stem(${0:'language'}, ${1:word})"
		],
		"description": "**stem('language', word)** \n\nPerforms stemming on a given word. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/nlp-functions/#stem)"
	  },
	  "CH lemmatize": {
		"scope": "tinybird,sql",
		"prefix": [
		  "lemmatize"
		],
		"body": [
		  "lemmatize(${0:'language'}, ${1:word})"
		],
		"description": "**lemmatize('language', word)** \n\nPerforms lemmatization on a given word. Needs dictionaries to operate, which can be obtained [here](https://github.com/vpodpecan/lemmagen3/tree/master/src/lemmagen3/models). [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/nlp-functions/#lemmatize)"
	  },
	  "CH synonyms": {
		"scope": "tinybird,sql",
		"prefix": [
		  "synonyms"
		],
		"body": [
		  "synonyms(${0:'extension_name'}, ${1:word})"
		],
		"description": "**synonyms('extension_name', word)** \n\nFinds synonyms to a given word. There are two types of synonym extensions: \\`plain\\` and \\`wordnet\\`. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/nlp-functions/#synonyms)"
	  },
	  "CH detectLanguage": {
		"scope": "tinybird,sql",
		"prefix": [
		  "detectLanguage"
		],
		"body": [
		  "detectLanguage(${0:'text_to_be_analyzed'})"
		],
		"description": "**detectLanguage('text_to_be_analyzed')** \n\nDetects the language of the UTF8-encoded input string. The function uses the [CLD2 library](https://github.com/CLD2Owners/cld2) for detection, and it returns the 2-letter ISO language code. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/nlp-functions/#detectlanguage)"
	  },
	  "CH detectLanguageMixed": {
		"scope": "tinybird,sql",
		"prefix": [
		  "detectLanguageMixed"
		],
		"body": [
		  "detectLanguageMixed(${0:'text_to_be_analyzed'})"
		],
		"description": "**detectLanguageMixed('text_to_be_analyzed')** \n\nSimilar to the \\`detectLanguage\\` function, but \\`detectLanguageMixed\\` returns a \\`Map\\` of 2-letter language codes that are mapped to the percentage of the certain language in the text. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/nlp-functions/#detectlanguagemixed)"
	  },
	  "CH detectLanguageUnknown": {
		"scope": "tinybird,sql",
		"prefix": [
		  "detectLanguageUnknown"
		],
		"body": [
		  "detectLanguageUnknown(${0:'text_to_be_analyzed'})"
		],
		"description": "**detectLanguageUnknown('text_to_be_analyzed')** \n\nSimilar to the \\`detectLanguage\\` function, except the \\`detectLanguageUnknown\\` function works with non-UTF8-encoded strings. Prefer this version when your character set is UTF-16 or UTF-32. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/nlp-functions/#detectlanguageunknown)"
	  },
	  "CH if": {
		"scope": "tinybird,sql",
		"prefix": [
		  "if"
		],
		"body": [
		  "if(${0:cond}, ${1:then}, ${2:else})"
		],
		"description": "**if(cond, then, else)** \n\nControls conditional branching. Unlike most systems, ClickHouse always evaluate both expressions \\`then\\` and \\`else\\`.\n\n\n                            You can use the [short_circuit_function_evaluation](../../operations/settings/settings.md#short-circuit-function-evaluation) setting to calculate the \\`if\\` function according to a short scheme. If this setting is enabled, \\`then\\` expression is evaluated only on rows where \\`cond\\` is true, \\`else\\` expression \u2013 where \\`cond\\` is false. For example, an exception about division by zero is not thrown when executing the query \\` [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/conditional-functions/#if)"
	  },
	  "CH multiIf": {
		"scope": "tinybird,sql",
		"prefix": [
		  "multiIf"
		],
		"body": [
		  "multiIf(${0:cond_1}, ${1:then_1}, ${2:cond_2}, ${3:then_2}, ..., ${5:else})"
		],
		"description": "**multiIf(cond_1, then_1, cond_2, then_2, ..., else)** \n\nAllows you to write the CASE operator more compactly in the query.\n\n\n                            You can use the [short_circuit_function_evaluation](../../operations/settings/settings.md#short-circuit-function-evaluation) setting to calculate the \\`multiIf\\` function according to a short scheme. If this setting is enabled, \\`then_i\\` expression is evaluated only on rows where \\`((NOT cond_1) AND (NOT cond_2) AND ... AND (NOT cond_{i-1}) AND cond_i)\\` is true, \\`cond_i\\` will be evaluated only on rows where \\`((NOT cond_1) AND (NOT cond_2) AND ... AND (NOT cond_{i-1}))\\` is true. For example, an exception about division by zero is not thrown when executing the query \\` [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/conditional-functions/#multiif)"
	  },
	  "CH isNull": {
		"scope": "tinybird,sql",
		"prefix": [
		  "isNull"
		],
		"body": [
		  "isNull(${0:x})"
		],
		"description": "**isNull(x)** \n\nChecks whether the argument is NULL. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/functions-for-nulls/#isnull)"
	  },
	  "CH isNotNull": {
		"scope": "tinybird,sql",
		"prefix": [
		  "isNotNull"
		],
		"body": [
		  "isNotNull(${0:x})"
		],
		"description": "**isNotNull(x)** \n\nChecks whether the argument is NULL. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/functions-for-nulls/#isnotnull)"
	  },
	  "CH coalesce": {
		"scope": "tinybird,sql",
		"prefix": [
		  "coalesce"
		],
		"body": [
		  "coalesce(${0:x})"
		],
		"description": "**coalesce(x)** \n\nChecks from left to right whether \\`NULL\\` arguments were passed and returns the first non-\\`NULL\\` argument. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/functions-for-nulls/#coalesce)"
	  },
	  "CH ifNull": {
		"scope": "tinybird,sql",
		"prefix": [
		  "ifNull"
		],
		"body": [
		  "ifNull(${0:x})"
		],
		"description": "**ifNull(x)** \n\nReturns an alternative value if the main argument is \\`NULL\\`. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/functions-for-nulls/#ifnull)"
	  },
	  "CH nullIf": {
		"scope": "tinybird,sql",
		"prefix": [
		  "nullIf"
		],
		"body": [
		  "nullIf(${0:x})"
		],
		"description": "**nullIf(x)** \n\nReturns \\`NULL\\` if the arguments are equal. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/functions-for-nulls/#nullif)"
	  },
	  "CH assumeNotNull": {
		"scope": "tinybird,sql",
		"prefix": [
		  "assumeNotNull"
		],
		"body": [
		  "assumeNotNull(${0:x})"
		],
		"description": "**assumeNotNull(x)** \n\nResults in an equivalent non-\\`Nullable\\` value for a Nullable type. In case the original value is \\`NULL\\` the result is undetermined. See also \\`ifNull\\` and \\`coalesce\\` functions. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/functions-for-nulls/#assumenotnull)"
	  },
	  "CH bitAnd": {
		"scope": "tinybird,sql",
		"prefix": [
		  "bitAnd"
		],
		"body": [
		  "bitAnd(${0:a}, ${1:b})"
		],
		"description": "**bitAnd(a, b)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/bit-functions/#bitanda)"
	  },
	  "CH bitOr": {
		"scope": "tinybird,sql",
		"prefix": [
		  "bitOr"
		],
		"body": [
		  "bitOr(${0:a}, ${1:b})"
		],
		"description": "**bitOr(a, b)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/bit-functions/#bitora)"
	  },
	  "CH bitXor": {
		"scope": "tinybird,sql",
		"prefix": [
		  "bitXor"
		],
		"body": [
		  "bitXor(${0:a}, ${1:b})"
		],
		"description": "**bitXor(a, b)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/bit-functions/#bitxora)"
	  },
	  "CH bitNot": {
		"scope": "tinybird,sql",
		"prefix": [
		  "bitNot"
		],
		"body": [
		  "bitNot(${0:a})"
		],
		"description": "**bitNot(a)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/bit-functions/#bitnota)"
	  },
	  "CH bitShiftLeft": {
		"scope": "tinybird,sql",
		"prefix": [
		  "bitShiftLeft"
		],
		"body": [
		  "bitShiftLeft(${0:a}, ${1:b})"
		],
		"description": "**bitShiftLeft(a, b)** \n\nShifts the binary representation of a value to the left by a specified number of bit positions. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/bit-functions/#bitshiftlefta)"
	  },
	  "CH bitShiftRight": {
		"scope": "tinybird,sql",
		"prefix": [
		  "bitShiftRight"
		],
		"body": [
		  "bitShiftRight(${0:a}, ${1:b})"
		],
		"description": "**bitShiftRight(a, b)** \n\nShifts the binary representation of a value to the right by a specified number of bit positions. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/bit-functions/#bitshiftrighta)"
	  },
	  "CH bitRotateLeft": {
		"scope": "tinybird,sql",
		"prefix": [
		  "bitRotateLeft"
		],
		"body": [
		  "bitRotateLeft(${0:a}, ${1:b})"
		],
		"description": "**bitRotateLeft(a, b)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/bit-functions/#bitrotatelefta)"
	  },
	  "CH bitRotateRight": {
		"scope": "tinybird,sql",
		"prefix": [
		  "bitRotateRight"
		],
		"body": [
		  "bitRotateRight(${0:a}, ${1:b})"
		],
		"description": "**bitRotateRight(a, b)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/bit-functions/#bitrotaterighta)"
	  },
	  "CH bitSlice": {
		"scope": "tinybird,sql",
		"prefix": [
		  "bitSlice"
		],
		"body": [
		  "bitSlice(${0:s}, off${0:s}et, ${2:length})"
		],
		"description": "**bitSlice(s, offset, length)** \n\nReturns a substring starting with the bit from the 'offset' index that is 'length' bits long. bits indexing starts from\n\n\n                            select bin('Hello'), bin(bitSlice('Hello', 1, 8))\n                            \n                             [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/bit-functions/#bitslices)"
	  },
	  "CH \\bitTest": {
		"scope": "tinybird,sql",
		"prefix": [
		  "\\bitTest"
		],
		"body": [
		  "\\bitTest(${0:43}, ${1:1})\\"
		],
		"description": "**\\bitTest(43, 1)\\** \n\nTakes any integer and converts it into [binary form](https://en.wikipedia.org/wiki/Binary_number), returns the value of a bit at specified position. The countdown starts from 0 from the right to the left. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/bit-functions/#bittest)"
	  },
	  "CH \\bitTestAll": {
		"scope": "tinybird,sql",
		"prefix": [
		  "\\bitTestAll"
		],
		"body": [
		  "\\bitTestAll(${${${2:1}:0}:4${3:3}}, ${${2:1}:0}, ${2:1}, ${3:3}, ${4:5})\\"
		],
		"description": "**\\bitTestAll(43, 0, 1, 3, 5)\\** \n\nReturns result of [logical conjuction](https://en.wikipedia.org/wiki/Logical_conjunction) (AND operator) of all bits at given positions. The countdown starts from 0 from the right to the left. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/bit-functions/#bittestall)"
	  },
	  "CH \\bitTestAny": {
		"scope": "tinybird,sql",
		"prefix": [
		  "\\bitTestAny"
		],
		"body": [
		  "\\bitTestAny(${${1:0}:43}, ${1:0}, ${2:2})\\"
		],
		"description": "**\\bitTestAny(43, 0, 2)\\** \n\nReturns result of [logical disjunction](https://en.wikipedia.org/wiki/Logical_disjunction) (OR operator) of all bits at given positions. The countdown starts from 0 from the right to the left. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/bit-functions/#bittestany)"
	  },
	  "CH tumble": {
		"scope": "tinybird,sql",
		"prefix": [
		  "tumble"
		],
		"body": [
		  "tumble(${0:x})"
		],
		"description": "**tumble(x)** \n\nA tumbling time window assigns records to non-overlapping, continuous windows with a fixed duration (\\`interval\\`). [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/time-window-functions/#tumble)"
	  },
	  "CH hop": {
		"scope": "tinybird,sql",
		"prefix": [
		  "hop"
		],
		"body": [
		  "hop(${0:x})"
		],
		"description": "**hop(x)** \n\nA hopping time window has a fixed duration (\\`window_interval\\`) and hops by a specified hop interval (\\`hop_interval\\`). If the \\`hop_interval\\` is smaller than the \\`window_interval\\`, hopping windows are overlapping. Thus, records can be assigned to multiple windows. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/time-window-functions/#hop)"
	  },
	  "CH tumbleStart": {
		"scope": "tinybird,sql",
		"prefix": [
		  "tumbleStart"
		],
		"body": [
		  "tumbleStart(${0:x})"
		],
		"description": "**tumbleStart(x)** \n\nReturns the inclusive lower bound of the corresponding tumbling window. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/time-window-functions/#tumblestart)"
	  },
	  "CH tumbleEnd": {
		"scope": "tinybird,sql",
		"prefix": [
		  "tumbleEnd"
		],
		"body": [
		  "tumbleEnd(${0:x})"
		],
		"description": "**tumbleEnd(x)** \n\nReturns the exclusive upper bound of the corresponding tumbling window. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/time-window-functions/#tumbleend)"
	  },
	  "CH hopStart": {
		"scope": "tinybird,sql",
		"prefix": [
		  "hopStart"
		],
		"body": [
		  "hopStart(${0:x})"
		],
		"description": "**hopStart(x)** \n\nReturns the inclusive lower bound of the corresponding hopping window. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/time-window-functions/#hopstart)"
	  },
	  "CH hopEnd": {
		"scope": "tinybird,sql",
		"prefix": [
		  "hopEnd"
		],
		"body": [
		  "hopEnd(${0:x})"
		],
		"description": "**hopEnd(x)** \n\nReturns the exclusive upper bound of the corresponding hopping window. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/time-window-functions/#hopend)"
	  },
	  "CH IPv4NumToString": {
		"scope": "tinybird,sql",
		"prefix": [
		  "IPv4NumToString"
		],
		"body": [
		  "IPv4NumToString(${0:num})"
		],
		"description": "**IPv4NumToString(num)** \n\nTakes a UInt32 number. Interprets it as an IPv4 address in big endian. Returns a string containing the corresponding IPv4 address in the format A.B.C.d (dot-separated numbers in decimal form). [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/ip-address-functions/#ipv4numtostringnum)"
	  },
	  "CH IPv4StringToNum": {
		"scope": "tinybird,sql",
		"prefix": [
		  "IPv4StringToNum"
		],
		"body": [
		  "IPv4StringToNum(${0:s})"
		],
		"description": "**IPv4StringToNum(s)** \n\nThe reverse function of IPv4NumToString. If the IPv4 address has an invalid format, it throws exception. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/ip-address-functions/#ipv4stringtonums)"
	  },
	  "CH IPv4StringToNumOrDefault": {
		"scope": "tinybird,sql",
		"prefix": [
		  "IPv4StringToNumOrDefault"
		],
		"body": [
		  "IPv4StringToNumOrDefault(${0:s})"
		],
		"description": "**IPv4StringToNumOrDefault(s)** \n\nSame as \\`IPv4StringToNum\\`, but if the IPv4 address has an invalid format, it returns 0. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/ip-address-functions/#ipv4stringtonumordefaults)"
	  },
	  "CH IPv4StringToNumOrNull": {
		"scope": "tinybird,sql",
		"prefix": [
		  "IPv4StringToNumOrNull"
		],
		"body": [
		  "IPv4StringToNumOrNull(${0:s})"
		],
		"description": "**IPv4StringToNumOrNull(s)** \n\nSame as \\`IPv4StringToNum\\`, but if the IPv4 address has an invalid format, it returns null. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/ip-address-functions/#ipv4stringtonumornulls)"
	  },
	  "CH IPv4NumToStringClassC": {
		"scope": "tinybird,sql",
		"prefix": [
		  "IPv4NumToStringClassC"
		],
		"body": [
		  "IPv4NumToStringClassC(${0:num})"
		],
		"description": "**IPv4NumToStringClassC(num)** \n\nSimilar to IPv4NumToString, but using xxx instead of the last octet. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/ip-address-functions/#ipv4numtostringclasscnum)"
	  },
	  "CH IPv6StringToNum": {
		"scope": "tinybird,sql",
		"prefix": [
		  "IPv6StringToNum"
		],
		"body": [
		  "IPv6StringToNum(${0:string})"
		],
		"description": "**IPv6StringToNum(string)** \n\nThe reverse function of [IPv6NumToString](https://clickhouse.tech/docs/en/sql-reference/functions/ip-address-functions#ipv6numtostringx). If the IPv6 address has an invalid format, it throws exception. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/ip-address-functions/#ipv6stringtonum)"
	  },
	  "CH IPv6StringToNumOrDefault": {
		"scope": "tinybird,sql",
		"prefix": [
		  "IPv6StringToNumOrDefault"
		],
		"body": [
		  "IPv6StringToNumOrDefault(${0:s})"
		],
		"description": "**IPv6StringToNumOrDefault(s)** \n\nSame as \\`toIPv6\\`, but if the IPv6 address has an invalid format, it returns 0. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/ip-address-functions/#ipv6stringtonumordefaults)"
	  },
	  "CH IPv6StringToNumOrNull": {
		"scope": "tinybird,sql",
		"prefix": [
		  "IPv6StringToNumOrNull"
		],
		"body": [
		  "IPv6StringToNumOrNull(${0:s})"
		],
		"description": "**IPv6StringToNumOrNull(s)** \n\nSame as \\`toIPv6\\`, but if the IPv6 address has an invalid format, it returns null. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/ip-address-functions/#ipv6stringtonumornulls)"
	  },
	  "CH IPv4ToIPv6": {
		"scope": "tinybird,sql",
		"prefix": [
		  "IPv4ToIPv6"
		],
		"body": [
		  "IPv4ToIPv6(${0:x})"
		],
		"description": "**IPv4ToIPv6(x)** \n\nTakes a \\`UInt32\\` number. Interprets it as an IPv4 address in [big endian](https://en.wikipedia.org/wiki/Endianness). Returns a \\`FixedString(16)\\` value containing the IPv6 address in binary format. Examples: [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/ip-address-functions/#ipv4toipv6x)"
	  },
	  "CH cutIPv6": {
		"scope": "tinybird,sql",
		"prefix": [
		  "cutIPv6"
		],
		"body": [
		  "cutIPv6(${0:x}, ${1:bytesToCutForIPv6}, ${2:bytesToCutForIPv4})"
		],
		"description": "**cutIPv6(x, bytesToCutForIPv6, bytesToCutForIPv4)** \n\nAccepts a FixedString(16) value containing the IPv6 address in binary format. Returns a string containing the address of the specified number of bytes removed in text format. For example: [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/ip-address-functions/#cutipv6x)"
	  },
	  "CH IPv4CIDRToRange": {
		"scope": "tinybird,sql",
		"prefix": [
		  "IPv4CIDRToRange"
		],
		"body": [
		  "IPv4CIDRToRange(${0:ipv4}, ${1:Cidr})"
		],
		"description": "**IPv4CIDRToRange(ipv4, Cidr)** \n\nAccepts an IPv4 and an UInt8 value containing the [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing). Return a tuple with two IPv4 containing the lower range and the higher range of the subnet. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/ip-address-functions/#ipv4cidrtorangeipv4)"
	  },
	  "CH IPv6CIDRToRange": {
		"scope": "tinybird,sql",
		"prefix": [
		  "IPv6CIDRToRange"
		],
		"body": [
		  "IPv6CIDRToRange(${0:ipv6}, ${1:Cidr})"
		],
		"description": "**IPv6CIDRToRange(ipv6, Cidr)** \n\nAccepts an IPv6 and an UInt8 value containing the CIDR. Return a tuple with two IPv6 containing the lower range and the higher range of the subnet. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/ip-address-functions/#ipv6cidrtorangeipv6)"
	  },
	  "CH toIPv4": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toIPv4"
		],
		"body": [
		  "toIPv4(${0:string})"
		],
		"description": "**toIPv4(string)** \n\nAn alias to \\`IPv4StringToNum\\`. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/ip-address-functions/#toipv4string)"
	  },
	  "CH toIPv4OrDefault": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toIPv4OrDefault"
		],
		"body": [
		  "toIPv4OrDefault(${0:string})"
		],
		"description": "**toIPv4OrDefault(string)** \n\nSame as \\`toIPv4\\`, but if the IPv4 address has an invalid format, it returns 0. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/ip-address-functions/#toipv4ordefaultstring)"
	  },
	  "CH toIPv4OrNull": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toIPv4OrNull"
		],
		"body": [
		  "toIPv4OrNull(${0:string})"
		],
		"description": "**toIPv4OrNull(string)** \n\nSame as \\`toIPv4\\`, but if the IPv4 address has an invalid format, it returns null. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/ip-address-functions/#toipv4ornullstring)"
	  },
	  "CH toIPv6": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toIPv6"
		],
		"body": [
		  "toIPv6(${0:string})"
		],
		"description": "**toIPv6(string)** \n\nConverts a string form of IPv6 address to IPv6 type. If the IPv6 address has an invalid format, returns an empty value. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/ip-address-functions/#toipv6)"
	  },
	  "CH isIPv4String": {
		"scope": "tinybird,sql",
		"prefix": [
		  "isIPv4String"
		],
		"body": [
		  "isIPv4String(${0:string})"
		],
		"description": "**isIPv4String(string)** \n\nDetermines whether the input string is an IPv4 address or not. If \\`string\\` is IPv6 address returns \\`0\\`. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/ip-address-functions/#isipv4string)"
	  },
	  "CH isIPv6String": {
		"scope": "tinybird,sql",
		"prefix": [
		  "isIPv6String"
		],
		"body": [
		  "isIPv6String(${0:string})"
		],
		"description": "**isIPv6String(string)** \n\nDetermines whether the input string is an IPv6 address or not. If \\`string\\` is IPv4 address returns \\`0\\`. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/ip-address-functions/#isipv6string)"
	  },
	  "CH isIPAddressInRange": {
		"scope": "tinybird,sql",
		"prefix": [
		  "isIPAddressInRange"
		],
		"body": [
		  "isIPAddressInRange(${0:address}, ${1:prefix})"
		],
		"description": "**isIPAddressInRange(address, prefix)** \n\nDetermines if an IP address is contained in a network represented in the [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation. Returns \\`1\\` if true, or \\`0\\` otherwise. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/ip-address-functions/#isipaddressinrange)"
	  },
	  "CH splitByChar": {
		"scope": "tinybird,sql",
		"prefix": [
		  "splitByChar"
		],
		"body": [
		  "splitByChar(${0:${1:s}eparator}, ${1:s}[, max_${1:s}ub${1:s}tring${1:s}])"
		],
		"description": "**splitByChar(separator, s[, max_substrings])** \n\nSplits a string into substrings separated by a specified character. It uses a constant string \\`separator\\` which consists of exactly one character. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/splitting-merging-functions/#splitbycharseparator)"
	  },
	  "CH splitByString": {
		"scope": "tinybird,sql",
		"prefix": [
		  "splitByString"
		],
		"body": [
		  "splitByString(${0:${1:s}eparator}, ${1:s}[, max_${1:s}ub${1:s}tring${1:s}])"
		],
		"description": "**splitByString(separator, s[, max_substrings])** \n\nSplits a string into substrings separated by a string. It uses a constant string \\`separator\\` of multiple characters as the separator. If the string \\`separator\\` is empty, it will split the string \\`s\\` into an array of single characters. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/splitting-merging-functions/#splitbystringseparator)"
	  },
	  "CH splitByRegexp": {
		"scope": "tinybird,sql",
		"prefix": [
		  "splitByRegexp"
		],
		"body": [
		  "splitByRegexp(${0:regexp}, ${1:s}[, max_${1:s}ub${1:s}tring${1:s}])"
		],
		"description": "**splitByRegexp(regexp, s[, max_substrings])** \n\nSplits a string into substrings separated by a regular expression. It uses a regular expression string \\`regexp\\` as the separator. If the \\`regexp\\` is empty, it will split the string \\`s\\` into an array of single characters. If no match is found for this regular expression, the string \\`s\\` won't be split. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/splitting-merging-functions/#splitbyregexpregexp)"
	  },
	  "CH splitByWhitespace": {
		"scope": "tinybird,sql",
		"prefix": [
		  "splitByWhitespace"
		],
		"body": [
		  "splitByWhitespace(${0:s}[, max_${0:s}ub${0:s}tring${0:s}])"
		],
		"description": "**splitByWhitespace(s[, max_substrings])** \n\nSplits a string into substrings separated by whitespace characters. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/splitting-merging-functions/#splitbywhitespaces[)"
	  },
	  "CH splitByNonAlpha": {
		"scope": "tinybird,sql",
		"prefix": [
		  "splitByNonAlpha"
		],
		"body": [
		  "splitByNonAlpha(${0:s}[, max_${0:s}ub${0:s}tring${0:s}])"
		],
		"description": "**splitByNonAlpha(s[, max_substrings])** \n\nSplits a string into substrings separated by whitespace and punctuation characters. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/splitting-merging-functions/#splitbynonalphas[)"
	  },
	  "CH arrayStringConcat": {
		"scope": "tinybird,sql",
		"prefix": [
		  "arrayStringConcat"
		],
		"body": [
		  "arrayStringConcat(${0:arr}[, ${1:separator}])"
		],
		"description": "**arrayStringConcat(arr[, separator])** \n\nConcatenates string representations of values listed in the array with the separator. \\`separator\\` is an optional parameter: a constant string, set to an empty string by default. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/splitting-merging-functions/#arraystringconcatarr[)"
	  },
	  "CH alphaTokens": {
		"scope": "tinybird,sql",
		"prefix": [
		  "alphaTokens"
		],
		"body": [
		  "alphaTokens(${0:s}[, max_${0:s}ub${0:s}tring${0:s}])"
		],
		"description": "**alphaTokens(s[, max_substrings])** \n\nSelects substrings of consecutive bytes from the ranges a-z and A-Z.Returns an array of substrings. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/splitting-merging-functions/#alphatokenss[)"
	  },
	  "CH extractAllGroups": {
		"scope": "tinybird,sql",
		"prefix": [
		  "extractAllGroups"
		],
		"body": [
		  "extractAllGroups(${0:text}, ${1:regexp})"
		],
		"description": "**extractAllGroups(text, regexp)** \n\nExtracts all groups from non-overlapping substrings matched by a regular expression. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/splitting-merging-functions/#extractallgroupstext)"
	  },
	  "CH ngrams": {
		"scope": "tinybird,sql",
		"prefix": [
		  "ngrams"
		],
		"body": [
		  "ngrams(${0:string}, ${1:ngramsize})"
		],
		"description": "**ngrams(string, ngramsize)** \n\nSplits the UTF-8 string into n-grams of \\`ngramsize\\` symbols. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/splitting-merging-functions/#ngrams)"
	  },
	  "CH tuple": {
		"scope": "tinybird,sql",
		"prefix": [
		  "tuple"
		],
		"body": [
		  "tuple(${0:x}, ${1:y})"
		],
		"description": "**tuple(x, y)** \n\nA function that allows grouping multiple columns. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/tuple-functions/#tuple)"
	  },
	  "CH tupleElement": {
		"scope": "tinybird,sql",
		"prefix": [
		  "tupleElement"
		],
		"body": [
		  "tupleElement(${0:tuple}, ${1:n})"
		],
		"description": "**tupleElement(tuple, n)** \n\nA function that allows getting a column from a tuple. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/tuple-functions/#tupleelement)"
	  },
	  "CH untuple": {
		"scope": "tinybird,sql",
		"prefix": [
		  "untuple"
		],
		"body": [
		  "untuple(${0:x})"
		],
		"description": "**untuple(x)** \n\nPerforms syntactic substitution of tuple elements in the call location. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/tuple-functions/#untuple)"
	  },
	  "CH tupleHammingDistance": {
		"scope": "tinybird,sql",
		"prefix": [
		  "tupleHammingDistance"
		],
		"body": [
		  "tupleHammingDistance(${0:tuple1}, ${1:tuple2})"
		],
		"description": "**tupleHammingDistance(tuple1, tuple2)** \n\nReturns the [Hamming Distance](https://en.wikipedia.org/wiki/Hamming_distance) between two tuples of the same size. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/tuple-functions/#tuplehammingdistance)"
	  },
	  "CH tupleToNameValuePairs": {
		"scope": "tinybird,sql",
		"prefix": [
		  "tupleToNameValuePairs"
		],
		"body": [
		  "${0:tuple}ToNameValuePairs(${0:tuple})"
		],
		"description": "**tupleToNameValuePairs(tuple)** \n\nTurns a named tuple into an array of (name, value) pairs. For a \\`Tuple(a T, b T, ..., c T)\\` returns \\`Array(Tuple(String, T), ...)\\` [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/tuple-functions/#tupletonamevaluepairs)"
	  },
	  "CH tuplePlus": {
		"scope": "tinybird,sql",
		"prefix": [
		  "tuplePlus"
		],
		"body": [
		  "tuplePlus(${0:tuple1}, ${1:tuple2})"
		],
		"description": "**tuplePlus(tuple1, tuple2)** \n\nCalculates the sum of corresponding values of two tuples of the same size. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/tuple-functions/#tupleplus)"
	  },
	  "CH tupleMinus": {
		"scope": "tinybird,sql",
		"prefix": [
		  "tupleMinus"
		],
		"body": [
		  "tupleMinus(${0:tuple1}, ${1:tuple2})"
		],
		"description": "**tupleMinus(tuple1, tuple2)** \n\nCalculates the subtraction of corresponding values of two tuples of the same size. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/tuple-functions/#tupleminus)"
	  },
	  "CH tupleMultiply": {
		"scope": "tinybird,sql",
		"prefix": [
		  "tupleMultiply"
		],
		"body": [
		  "tupleMultiply(${0:tuple1}, ${1:tuple2})"
		],
		"description": "**tupleMultiply(tuple1, tuple2)** \n\nCalculates the multiplication of corresponding values of two tuples of the same size. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/tuple-functions/#tuplemultiply)"
	  },
	  "CH tupleDivide": {
		"scope": "tinybird,sql",
		"prefix": [
		  "tupleDivide"
		],
		"body": [
		  "tupleDivide(${0:tuple1}, ${1:tuple2})"
		],
		"description": "**tupleDivide(tuple1, tuple2)** \n\nCalculates the division of corresponding values of two tuples of the same size. Note that division by zero will return \\`inf\\`. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/tuple-functions/#tupledivide)"
	  },
	  "CH tupleNegate": {
		"scope": "tinybird,sql",
		"prefix": [
		  "tupleNegate"
		],
		"body": [
		  "${0:tuple}Negate(${0:tuple})"
		],
		"description": "**tupleNegate(tuple)** \n\nCalculates the negation of the tuple values. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/tuple-functions/#tuplenegate)"
	  },
	  "CH tupleMultiplyByNumber": {
		"scope": "tinybird,sql",
		"prefix": [
		  "tupleMultiplyByNumber"
		],
		"body": [
		  "tupleMultiplyByNumber(${0:tuple}, ${1:number})"
		],
		"description": "**tupleMultiplyByNumber(tuple, number)** \n\nReturns a tuple with all values multiplied by a number. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/tuple-functions/#tuplemultiplybynumber)"
	  },
	  "CH tupleDivideByNumber": {
		"scope": "tinybird,sql",
		"prefix": [
		  "tupleDivideByNumber"
		],
		"body": [
		  "tupleDivideByNumber(${0:tuple}, ${1:number})"
		],
		"description": "**tupleDivideByNumber(tuple, number)** \n\nReturns a tuple with all values divided by a number. Note that division by zero will return \\`inf\\`. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/tuple-functions/#tupledividebynumber)"
	  },
	  "CH dotProduct": {
		"scope": "tinybird,sql",
		"prefix": [
		  "dotProduct"
		],
		"body": [
		  "dotProduct(${0:tuple1}, ${1:tuple2})"
		],
		"description": "**dotProduct(tuple1, tuple2)** \n\nCalculates the scalar product of two tuples of the same size. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/tuple-functions/#dotproduct)"
	  },
	  "CH geohashEncode": {
		"scope": "tinybird,sql",
		"prefix": [
		  "geohashEncode"
		],
		"body": [
		  "geohashEncode(${0:x})"
		],
		"description": "**geohashEncode(x)** \n\nEncodes latitude and longitude as a [geohash](https://clickhouse.tech/docs/en/sql-reference/functions/geo/geohash#geohash)-string. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/geo/geohash/#geohashencode)"
	  },
	  "CH geohashDecode": {
		"scope": "tinybird,sql",
		"prefix": [
		  "geohashDecode"
		],
		"body": [
		  "geohashDecode(${0:x})"
		],
		"description": "**geohashDecode(x)** \n\nDecodes any [geohash](https://clickhouse.tech/docs/en/sql-reference/functions/geo/geohash#geohash)-encoded string into longitude and latitude. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/geo/geohash/#geohashdecode)"
	  },
	  "CH geoToS2": {
		"scope": "tinybird,sql",
		"prefix": [
		  "geoToS2"
		],
		"body": [
		  "geoToS2(${0:lon}, ${1:lat})"
		],
		"description": "**geoToS2(lon, lat)** \n\nReturns [S2](https://clickhouse.tech/docs/en/sql-reference/functions/geo/s2#s2index) point index corresponding to the provided coordinates \\`(longitude, latitude)\\`. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/geo/s2/#geotos2)"
	  },
	  "CH s2ToGeo": {
		"scope": "tinybird,sql",
		"prefix": [
		  "s2ToGeo"
		],
		"body": [
		  "s2ToGeo(${0:s2index})"
		],
		"description": "**s2ToGeo(s2index)** \n\nReturns geo coordinates \\`(longitude, latitude)\\` corresponding to the provided [S2](https://clickhouse.tech/docs/en/sql-reference/functions/geo/s2#s2index) point index. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/geo/s2/#s2togeo)"
	  },
	  "CH s2GetNeighbors": {
		"scope": "tinybird,sql",
		"prefix": [
		  "s2GetNeighbors"
		],
		"body": [
		  "s2GetNeighbors(${0:s2index})"
		],
		"description": "**s2GetNeighbors(s2index)** \n\nReturns S2 neighbor indixes corresponding to the provided [S2](https://clickhouse.tech/docs/en/sql-reference/functions/geo/s2#s2index). Each cell in the S2 system is a quadrilateral bounded by four geodesics. So, each cell has 4 neighbors. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/geo/s2/#s2getneighbors)"
	  },
	  "CH s2CellsIntersect": {
		"scope": "tinybird,sql",
		"prefix": [
		  "s2CellsIntersect"
		],
		"body": [
		  "s2CellsIntersect(${0:s2index1}, ${1:s2index2})"
		],
		"description": "**s2CellsIntersect(s2index1, s2index2)** \n\nDetermines if the two provided [S2](https://clickhouse.tech/docs/en/sql-reference/functions/geo/s2#s2index) cells intersect or not. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/geo/s2/#s2cellsintersect)"
	  },
	  "CH s2CapContains": {
		"scope": "tinybird,sql",
		"prefix": [
		  "s2CapContains"
		],
		"body": [
		  "s2CapContains(${0:center}, ${1:degrees}, ${2:point})"
		],
		"description": "**s2CapContains(center, degrees, point)** \n\nDetermines if a cap contains a S2 point. A cap represents a part of the sphere that has been cut off by a plane. It is defined by a point on a sphere and a radius in degrees. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/geo/s2/#s2capcontains)"
	  },
	  "CH s2CapUnion": {
		"scope": "tinybird,sql",
		"prefix": [
		  "s2CapUnion"
		],
		"body": [
		  "s2CapUnion(${0:center1}, ${1:radius1}, ${2:center2}, ${3:radius2})"
		],
		"description": "**s2CapUnion(center1, radius1, center2, radius2)** \n\nDetermines the smallest cap that contains the given two input caps. A cap represents a portion of the sphere that has been cut off by a plane. It is defined by a point on a sphere and a radius in degrees. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/geo/s2/#s2capunion)"
	  },
	  "CH s2RectAdd": {
		"scope": "tinybird,sql",
		"prefix": [
		  "s2RectAdd"
		],
		"body": [
		  "s2RectAdd(${0:s2pointLow}, ${1:s2pointHigh}, ${2:s2Point})"
		],
		"description": "**s2RectAdd(s2pointLow, s2pointHigh, s2Point)** \n\nIncreases the size of the bounding rectangle to include the given S2 point. In the S2 system, a rectangle is represented by a type of S2Region called a \\`S2LatLngRect\\` that represents a rectangle in latitude-longitude space. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/geo/s2/#s2rectadd)"
	  },
	  "CH s2RectContains": {
		"scope": "tinybird,sql",
		"prefix": [
		  "s2RectContains"
		],
		"body": [
		  "s2RectContains(${0:${2:s2Point}Low}, ${1:${2:s2Point}Hi}, ${2:s2Point})"
		],
		"description": "**s2RectContains(s2PointLow, s2PointHi, s2Point)** \n\nDetermines if a given rectangle contains a S2 point. In the S2 system, a rectangle is represented by a type of S2Region called a \\`S2LatLngRect\\` that represents a rectangle in latitude-longitude space. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/geo/s2/#s2rectcontains)"
	  },
	  "CH s2RectUnion": {
		"scope": "tinybird,sql",
		"prefix": [
		  "s2RectUnion"
		],
		"body": [
		  "s2RectUnion(${0:s2Rect1PointLow}, ${1:s2Rect1PointHi}, ${2:s2Rect2PointLow}, ${3:s2Rect2PointHi})"
		],
		"description": "**s2RectUnion(s2Rect1PointLow, s2Rect1PointHi, s2Rect2PointLow, s2Rect2PointHi)** \n\nReturns the smallest rectangle containing the union of this rectangle and the given rectangle. In the S2 system, a rectangle is represented by a type of S2Region called a \\`S2LatLngRect\\` that represents a rectangle in latitude-longitude space. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/geo/s2/#s2rectunion)"
	  },
	  "CH greatCircleDistance": {
		"scope": "tinybird,sql",
		"prefix": [
		  "greatCircleDistance"
		],
		"body": [
		  "greatCircleDistance(${0:x})"
		],
		"description": "**greatCircleDistance(x)** \n\nCalculates the distance between two points on the Earth's surface using [the great-circle formula](https://en.wikipedia.org/wiki/Great-circle_distance). [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/geo/coordinates/#greatcircledistance)"
	  },
	  "CH geoDistance": {
		"scope": "tinybird,sql",
		"prefix": [
		  "geoDistance"
		],
		"body": [
		  "geoDistance(${0:x})"
		],
		"description": "**geoDistance(x)** \n\nSimilar to \\`greatCircleDistance\\` but calculates the distance on WGS-84 ellipsoid instead of sphere. This is more precise approximation of the Earth Geoid. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/geo/coordinates/#geodistance)"
	  },
	  "CH greatCircleAngle": {
		"scope": "tinybird,sql",
		"prefix": [
		  "greatCircleAngle"
		],
		"body": [
		  "greatCircleAngle(${0:x})"
		],
		"description": "**greatCircleAngle(x)** \n\nCalculates the central angle between two points on the Earth's surface using [the great-circle formula](https://en.wikipedia.org/wiki/Great-circle_distance). [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/geo/coordinates/#greatcircleangle)"
	  },
	  "CH pointInEllipses": {
		"scope": "tinybird,sql",
		"prefix": [
		  "pointInEllipses"
		],
		"body": [
		  "pointInEllipses(${0:x})"
		],
		"description": "**pointInEllipses(x)** \n\nChecks whether the point belongs to at least one of the ellipses. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/geo/coordinates/#pointinellipses)"
	  },
	  "CH h3IsValid": {
		"scope": "tinybird,sql",
		"prefix": [
		  "h3IsValid"
		],
		"body": [
		  "h3IsValid(${0:h3index})"
		],
		"description": "**h3IsValid(h3index)** \n\nVerifies whether the number is a valid [H3](https://clickhouse.tech/docs/en/sql-reference/functions/geo/h3#h3index) index. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/geo/h3/#h3isvalid)"
	  },
	  "CH h3GetResolution": {
		"scope": "tinybird,sql",
		"prefix": [
		  "h3GetResolution"
		],
		"body": [
		  "h3GetResolution(${0:index})"
		],
		"description": "**h3GetResolution(index)** \n\nReturns the resolution of the [H3](https://clickhouse.tech/docs/en/sql-reference/functions/geo/h3#h3index) index. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/geo/h3/#h3getresolution)"
	  },
	  "CH h3EdgeAngle": {
		"scope": "tinybird,sql",
		"prefix": [
		  "h3EdgeAngle"
		],
		"body": [
		  "h3EdgeAngle(${0:resolution})"
		],
		"description": "**h3EdgeAngle(resolution)** \n\nCalculates the average length of the [H3](https://clickhouse.tech/docs/en/sql-reference/functions/geo/h3#h3index) hexagon edge in grades. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/geo/h3/#h3edgeangle)"
	  },
	  "CH h3EdgeLengthM": {
		"scope": "tinybird,sql",
		"prefix": [
		  "h3EdgeLengthM"
		],
		"body": [
		  "h3EdgeLengthM(${0:resolution})"
		],
		"description": "**h3EdgeLengthM(resolution)** \n\nCalculates the average length of the [H3](https://clickhouse.tech/docs/en/sql-reference/functions/geo/h3#h3index) hexagon edge in meters. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/geo/h3/#h3edgelengthm)"
	  },
	  "CH h3EdgeLengthKm": {
		"scope": "tinybird,sql",
		"prefix": [
		  "h3EdgeLengthKm"
		],
		"body": [
		  "h3EdgeLengthKm(${0:resolution})"
		],
		"description": "**h3EdgeLengthKm(resolution)** \n\nCalculates the average length of the [H3](https://clickhouse.tech/docs/en/sql-reference/functions/geo/h3#h3index) hexagon edge in kilometers. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/geo/h3/#h3edgelengthkm)"
	  },
	  "CH geoToH3": {
		"scope": "tinybird,sql",
		"prefix": [
		  "geoToH3"
		],
		"body": [
		  "geoToH3(${0:lon}, ${1:lat}, ${2:resolution})"
		],
		"description": "**geoToH3(lon, lat, resolution)** \n\nReturns [H3](https://clickhouse.tech/docs/en/sql-reference/functions/geo/h3#h3index) point index \\`(lon, lat)\\` with specified resolution. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/geo/h3/#geotoh3)"
	  },
	  "CH h3ToGeo": {
		"scope": "tinybird,sql",
		"prefix": [
		  "h3ToGeo"
		],
		"body": [
		  "h3ToGeo(${0:h3Index})"
		],
		"description": "**h3ToGeo(h3Index)** \n\nReturns the centroid longitude and latitude corresponding to the provided [H3](https://clickhouse.tech/docs/en/sql-reference/functions/geo/h3#h3index) index. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/geo/h3/#h3togeo)"
	  },
	  "CH h3ToGeoBoundary": {
		"scope": "tinybird,sql",
		"prefix": [
		  "h3ToGeoBoundary"
		],
		"body": [
		  "h3ToGeoBoundary(${0:h3Index})"
		],
		"description": "**h3ToGeoBoundary(h3Index)** \n\nReturns array of pairs \\`(lon, lat)\\`, which corresponds to the boundary of the provided H3 index. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/geo/h3/#h3togeoboundary)"
	  },
	  "CH h3kRing": {
		"scope": "tinybird,sql",
		"prefix": [
		  "h3kRing"
		],
		"body": [
		  "h3kRing(${0:h3index}, ${1:k})"
		],
		"description": "**h3kRing(h3index, k)** \n\nLists all the [H3](https://clickhouse.tech/docs/en/sql-reference/functions/geo/h3#h3index) hexagons in the raduis of \\`k\\` from the given hexagon in random order. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/geo/h3/#h3kring)"
	  },
	  "CH h3GetBaseCell": {
		"scope": "tinybird,sql",
		"prefix": [
		  "h3GetBaseCell"
		],
		"body": [
		  "h3GetBaseCell(${0:index})"
		],
		"description": "**h3GetBaseCell(index)** \n\nReturns the base cell number of the [H3](https://clickhouse.tech/docs/en/sql-reference/functions/geo/h3#h3index) index. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/geo/h3/#h3getbasecell)"
	  },
	  "CH h3HexAreaM2": {
		"scope": "tinybird,sql",
		"prefix": [
		  "h3HexAreaM2"
		],
		"body": [
		  "h3HexAreaM2(${0:resolution})"
		],
		"description": "**h3HexAreaM2(resolution)** \n\nReturns average hexagon area in square meters at the given resolution. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/geo/h3/#h3hexaream2)"
	  },
	  "CH h3HexAreaKm2": {
		"scope": "tinybird,sql",
		"prefix": [
		  "h3HexAreaKm2"
		],
		"body": [
		  "h3HexAreaKm2(${0:resolution})"
		],
		"description": "**h3HexAreaKm2(resolution)** \n\nReturns average hexagon area in square kilometers at the given resolution. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/geo/h3/#h3hexareakm2)"
	  },
	  "CH h3IndexesAreNeighbors": {
		"scope": "tinybird,sql",
		"prefix": [
		  "h3IndexesAreNeighbors"
		],
		"body": [
		  "h3IndexesAreNeighbors(${0:index1}, ${1:index2})"
		],
		"description": "**h3IndexesAreNeighbors(index1, index2)** \n\nReturns whether or not the provided [H3](https://clickhouse.tech/docs/en/sql-reference/functions/geo/h3#h3index) indexes are neighbors. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/geo/h3/#h3indexesareneighbors)"
	  },
	  "CH h3ToChildren": {
		"scope": "tinybird,sql",
		"prefix": [
		  "h3ToChildren"
		],
		"body": [
		  "h3ToChildren(${0:index}, ${1:resolution})"
		],
		"description": "**h3ToChildren(index, resolution)** \n\nReturns an array of child indexes for the given [H3](https://clickhouse.tech/docs/en/sql-reference/functions/geo/h3#h3index) index. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/geo/h3/#h3tochildren)"
	  },
	  "CH h3ToParent": {
		"scope": "tinybird,sql",
		"prefix": [
		  "h3ToParent"
		],
		"body": [
		  "h3ToParent(${0:index}, ${1:resolution})"
		],
		"description": "**h3ToParent(index, resolution)** \n\nReturns the parent (coarser) index containing the given [H3](https://clickhouse.tech/docs/en/sql-reference/functions/geo/h3#h3index) index. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/geo/h3/#h3toparent)"
	  },
	  "CH h3ToString": {
		"scope": "tinybird,sql",
		"prefix": [
		  "h3ToString"
		],
		"body": [
		  "h3ToString(${0:index})"
		],
		"description": "**h3ToString(index)** \n\nConverts the \\`H3Index\\` representation of the index to the string representation. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/geo/h3/#h3tostring)"
	  },
	  "CH stringToH3": {
		"scope": "tinybird,sql",
		"prefix": [
		  "stringToH3"
		],
		"body": [
		  "stringToH3(${0:index_str})"
		],
		"description": "**stringToH3(index_str)** \n\nConverts the string representation to the \\`H3Index\\` (UInt64) representation. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/geo/h3/#stringtoh3)"
	  },
	  "CH h3IsResClassIII": {
		"scope": "tinybird,sql",
		"prefix": [
		  "h3IsResClassIII"
		],
		"body": [
		  "h3IsResClassIII(${0:index})"
		],
		"description": "**h3IsResClassIII(index)** \n\nReturns whether [H3](https://clickhouse.tech/docs/en/sql-reference/functions/geo/h3#h3index) index has a resolution with Class III orientation. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/geo/h3/#h3isresclassiii)"
	  },
	  "CH h3IsPentagon": {
		"scope": "tinybird,sql",
		"prefix": [
		  "h3IsPentagon"
		],
		"body": [
		  "h3IsPentagon(${0:index})"
		],
		"description": "**h3IsPentagon(index)** \n\nReturns whether this [H3](https://clickhouse.tech/docs/en/sql-reference/functions/geo/h3#h3index) index represents a pentagonal cell. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/geo/h3/#h3ispentagon)"
	  },
	  "CH h3GetFaces": {
		"scope": "tinybird,sql",
		"prefix": [
		  "h3GetFaces"
		],
		"body": [
		  "h3GetFaces(${0:index})"
		],
		"description": "**h3GetFaces(index)** \n\nReturns icosahedron faces intersected by a given [H3](https://clickhouse.tech/docs/en/sql-reference/functions/geo/h3#h3index) index. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/geo/h3/#h3getfaces)"
	  },
	  "CH h3CellAreaM2": {
		"scope": "tinybird,sql",
		"prefix": [
		  "h3CellAreaM2"
		],
		"body": [
		  "h3CellAreaM2(${0:index})"
		],
		"description": "**h3CellAreaM2(index)** \n\nReturns the exact area of a specific cell in square meters corresponding to the given input H3 index. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/geo/h3/#h3cellaream2)"
	  },
	  "CH h3CellAreaRads2": {
		"scope": "tinybird,sql",
		"prefix": [
		  "h3CellAreaRads2"
		],
		"body": [
		  "h3CellAreaRads2(${0:index})"
		],
		"description": "**h3CellAreaRads2(index)** \n\nReturns the exact area of a specific cell in square radians corresponding to the given input H3 index. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/geo/h3/#h3cellarearads2)"
	  },
	  "CH h3ToCenterChild": {
		"scope": "tinybird,sql",
		"prefix": [
		  "h3ToCenterChild"
		],
		"body": [
		  "h3ToCenterChild(${0:index}, ${1:resolution})"
		],
		"description": "**h3ToCenterChild(index, resolution)** \n\nReturns the center child (finer) [H3](https://clickhouse.tech/docs/en/sql-reference/functions/geo/h3#h3index) index contained by given [H3](https://clickhouse.tech/docs/en/sql-reference/functions/geo/h3#h3index) at the given resolution. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/geo/h3/#h3tocenterchild)"
	  },
	  "CH h3ExactEdgeLengthM": {
		"scope": "tinybird,sql",
		"prefix": [
		  "h3ExactEdgeLengthM"
		],
		"body": [
		  "h3ExactEdgeLengthM(${0:index})"
		],
		"description": "**h3ExactEdgeLengthM(index)** \n\nReturns the exact edge length of the unidirectional edge represented by the input h3 index in meters. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/geo/h3/#h3exactedgelengthm)"
	  },
	  "CH h3ExactEdgeLengthKm": {
		"scope": "tinybird,sql",
		"prefix": [
		  "h3ExactEdgeLengthKm"
		],
		"body": [
		  "h3ExactEdgeLengthKm(${0:index})"
		],
		"description": "**h3ExactEdgeLengthKm(index)** \n\nReturns the exact edge length of the unidirectional edge represented by the input h3 index in kilometers. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/geo/h3/#h3exactedgelengthkm)"
	  },
	  "CH h3ExactEdgeLengthRads": {
		"scope": "tinybird,sql",
		"prefix": [
		  "h3ExactEdgeLengthRads"
		],
		"body": [
		  "h3ExactEdgeLengthRads(${0:index})"
		],
		"description": "**h3ExactEdgeLengthRads(index)** \n\nReturns the exact edge length of the unidirectional edge represented by the input h3 index in radians. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/geo/h3/#h3exactedgelengthrads)"
	  },
	  "CH h3NumHexagons": {
		"scope": "tinybird,sql",
		"prefix": [
		  "h3NumHexagons"
		],
		"body": [
		  "h3NumHexagons(${0:resolution})"
		],
		"description": "**h3NumHexagons(resolution)** \n\nReturns the number of unique H3 indices at the given resolution. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/geo/h3/#h3numhexagons)"
	  },
	  "CH h3PointDistM": {
		"scope": "tinybird,sql",
		"prefix": [
		  "h3PointDistM"
		],
		"body": [
		  "h3PointDistM(${0:lat1}, ${1:lon1}, ${2:lat2}, ${3:lon2})"
		],
		"description": "**h3PointDistM(lat1, lon1, lat2, lon2)** \n\nReturns the \"great circle\" or \"haversine\" distance between pairs of GeoCoord points (latitude/longitude) pairs in meters.\n\n\n                            select h3PointDistM(-10.0 ,0.0, 10.0, 0.0) as h3PointDistM;\n                            \n                             [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/geo/h3/#h3pointdistm)"
	  },
	  "CH h3PointDistKm": {
		"scope": "tinybird,sql",
		"prefix": [
		  "h3PointDistKm"
		],
		"body": [
		  "h3PointDistKm(${0:lat1}, ${1:lon1}, ${2:lat2}, ${3:lon2})"
		],
		"description": "**h3PointDistKm(lat1, lon1, lat2, lon2)** \n\nReturns the \"great circle\" or \"haversine\" distance between pairs of GeoCoord points (latitude/longitude) pairs in kilometers.\n\n\n                            select h3PointDistKm(-10.0 ,0.0, 10.0, 0.0) as h3PointDistKm;\n                            \n                             [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/geo/h3/#h3pointdistkm)"
	  },
	  "CH h3PointDistRads": {
		"scope": "tinybird,sql",
		"prefix": [
		  "h3PointDistRads"
		],
		"body": [
		  "h3PointDistRads(${0:lat1}, ${1:lon1}, ${2:lat2}, ${3:lon2})"
		],
		"description": "**h3PointDistRads(lat1, lon1, lat2, lon2)** \n\nReturns the \"great circle\" or \"haversine\" distance between pairs of GeoCoord points (latitude/longitude) pairs in radians.\n\n\n                            select h3PointDistRads(-10.0 ,0.0, 10.0, 0.0) as h3PointDistRads;\n                            \n                             [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/geo/h3/#h3pointdistrads)"
	  },
	  "CH h3GetRes0Indexes": {
		"scope": "tinybird,sql",
		"prefix": [
		  "h3GetRes0Indexes"
		],
		"body": [
		  "h3GetRes0Indexes()"
		],
		"description": "**h3GetRes0Indexes()** \n\nReturns an array of all the resolution 0 H3 indexes.\n\n\n                            select h3GetRes0Indexes as indexes ;\n                            \n                             [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/geo/h3/#h3getres0indexes)"
	  },
	  "CH h3GetPentagonIndexes": {
		"scope": "tinybird,sql",
		"prefix": [
		  "h3GetPentagonIndexes"
		],
		"body": [
		  "h3GetPentagonIndexes(${0:resolution})"
		],
		"description": "**h3GetPentagonIndexes(resolution)** \n\nReturns all the pentagon H3 indexes at the specified resolution. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/geo/h3/#h3getpentagonindexes)"
	  },
	  "CH h3Line": {
		"scope": "tinybird,sql",
		"prefix": [
		  "h3Line"
		],
		"body": [
		  "h3Line(${0:start},${1:end})"
		],
		"description": "**h3Line(start,end)** \n\nReturns the line of indices between the two indices that are provided. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/geo/h3/#h3line)"
	  },
	  "CH h3Distance": {
		"scope": "tinybird,sql",
		"prefix": [
		  "h3Distance"
		],
		"body": [
		  "h3Distance(${0:start},${1:end})"
		],
		"description": "**h3Distance(start,end)** \n\nReturns the distance in grid cells between the two indices that are provided. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/geo/h3/#h3distance)"
	  },
	  "CH h3HexRing": {
		"scope": "tinybird,sql",
		"prefix": [
		  "h3HexRing"
		],
		"body": [
		  "h3HexRing(${0:index}, ${1:k})"
		],
		"description": "**h3HexRing(index, k)** \n\nReturns the indexes of the hexagonal ring centered at the provided origin h3Index and length k. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/geo/h3/#h3hexring)"
	  },
	  "CH h3GetUnidirectionalEdge": {
		"scope": "tinybird,sql",
		"prefix": [
		  "h3GetUnidirectionalEdge"
		],
		"body": [
		  "h3GetUnidirectionalEdge(${0:originIndex}, ${1:destinationIndex})"
		],
		"description": "**h3GetUnidirectionalEdge(originIndex, destinationIndex)** \n\nReturns a unidirectional edge H3 index based on the provided origin and destination and returns 0 on error. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/geo/h3/#h3getunidirectionaledge)"
	  },
	  "CH h3UnidirectionalEdgeisValid": {
		"scope": "tinybird,sql",
		"prefix": [
		  "h3UnidirectionalEdgeisValid"
		],
		"body": [
		  "h3UnidirectionalEdgeisValid(${0:index})"
		],
		"description": "**h3UnidirectionalEdgeisValid(index)** \n\nDetermines if the provided H3Index is a valid unidirectional edge index. Returns 1 if it's a unidirectional edge and 0 otherwise. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/geo/h3/#h3unidirectionaledgeisvalid)"
	  },
	  "CH h3GetOriginIndexFromUnidirectionalEdge": {
		"scope": "tinybird,sql",
		"prefix": [
		  "h3GetOriginIndexFromUnidirectionalEdge"
		],
		"body": [
		  "h3GetOriginIndexFromUnidirectionalEdge(${0:edge})"
		],
		"description": "**h3GetOriginIndexFromUnidirectionalEdge(edge)** \n\nReturns the origin hexagon index from the unidirectional edge H3Index. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/geo/h3/#h3getoriginindexfromunidirectionaledge)"
	  },
	  "CH h3GetDestinationIndexFromUnidirectionalEdge": {
		"scope": "tinybird,sql",
		"prefix": [
		  "h3GetDestinationIndexFromUnidirectionalEdge"
		],
		"body": [
		  "h3GetDestinationIndexFromUnidirectionalEdge(${0:edge})"
		],
		"description": "**h3GetDestinationIndexFromUnidirectionalEdge(edge)** \n\nReturns the destination hexagon index from the unidirectional edge H3Index. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/geo/h3/#h3getdestinationindexfromunidirectionaledge)"
	  },
	  "CH h3GetIndexesFromUnidirectionalEdge": {
		"scope": "tinybird,sql",
		"prefix": [
		  "h3GetIndexesFromUnidirectionalEdge"
		],
		"body": [
		  "h3GetIndexesFromUnidirectionalEdge(${0:edge})"
		],
		"description": "**h3GetIndexesFromUnidirectionalEdge(edge)** \n\nReturns the origin and destination hexagon indexes from the given unidirectional edge H3Index. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/geo/h3/#h3getindexesfromunidirectionaledge)"
	  },
	  "CH h3GetUnidirectionalEdgesFromHexagon": {
		"scope": "tinybird,sql",
		"prefix": [
		  "h3GetUnidirectionalEdgesFromHexagon"
		],
		"body": [
		  "h3GetUnidirectionalEdgesFromHexagon(${0:index})"
		],
		"description": "**h3GetUnidirectionalEdgesFromHexagon(index)** \n\nProvides all of the unidirectional edges from the provided H3Index. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/geo/h3/#h3getunidirectionaledgesfromhexagon)"
	  },
	  "CH replaceOne": {
		"scope": "tinybird,sql",
		"prefix": [
		  "replaceOne"
		],
		"body": [
		  "replaceOne(${0:haystack}, ${1:pattern}, ${2:replacement})"
		],
		"description": "**replaceOne(haystack, pattern, replacement)** \n\nReplaces the first occurrence of the substring 'pattern' (if it exists) in 'haystack' by the 'replacement' string. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-replace-functions/#replaceonehaystack)"
	  },
	  "CH replaceAll": {
		"scope": "tinybird,sql",
		"prefix": [
		  "replaceAll"
		],
		"body": [
		  "replaceAll(${0:haystack}, ${1:pattern}, ${2:replacement})"
		],
		"description": "**replaceAll(haystack, pattern, replacement)** \n\nReplaces all occurrences of the substring 'pattern' in 'haystack' by the 'replacement' string. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-replace-functions/#replaceallhaystack)"
	  },
	  "CH replaceRegexpOne": {
		"scope": "tinybird,sql",
		"prefix": [
		  "replaceRegexpOne"
		],
		"body": [
		  "replaceRegexpOne(${0:haystack}, ${1:pattern}, ${2:replacement})"
		],
		"description": "**replaceRegexpOne(haystack, pattern, replacement)** \n\nReplaces the first occurrence of the substring matching the regular expression 'pattern' in 'haystack' by the 'replacement' string. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-replace-functions/#replaceregexponehaystack)"
	  },
	  "CH replaceRegexpAll": {
		"scope": "tinybird,sql",
		"prefix": [
		  "replaceRegexpAll"
		],
		"body": [
		  "replaceRegexpAll(${0:haystack}, ${1:pattern}, ${2:replacement})"
		],
		"description": "**replaceRegexpAll(haystack, pattern, replacement)** \n\nLike 'replaceRegexpOne', but replaces all occurrences of the pattern. Example: [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-replace-functions/#replaceregexpallhaystack)"
	  },
	  "CH regexpQuoteMeta": {
		"scope": "tinybird,sql",
		"prefix": [
		  "regexpQuoteMeta"
		],
		"body": [
		  "regexpQuoteMeta(${0:s})"
		],
		"description": "**regexpQuoteMeta(s)** \n\nThe function adds a backslash before some predefined characters in the string. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-replace-functions/#regexpquotemetas)"
	  },
	  "CH translate": {
		"scope": "tinybird,sql",
		"prefix": [
		  "translate"
		],
		"body": [
		  "translate(${0:s}, ${1:from}, ${2:to})"
		],
		"description": "**translate(s, from, to)** \n\nThe function replaces characters in the string 's' in accordance with one-to-one character mapping defined by 'from' and 'to' strings. 'from' and 'to' must be constant ASCII strings of the same size. Non-ASCII characters in the original string are not modified. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-replace-functions/#translates)"
	  },
	  "CH hostName": {
		"scope": "tinybird,sql",
		"prefix": [
		  "hostName"
		],
		"body": [
		  "hostName()"
		],
		"description": "**hostName()** \n\nReturns a string with the name of the host that this function was performed on. For distributed processing, this is the name of the remote server host, if the function is performed on a remote server. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#hostname)"
	  },
	  "CH getMacro": {
		"scope": "tinybird,sql",
		"prefix": [
		  "getMacro"
		],
		"body": [
		  "getMacro(${0:name})"
		],
		"description": "**getMacro(name)** \n\nGets a named value from the macros section of the server configuration. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#getmacro)"
	  },
	  "CH fqdn": {
		"scope": "tinybird,sql",
		"prefix": [
		  "fqdn"
		],
		"body": [
		  "fqdn()"
		],
		"description": "**fqdn()** \n\nReturns the fully qualified domain name. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#fqdn)"
	  },
	  "CH basename": {
		"scope": "tinybird,sql",
		"prefix": [
		  "basename"
		],
		"body": [
		  "basename( ${0:expr} )"
		],
		"description": "**basename( expr )** \n\nExtracts the trailing part of a string after the last slash or backslash. This function if often used to extract the filename from a path. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#basename)"
	  },
	  "CH \\visibleWidth": {
		"scope": "tinybird,sql",
		"prefix": [
		  "\\visibleWidth"
		],
		"body": [
		  "\\visibleWidth(${0:NULL})\\"
		],
		"description": "**\\visibleWidth(NULL)\\** \n\nCalculates the approximate width when outputting values to the console in text format (tab-separated). [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#visiblewidthx)"
	  },
	  "CH toTypeName": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toTypeName"
		],
		"body": [
		  "toTypeName(${0:x})"
		],
		"description": "**toTypeName(x)** \n\nReturns a string containing the type name of the passed argument. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#totypenamex)"
	  },
	  "CH blockSize": {
		"scope": "tinybird,sql",
		"prefix": [
		  "blockSize"
		],
		"body": [
		  "blockSize()"
		],
		"description": "**blockSize()** \n\nGets the size of the block. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#blocksize)"
	  },
	  "CH byteSize": {
		"scope": "tinybird,sql",
		"prefix": [
		  "byteSize"
		],
		"body": [
		  "byteSize(${0:argument} [, ...])"
		],
		"description": "**byteSize(argument [, ...])** \n\nReturns estimation of uncompressed byte size of its arguments in memory. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#bytesize)"
	  },
	  "CH materialize": {
		"scope": "tinybird,sql",
		"prefix": [
		  "materialize"
		],
		"body": [
		  "materialize(${0:x})"
		],
		"description": "**materialize(x)** \n\nTurns a constant into a full column containing just one value. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#materializex)"
	  },
	  "CH ignore": {
		"scope": "tinybird,sql",
		"prefix": [
		  "ignore"
		],
		"body": [
		  "ignore()"
		],
		"description": "**ignore()** \n\nAccepts any arguments, including \\`NULL\\`. Always returns 0. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#ignore)"
	  },
	  "CH sleep": {
		"scope": "tinybird,sql",
		"prefix": [
		  "sleep"
		],
		"body": [
		  "sleep(${0:seconds})"
		],
		"description": "**sleep(seconds)** \n\nSleeps 'seconds' seconds on each data block. You can specify an integer or a floating-point number. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#sleepseconds)"
	  },
	  "CH sleepEachRow": {
		"scope": "tinybird,sql",
		"prefix": [
		  "sleepEachRow"
		],
		"body": [
		  "sleepEachRow(${0:seconds})"
		],
		"description": "**sleepEachRow(seconds)** \n\nSleeps 'seconds' seconds on each row. You can specify an integer or a floating-point number. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#sleepeachrowseconds)"
	  },
	  "CH currentDatabase": {
		"scope": "tinybird,sql",
		"prefix": [
		  "currentDatabase"
		],
		"body": [
		  "currentDatabase()"
		],
		"description": "**currentDatabase()** \n\nReturns the name of the current database. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#currentdatabase)"
	  },
	  "CH currentUser": {
		"scope": "tinybird,sql",
		"prefix": [
		  "currentUser"
		],
		"body": [
		  "currentUser()"
		],
		"description": "**currentUser()** \n\nReturns the login of current user. Login of user, that initiated query, will be returned in case distibuted query. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#currentuser)"
	  },
	  "CH \\isConstant": {
		"scope": "tinybird,sql",
		"prefix": [
		  "\\isConstant"
		],
		"body": [
		  "\\isConstant(${0:plus(x}, ${1:1}))\\"
		],
		"description": "**\\isConstant(plus(x, 1))\\** \n\nChecks whether the argument is a constant expression. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#isconstant)"
	  },
	  "CH isFinite": {
		"scope": "tinybird,sql",
		"prefix": [
		  "isFinite"
		],
		"body": [
		  "isFinite(${0:x})"
		],
		"description": "**isFinite(x)** \n\nAccepts Float32 and Float64 and returns UInt8 equal to 1 if the argument is not infinite and not a NaN, otherwise 0. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#isfinitex)"
	  },
	  "CH isInfinite": {
		"scope": "tinybird,sql",
		"prefix": [
		  "isInfinite"
		],
		"body": [
		  "isInfinite(${0:x})"
		],
		"description": "**isInfinite(x)** \n\nAccepts Float32 and Float64 and returns UInt8 equal to 1 if the argument is infinite, otherwise 0. Note that 0 is returned for a NaN. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#isinfinitex)"
	  },
	  "CH ifNotFinite": {
		"scope": "tinybird,sql",
		"prefix": [
		  "ifNotFinite"
		],
		"body": [
		  "ifNotFinite(${0:x},${1:y})"
		],
		"description": "**ifNotFinite(x,y)** \n\nChecks whether floating point value is finite. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#ifnotfinite)"
	  },
	  "CH isNaN": {
		"scope": "tinybird,sql",
		"prefix": [
		  "isNaN"
		],
		"body": [
		  "isNaN(${0:x})"
		],
		"description": "**isNaN(x)** \n\nAccepts Float32 and Float64 and returns UInt8 equal to 1 if the argument is a NaN, otherwise 0. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#isnanx)"
	  },
	  "CH hasColumnInTable": {
		"scope": "tinybird,sql",
		"prefix": [
		  "hasColumnInTable"
		],
		"body": [
		  "hasColumnInTable([${0:'hostname'}[, ${1:'username'}[, ${2:'password'}]],] ${3:'database'}, ${4:'table'}, ${5:'column'})"
		],
		"description": "**hasColumnInTable(['hostname'[, 'username'[, 'password']],] 'database', 'table', 'column')** \n\nAccepts constant strings: database name, table name, and column name. Returns a UInt8 constant expression equal to 1 if there is a column, otherwise 0. If the hostname parameter is set, the test will run on a remote server. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#hascolumnintable['hostname'[)"
	  },
	  "CH formatReadableDecimalSize": {
		"scope": "tinybird,sql",
		"prefix": [
		  "formatReadableDecimalSize"
		],
		"body": [
		  "formatReadableDecimalSize(${0:filesize_bytes}) AS filesize"
		],
		"description": "**formatReadableDecimalSize(filesize_bytes) AS filesize** \n\nAccepts the size (number of bytes). Returns a rounded size with a suffix (KB, MB, etc.) as a string. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#formatreadabledecimalsizex)"
	  },
	  "CH formatReadableSize": {
		"scope": "tinybird,sql",
		"prefix": [
		  "formatReadableSize"
		],
		"body": [
		  "formatReadableSize(${0:filesize_bytes}) AS filesize"
		],
		"description": "**formatReadableSize(filesize_bytes) AS filesize** \n\nAccepts the size (number of bytes). Returns a rounded size with a suffix (KiB, MiB, etc.) as a string. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#formatreadablesizex)"
	  },
	  "CH formatReadableQuantity": {
		"scope": "tinybird,sql",
		"prefix": [
		  "formatReadableQuantity"
		],
		"body": [
		  "formatReadableQuantity(${0:number}) AS ${0:number}_for_humans"
		],
		"description": "**formatReadableQuantity(number) AS number_for_humans** \n\nAccepts the number. Returns a rounded number with a suffix (thousand, million, billion, etc.) as a string. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#formatreadablequantityx)"
	  },
	  "CH formatReadableTimeDelta": {
		"scope": "tinybird,sql",
		"prefix": [
		  "formatReadableTimeDelta"
		],
		"body": [
		  "formatReadableTimeDelta(${0:column}[, ${1:maximum_unit}])"
		],
		"description": "**formatReadableTimeDelta(column[, maximum_unit])** \n\nAccepts the time delta in seconds. Returns a time delta with (year, month, day, hour, minute, second) as a string. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#formatreadabletimedelta)"
	  },
	  "CH parseTimeDelta": {
		"scope": "tinybird,sql",
		"prefix": [
		  "parseTimeDelta"
		],
		"body": [
		  "parseTimeDelta(${0:timestr})"
		],
		"description": "**parseTimeDelta(timestr)** \n\nParse a sequence of numbers followed by something resembling a time unit. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#parsetimedelta)"
	  },
	  "CH least": {
		"scope": "tinybird,sql",
		"prefix": [
		  "least"
		],
		"body": [
		  "least(${0:a}, ${1:b})"
		],
		"description": "**least(a, b)** \n\nReturns the smallest value from a and b. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#leasta)"
	  },
	  "CH greatest": {
		"scope": "tinybird,sql",
		"prefix": [
		  "greatest"
		],
		"body": [
		  "greatest(${0:a}, ${1:b})"
		],
		"description": "**greatest(a, b)** \n\nReturns the largest value of a and b. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#greatesta)"
	  },
	  "CH uptime": {
		"scope": "tinybird,sql",
		"prefix": [
		  "uptime"
		],
		"body": [
		  "uptime()"
		],
		"description": "**uptime()** \n\nReturns the server's uptime in seconds. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#uptime)"
	  },
	  "CH version": {
		"scope": "tinybird,sql",
		"prefix": [
		  "version"
		],
		"body": [
		  "version()"
		],
		"description": "**version()** \n\nReturns the version of the server as a string. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#version)"
	  },
	  "CH buildId": {
		"scope": "tinybird,sql",
		"prefix": [
		  "buildId"
		],
		"body": [
		  "buildId()"
		],
		"description": "**buildId()** \n\nReturns the build ID generated by a compiler for the running ClickHouse server binary. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#buildid)"
	  },
	  "CH blockNumber": {
		"scope": "tinybird,sql",
		"prefix": [
		  "blockNumber"
		],
		"body": [
		  "blockNumber(${0:x})"
		],
		"description": "**blockNumber(x)** \n\nReturns the sequence number of the data block where the row is located. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#blocknumber)"
	  },
	  "CH rowNumberInBlock": {
		"scope": "tinybird,sql",
		"prefix": [
		  "rowNumberInBlock"
		],
		"body": [
		  "rowNumberInBlock(${0:x})"
		],
		"description": "**rowNumberInBlock(x)** \n\nReturns the ordinal number of the row in the data block. Different data blocks are always recalculated. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#rownumberinblock)"
	  },
	  "CH rowNumberInAllBlocks": {
		"scope": "tinybird,sql",
		"prefix": [
		  "rowNumberInAllBlocks"
		],
		"body": [
		  "rowNumberInAllBlocks()"
		],
		"description": "**rowNumberInAllBlocks()** \n\nReturns the ordinal number of the row in the data block. This function only considers the affected data blocks. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#rownumberinallblocks)"
	  },
	  "CH neighbor": {
		"scope": "tinybird,sql",
		"prefix": [
		  "neighbor"
		],
		"body": [
		  "neighbor(${0:column}, ${1:offset}[, ${2:default_value}])"
		],
		"description": "**neighbor(column, offset[, default_value])** \n\nThe window function that provides access to a row at a specified offset which comes before or after the current row of a given column. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#neighbor)"
	  },
	  "CH runningDifference": {
		"scope": "tinybird,sql",
		"prefix": [
		  "runningDifference"
		],
		"body": [
		  "runningDifference(${0:EventTime}) AS delta"
		],
		"description": "**runningDifference(EventTime) AS delta** \n\nCalculates the difference between successive row values \u200b\u200bin the data block. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#runningdifferencex)"
	  },
	  "CH runningDifferenceStartingWithFirstValue": {
		"scope": "tinybird,sql",
		"prefix": [
		  "runningDifferenceStartingWithFirstValue"
		],
		"body": [
		  "runningDifferenceStartingWithFirstValue(${0:x})"
		],
		"description": "**runningDifferenceStartingWithFirstValue(x)** \n\nSame as for runningDifference, the difference is the value of the first row, returned the value of the first row, and each subsequent row returns the difference from the previous row. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#runningdifferencestartingwithfirstvalue)"
	  },
	  "CH runningConcurrency": {
		"scope": "tinybird,sql",
		"prefix": [
		  "runningConcurrency"
		],
		"body": [
		  "runningConcurrency(${0:start}, ${1:end})"
		],
		"description": "**runningConcurrency(start, end)** \n\nCalculates the number of concurrent events. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#runningconcurrency)"
	  },
	  "CH MACNumToString": {
		"scope": "tinybird,sql",
		"prefix": [
		  "MACNumToString"
		],
		"body": [
		  "MACNumToString(${0:num})"
		],
		"description": "**MACNumToString(num)** \n\nAccepts a UInt64 number. Interprets it as a MAC address in big endian. Returns a string containing the corresponding MAC address in the format AA:BB:CC:DD:EE:FF (colon-separated numbers in hexadecimal form). [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#macnumtostringnum)"
	  },
	  "CH MACStringToNum": {
		"scope": "tinybird,sql",
		"prefix": [
		  "MACStringToNum"
		],
		"body": [
		  "MACStringToNum(${0:s})"
		],
		"description": "**MACStringToNum(s)** \n\nThe inverse function of MACNumToString. If the MAC address has an invalid format, it returns 0. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#macstringtonums)"
	  },
	  "CH MACStringToOUI": {
		"scope": "tinybird,sql",
		"prefix": [
		  "MACStringToOUI"
		],
		"body": [
		  "MACStringToOUI(${0:s})"
		],
		"description": "**MACStringToOUI(s)** \n\nAccepts a MAC address in the format AA:BB:CC:DD:EE:FF (colon-separated numbers in hexadecimal form). Returns the first three octets as a UInt64 number. If the MAC address has an invalid format, it returns 0. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#macstringtoouis)"
	  },
	  "CH getSizeOfEnumType": {
		"scope": "tinybird,sql",
		"prefix": [
		  "getSizeOfEnumType"
		],
		"body": [
		  "getSizeOfEnumType(${0:value})"
		],
		"description": "**getSizeOfEnumType(value)** \n\nReturns the number of fields in Enum. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#getsizeofenumtype)"
	  },
	  "CH blockSerializedSize": {
		"scope": "tinybird,sql",
		"prefix": [
		  "blockSerializedSize"
		],
		"body": [
		  "blockSerializedSize(${0:${1:value}}[, ${0:${1:value}}[, ...]])"
		],
		"description": "**blockSerializedSize(value[, value[, ...]])** \n\nReturns size on disk (without taking into account compression). [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#blockserializedsize)"
	  },
	  "CH toColumnTypeName": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toColumnTypeName"
		],
		"body": [
		  "toColumnTypeName(${0:value})"
		],
		"description": "**toColumnTypeName(value)** \n\nReturns the name of the class that represents the data type of the column in RAM. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#tocolumntypename)"
	  },
	  "CH dumpColumnStructure": {
		"scope": "tinybird,sql",
		"prefix": [
		  "dumpColumnStructure"
		],
		"body": [
		  "dumpColumnStructure(${0:value})"
		],
		"description": "**dumpColumnStructure(value)** \n\nOutputs a detailed description of data structures in RAM [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#dumpcolumnstructure)"
	  },
	  "CH defaultValueOfArgumentType": {
		"scope": "tinybird,sql",
		"prefix": [
		  "defaultValueOfArgumentType"
		],
		"body": [
		  "defaultValueOfArgumentType(${0:expression})"
		],
		"description": "**defaultValueOfArgumentType(expression)** \n\nOutputs the default value for the data type. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#defaultvalueofargumenttype)"
	  },
	  "CH defaultValueOfTypeName": {
		"scope": "tinybird,sql",
		"prefix": [
		  "defaultValueOfTypeName"
		],
		"body": [
		  "defaultValueOfTypeName(${0:type})"
		],
		"description": "**defaultValueOfTypeName(type)** \n\nOutputs the default value for given type name. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#defaultvalueoftypename)"
	  },
	  "CH \\replicate": {
		"scope": "tinybird,sql",
		"prefix": [
		  "\\replicate"
		],
		"body": [
		  "\\replicate(${0:1}, ${1:['a'}, ${2:'b'}, ${3:'c'}])\\"
		],
		"description": "**\\replicate(1, ['a', 'b', 'c'])\\** \n\nCreates an array with a single value. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#replicate)"
	  },
	  "CH filesystemAvailable": {
		"scope": "tinybird,sql",
		"prefix": [
		  "filesystemAvailable"
		],
		"body": [
		  "filesystemAvailable()"
		],
		"description": "**filesystemAvailable()** \n\nReturns amount of remaining space on the filesystem where the files of the databases located. It is always smaller than total free space ([filesystemFree](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions#filesystemfree)) because some space is reserved for OS. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#filesystemavailable)"
	  },
	  "CH filesystemFree": {
		"scope": "tinybird,sql",
		"prefix": [
		  "filesystemFree"
		],
		"body": [
		  "filesystemFree()"
		],
		"description": "**filesystemFree()** \n\nReturns total amount of the free space on the filesystem where the files of the databases located. See also \\`filesystemAvailable\\` [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#filesystemfree)"
	  },
	  "CH filesystemCapacity": {
		"scope": "tinybird,sql",
		"prefix": [
		  "filesystemCapacity"
		],
		"body": [
		  "filesystemCapacity()"
		],
		"description": "**filesystemCapacity()** \n\nReturns the capacity of the filesystem in bytes. For evaluation, the path to the data directory must be configured. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#filesystemcapacity)"
	  },
	  "CH initializeAggregation": {
		"scope": "tinybird,sql",
		"prefix": [
		  "initializeAggregation"
		],
		"body": [
		  "initializeAggregation (${0:aggregate_function}, ${1:arg1}, ${2:arg2}, ..., ${4:argN})"
		],
		"description": "**initializeAggregation (aggregate_function, arg1, arg2, ..., argN)** \n\nCalculates result of aggregate function based on single value. It is intended to use this function to initialize aggregate functions with combinator -State or use initialized aggregates as default values. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#initializeaggregation)"
	  },
	  "CH finalizeAggregation": {
		"scope": "tinybird,sql",
		"prefix": [
		  "finalizeAggregation"
		],
		"body": [
		  "finalizeAggregation(${0:state})"
		],
		"description": "**finalizeAggregation(state)** \n\nTakes state of aggregate function. Returns result of aggregation . [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#finalizeaggregation)"
	  },
	  "CH runningAccumulate": {
		"scope": "tinybird,sql",
		"prefix": [
		  "runningAccumulate"
		],
		"body": [
		  "runningAccumulate(${0:agg_state}[, ${1:grouping}])"
		],
		"description": "**runningAccumulate(agg_state[, grouping])** \n\nAccumulates states of an aggregate function for each row of a data block. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#runningaccumulate)"
	  },
	  "CH joinGet": {
		"scope": "tinybird,sql",
		"prefix": [
		  "joinGet"
		],
		"body": [
		  "joinGet(${0:join_storage_table_name}, ${1:`value_column`}, ${2:join_keys})"
		],
		"description": "**joinGet(join_storage_table_name, \\`value_column\\`, join_keys)** \n\nThe function lets you extract data from the table the same way as from a dictionary. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#joinget)"
	  },
	  "CH catboostEvaluate": {
		"scope": "tinybird,sql",
		"prefix": [
		  "catboostEvaluate"
		],
		"body": [
		  "catboostEvaluate(${0:path_to_model}, ${1:feature_1}, ${2:feature_2}, ${4:feature_n})"
		],
		"description": "**catboostEvaluate(path_to_model, feature_1, feature_2, feature_n)** \n\n:::note [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#catboostevaluatepath_to_model)"
	  },
	  "CH throwIf": {
		"scope": "tinybird,sql",
		"prefix": [
		  "throwIf"
		],
		"body": [
		  "throwIf(${0:x}[, ${1:message}[, ${2:error_code}]])"
		],
		"description": "**throwIf(x[, message[, error_code]])** \n\nThrow an exception if the argument is non zero. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#throwifx[)"
	  },
	  "CH \\identity": {
		"scope": "tinybird,sql",
		"prefix": [
		  "\\identity"
		],
		"body": [
		  "\\identity(${0:42})\\"
		],
		"description": "**\\identity(42)\\** \n\nReturns the same value that was used as its argument. Used for debugging and testing, allows to cancel using index, and get the query performance of a full scan. When query is analyzed for possible use of index, the analyzer does not look inside \\`identity\\` functions. Also constant folding is not applied too. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#identity)"
	  },
	  "CH getSetting": {
		"scope": "tinybird,sql",
		"prefix": [
		  "getSetting"
		],
		"body": [
		  "getSetting(${0:'custom_setting'})"
		],
		"description": "**getSetting('custom_setting')** \n\nReturns the current value of a custom setting. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#getsetting)"
	  },
	  "CH isDecimalOverflow": {
		"scope": "tinybird,sql",
		"prefix": [
		  "isDecimalOverflow"
		],
		"body": [
		  "isDecimalOverflow(${0:d}, ${1:[p}])"
		],
		"description": "**isDecimalOverflow(d, [p])** \n\nChecks whether the Decimal precision. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#isdecimaloverflow)"
	  },
	  "CH countDigits": {
		"scope": "tinybird,sql",
		"prefix": [
		  "countDigits"
		],
		"body": [
		  "countDigits(${0:toDecimal64(1}, ${1:18})), countDigits(toDecimal64(-1, 18)),"
		],
		"description": "**countDigits(toDecimal64(1, 18)), countDigits(toDecimal64(-1, 18)),** \n\nReturns number of decimal digits you need to represent the value. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#countdigits)"
	  },
	  "CH errorCodeToName": {
		"scope": "tinybird,sql",
		"prefix": [
		  "errorCodeToName"
		],
		"body": [
		  "errorCodeToName(${0:1})"
		],
		"description": "**errorCodeToName(1)** \n\n**Returned value** [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#errorcodetoname)"
	  },
	  "CH tcpPort": {
		"scope": "tinybird,sql",
		"prefix": [
		  "tcpPort"
		],
		"body": [
		  "tcpPort()"
		],
		"description": "**tcpPort()** \n\nReturns native interface TCP port number listened by this server. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#tcpport)"
	  },
	  "CH currentProfiles": {
		"scope": "tinybird,sql",
		"prefix": [
		  "currentProfiles"
		],
		"body": [
		  "currentProfiles()"
		],
		"description": "**currentProfiles()** \n\nReturns a list of the current settings profiles for the current user. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#currentprofiles)"
	  },
	  "CH enabledProfiles": {
		"scope": "tinybird,sql",
		"prefix": [
		  "enabledProfiles"
		],
		"body": [
		  "enabledProfiles()"
		],
		"description": "**enabledProfiles()** \n\nReturns settings profiles, assigned to the current user both explicitly and implicitly. Explicitly assigned profiles are the same as returned by the [currentProfiles](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions#current-profiles) function. Implicitly assigned profiles include parent profiles of other assigned profiles, profiles assigned via granted roles, profiles assigned via their own settings, and the main default profile (see the \\`default_profile\\` section in the main server configuration file). [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#enabledprofiles)"
	  },
	  "CH defaultProfiles": {
		"scope": "tinybird,sql",
		"prefix": [
		  "defaultProfiles"
		],
		"body": [
		  "defaultProfiles()"
		],
		"description": "**defaultProfiles()** \n\nReturns all the profiles specified at the current user's definition . [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#defaultprofiles)"
	  },
	  "CH enabledRoles": {
		"scope": "tinybird,sql",
		"prefix": [
		  "enabledRoles"
		],
		"body": [
		  "enabledRoles()"
		],
		"description": "**enabledRoles()** \n\nReturns the names of the current roles and the roles, granted to some of the current roles. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#enabledroles)"
	  },
	  "CH defaultRoles": {
		"scope": "tinybird,sql",
		"prefix": [
		  "defaultRoles"
		],
		"body": [
		  "defaultRoles()"
		],
		"description": "**defaultRoles()** \n\nReturns the names of the roles which are enabled by default for the current user when he logins. Initially these are all roles granted to the current user  statement. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#defaultroles)"
	  },
	  "CH getServerPort": {
		"scope": "tinybird,sql",
		"prefix": [
		  "getServerPort"
		],
		"body": [
		  "getServerPort(${0:port_name})"
		],
		"description": "**getServerPort(port_name)** \n\nReturns the number of the server port. When the port is not used by the server, throws an exception. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#getserverport)"
	  },
	  "CH shardNum": {
		"scope": "tinybird,sql",
		"prefix": [
		  "shardNum"
		],
		"body": [
		  "shardNum()"
		],
		"description": "**shardNum()** \n\nReturns the index of a shard which processes a part of data for a distributed query. Indices are started from \\`1\\`. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#shardnum)"
	  },
	  "CH shardCount": {
		"scope": "tinybird,sql",
		"prefix": [
		  "shardCount"
		],
		"body": [
		  "shardCount()"
		],
		"description": "**shardCount()** \n\nReturns the total number of shards for a distributed query. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#shardcount)"
	  },
	  "CH getOSKernelVersion": {
		"scope": "tinybird,sql",
		"prefix": [
		  "getOSKernelVersion"
		],
		"body": [
		  "getOSKernelVersion()"
		],
		"description": "**getOSKernelVersion()** \n\nReturns a string with the current OS kernel version. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/other-functions/#getoskernelversion)"
	  },
	  "CH visitParamHas": {
		"scope": "tinybird,sql",
		"prefix": [
		  "visitParamHas"
		],
		"body": [
		  "visitParamHas(${0:params}, ${1:name})"
		],
		"description": "**visitParamHas(params, name)** \n\nChecks whether there is a field with the \\`name\\` name. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/json-functions/#visitparamhasparams)"
	  },
	  "CH visitParamExtractUInt": {
		"scope": "tinybird,sql",
		"prefix": [
		  "visitParamExtractUInt"
		],
		"body": [
		  "visitParamExtractUInt(${0:params}, ${1:name})"
		],
		"description": "**visitParamExtractUInt(params, name)** \n\nParses UInt64 from the value of the field named \\`name\\`. If this is a string field, it tries to parse a number from the beginning of the string. If the field does not exist, or it exists but does not contain a number, it returns 0. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/json-functions/#visitparamextractuintparams)"
	  },
	  "CH visitParamExtractInt": {
		"scope": "tinybird,sql",
		"prefix": [
		  "visitParamExtractInt"
		],
		"body": [
		  "visitParamExtractInt(${0:params}, ${1:name})"
		],
		"description": "**visitParamExtractInt(params, name)** \n\nThe same as for Int64. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/json-functions/#visitparamextractintparams)"
	  },
	  "CH visitParamExtractFloat": {
		"scope": "tinybird,sql",
		"prefix": [
		  "visitParamExtractFloat"
		],
		"body": [
		  "visitParamExtractFloat(${0:params}, ${1:name})"
		],
		"description": "**visitParamExtractFloat(params, name)** \n\nThe same as for Float64. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/json-functions/#visitparamextractfloatparams)"
	  },
	  "CH visitParamExtractBool": {
		"scope": "tinybird,sql",
		"prefix": [
		  "visitParamExtractBool"
		],
		"body": [
		  "visitParamExtractBool(${0:params}, ${1:name})"
		],
		"description": "**visitParamExtractBool(params, name)** \n\nParses a true/false value. The result is UInt8. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/json-functions/#visitparamextractboolparams)"
	  },
	  "CH visitParamExtractRaw": {
		"scope": "tinybird,sql",
		"prefix": [
		  "visitParamExtractRaw"
		],
		"body": [
		  "visitParamExtractRaw(${0:params}, ${1:name})"
		],
		"description": "**visitParamExtractRaw(params, name)** \n\nReturns the value of a field, including separators. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/json-functions/#visitparamextractrawparams)"
	  },
	  "CH visitParamExtractString": {
		"scope": "tinybird,sql",
		"prefix": [
		  "visitParamExtractString"
		],
		"body": [
		  "visitParamExtractString(${0:params}, ${1:name})"
		],
		"description": "**visitParamExtractString(params, name)** \n\nParses the string in double quotes. The value is unescaped. If unescaping failed, it returns an empty string. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/json-functions/#visitparamextractstringparams)"
	  },
	  "CH isValidJSON": {
		"scope": "tinybird,sql",
		"prefix": [
		  "isValidJSON"
		],
		"body": [
		  "isValidJSON(${0:json})"
		],
		"description": "**isValidJSON(json)** \n\nChecks that passed string is a valid json. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/json-functions/#isvalidjsonjson)"
	  },
	  "CH JSONHas": {
		"scope": "tinybird,sql",
		"prefix": [
		  "JSONHas"
		],
		"body": [
		  "JSONHas(${0:json}[, ${1:indices_or_keys]})"
		],
		"description": "**JSONHas(json[, indices_or_keys])** \n\nIf the value exists in the JSON document, \\`1\\` will be returned. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/json-functions/#jsonhasjson[)"
	  },
	  "CH JSONLength": {
		"scope": "tinybird,sql",
		"prefix": [
		  "JSONLength"
		],
		"body": [
		  "JSONLength(${0:json}[, ${1:indices_or_keys]})"
		],
		"description": "**JSONLength(json[, indices_or_keys])** \n\nReturn the length of a JSON array or a JSON object. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/json-functions/#jsonlengthjson[)"
	  },
	  "CH JSONType": {
		"scope": "tinybird,sql",
		"prefix": [
		  "JSONType"
		],
		"body": [
		  "JSONType(${0:json}[, ${1:indices_or_keys]})"
		],
		"description": "**JSONType(json[, indices_or_keys])** \n\nReturn the type of a JSON value. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/json-functions/#jsontypejson[)"
	  },
	  "CH JSONExtractUInt": {
		"scope": "tinybird,sql",
		"prefix": [
		  "JSONExtractUInt"
		],
		"body": [
		  "JSONExtractUInt(${0:json}[, ${1:indices_or_keys]})"
		],
		"description": "**JSONExtractUInt(json[, indices_or_keys])**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/json-functions/#jsonextractuintjson[)"
	  },
	  "CH JSONExtractInt": {
		"scope": "tinybird,sql",
		"prefix": [
		  "JSONExtractInt"
		],
		"body": [
		  "JSONExtractInt(${0:json}[, ${1:indices_or_keys]})"
		],
		"description": "**JSONExtractInt(json[, indices_or_keys])**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/json-functions/#jsonextractintjson[)"
	  },
	  "CH JSONExtractFloat": {
		"scope": "tinybird,sql",
		"prefix": [
		  "JSONExtractFloat"
		],
		"body": [
		  "JSONExtractFloat(${0:json}[, ${1:indices_or_keys]})"
		],
		"description": "**JSONExtractFloat(json[, indices_or_keys])**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/json-functions/#jsonextractfloatjson[)"
	  },
	  "CH JSONExtractBool": {
		"scope": "tinybird,sql",
		"prefix": [
		  "JSONExtractBool"
		],
		"body": [
		  "JSONExtractBool(${0:json}[, ${1:indices_or_keys]})"
		],
		"description": "**JSONExtractBool(json[, indices_or_keys])** \n\nParses a JSON and extract a value. These functions are similar to \\`visitParam\\` functions. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/json-functions/#jsonextractbooljson[)"
	  },
	  "CH JSONExtractString": {
		"scope": "tinybird,sql",
		"prefix": [
		  "JSONExtractString"
		],
		"body": [
		  "JSONExtractString(${0:json}[, ${1:indices_or_keys]})"
		],
		"description": "**JSONExtractString(json[, indices_or_keys])** \n\nParses a JSON and extract a string. This function is similar to \\`visitParamExtractString\\` functions. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/json-functions/#jsonextractstringjson[)"
	  },
	  "CH JSONExtract": {
		"scope": "tinybird,sql",
		"prefix": [
		  "JSONExtract"
		],
		"body": [
		  "JSONExtract(${0:json}[, ${1:indices_or_keys}], ${2:Return_type})"
		],
		"description": "**JSONExtract(json[, indices_or_keys], Return_type)** \n\nParses a JSON and extract a value of the given ClickHouse data type. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/json-functions/#jsonextractjson[)"
	  },
	  "CH JSONExtractKeysAndValues": {
		"scope": "tinybird,sql",
		"prefix": [
		  "JSONExtractKeysAndValues"
		],
		"body": [
		  "JSONExtractKeysAndValues(${0:json}[, ${1:indices_or_keys}], ${2:Value_type})"
		],
		"description": "**JSONExtractKeysAndValues(json[, indices_or_keys], Value_type)** \n\nParses key-value pairs from a JSON where the values are of the given ClickHouse data type. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/json-functions/#jsonextractkeysandvaluesjson[)"
	  },
	  "CH JSONExtractKeys": {
		"scope": "tinybird,sql",
		"prefix": [
		  "JSONExtractKeys"
		],
		"body": [
		  "JSONExtractKeys(${0:json}[, ${1:a}, ${2:b}, ${3:c}...])"
		],
		"description": "**JSONExtractKeys(json[, a, b, c...])** \n\nParses a JSON string and extracts the keys. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/json-functions/#jsonextractkeys)"
	  },
	  "CH JSONExtractRaw": {
		"scope": "tinybird,sql",
		"prefix": [
		  "JSONExtractRaw"
		],
		"body": [
		  "JSONExtractRaw(${0:json}[, ${1:indices_or_keys]})"
		],
		"description": "**JSONExtractRaw(json[, indices_or_keys])** \n\nReturns a part of JSON as unparsed string. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/json-functions/#jsonextractrawjson[)"
	  },
	  "CH JSONExtractArrayRaw": {
		"scope": "tinybird,sql",
		"prefix": [
		  "JSONExtractArrayRaw"
		],
		"body": [
		  "JSONExtractArrayRaw(${0:json}[, ${1:indices_or_keys}])"
		],
		"description": "**JSONExtractArrayRaw(json[, indices_or_keys])** \n\nReturns an array with elements of JSON array, each represented as unparsed string. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/json-functions/#jsonextractarrayrawjson[)"
	  },
	  "CH JSONExtractKeysAndValuesRaw": {
		"scope": "tinybird,sql",
		"prefix": [
		  "JSONExtractKeysAndValuesRaw"
		],
		"body": [
		  "JSONExtractKeysAndValuesRaw(${0:json}[, ${1:p}, ${2:a}, ${3:t}, ${4:h}])"
		],
		"description": "**JSONExtractKeysAndValuesRaw(json[, p, a, t, h])** \n\nExtracts raw data from a JSON object. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/json-functions/#jsonextractkeysandvaluesraw)"
	  },
	  "CH JSON_EXISTS": {
		"scope": "tinybird,sql",
		"prefix": [
		  "JSON_EXISTS"
		],
		"body": [
		  "JSON_EXISTS(${0:json}, ${1:path})"
		],
		"description": "**JSON_EXISTS(json, path)** \n\nIf the value exists in the JSON document, \\`1\\` will be returned. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/json-functions/#json_existsjson)"
	  },
	  "CH JSON_QUERY": {
		"scope": "tinybird,sql",
		"prefix": [
		  "JSON_QUERY"
		],
		"body": [
		  "JSON_QUERY(${0:json}, ${1:path})"
		],
		"description": "**JSON_QUERY(json, path)** \n\nParses a JSON and extract a value as JSON array or JSON object. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/json-functions/#json_queryjson)"
	  },
	  "CH JSON_VALUE": {
		"scope": "tinybird,sql",
		"prefix": [
		  "JSON_VALUE"
		],
		"body": [
		  "JSON_VALUE(${0:json}, ${1:path})"
		],
		"description": "**JSON_VALUE(json, path)** \n\nParses a JSON and extract a value as JSON scalar. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/json-functions/#json_valuejson)"
	  },
	  "CH toJSONString": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toJSONString"
		],
		"body": [
		  "toJSONString(${0:value})"
		],
		"description": "**toJSONString(value)** \n\nSerializes a value to its JSON representation. Various data types and nested structures are supported. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/json-functions/#tojsonstring)"
	  },
	  "CH char": {
		"scope": "tinybird,sql",
		"prefix": [
		  "char"
		],
		"body": [
		  "char(${0:number_1}, ${1:[number_2}, ..., ${3:number_n}])"
		],
		"description": "**char(number_1, [number_2, ..., number_n])** \n\nReturns the string with the length as the number of passed arguments and each byte has the value of corresponding argument. Accepts multiple arguments of numeric types. If the value of argument is out of range of UInt8 data type, it is converted to UInt8 with possible rounding and overflow. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/encoding-functions/#char)"
	  },
	  "CH hex": {
		"scope": "tinybird,sql",
		"prefix": [
		  "hex"
		],
		"body": [
		  "hex(${0:arg})"
		],
		"description": "**hex(arg)** \n\nReturns a string containing the argument's hexadecimal representation. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/encoding-functions/#hex)"
	  },
	  "CH unhex": {
		"scope": "tinybird,sql",
		"prefix": [
		  "unhex"
		],
		"body": [
		  "unhex(${0:arg})"
		],
		"description": "**unhex(arg)** \n\nPerforms the opposite operation of [hex](https://clickhouse.tech/docs/en/sql-reference/functions/encoding-functions#hex). It interprets each pair of hexadecimal digits (in the argument) as a number and converts it to the byte represented by the number. The return value is a binary string (BLOB). [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/encoding-functions/#unhex)"
	  },
	  "CH bin": {
		"scope": "tinybird,sql",
		"prefix": [
		  "bin"
		],
		"body": [
		  "bin(${0:arg})"
		],
		"description": "**bin(arg)** \n\nReturns a string containing the argument's binary representation. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/encoding-functions/#bin)"
	  },
	  "CH unbin": {
		"scope": "tinybird,sql",
		"prefix": [
		  "unbin"
		],
		"body": [
		  "unbin(${0:arg})"
		],
		"description": "**unbin(arg)** \n\nInterprets each pair of binary digits (in the argument) as a number and converts it to the byte represented by the number. The functions performs the opposite operation to [bin](https://clickhouse.tech/docs/en/sql-reference/functions/encoding-functions#bin). [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/encoding-functions/#unbin)"
	  },
	  "CH bitmaskToList": {
		"scope": "tinybird,sql",
		"prefix": [
		  "bitmaskToList"
		],
		"body": [
		  "bitmaskToList(${0:num})"
		],
		"description": "**bitmaskToList(num)** \n\nAccepts an integer. Returns a string containing the list of powers of two that total the source number when summed. They are comma-separated without spaces in text format, in ascending order. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/encoding-functions/#bitmasktolistnum)"
	  },
	  "CH bitmaskToArray": {
		"scope": "tinybird,sql",
		"prefix": [
		  "bitmaskToArray"
		],
		"body": [
		  "bitmaskToArray(${0:num})"
		],
		"description": "**bitmaskToArray(num)** \n\nAccepts an integer. Returns an array of UInt64 numbers containing the list of powers of two that total the source number when summed. Numbers in the array are in ascending order. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/encoding-functions/#bitmasktoarraynum)"
	  },
	  "CH generateULID": {
		"scope": "tinybird,sql",
		"prefix": [
		  "generateULID"
		],
		"body": [
		  "generateULID([${0:x}])"
		],
		"description": "**generateULID([x])** \n\nGenerates the [ULID](https://github.com/ulid/spec). [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/ulid-functions/#generateulid)"
	  },
	  "CH map": {
		"scope": "tinybird,sql",
		"prefix": [
		  "map"
		],
		"body": [
		  "map(${0:key1}, ${1:value1}[, ${2:key2}, ${3:value2}, ...])"
		],
		"description": "**map(key1, value1[, key2, value2, ...])** \n\nArranges \\`key:value\\` pairs into Map data type. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/tuple-map-functions/#map)"
	  },
	  "CH mapAdd": {
		"scope": "tinybird,sql",
		"prefix": [
		  "mapAdd"
		],
		"body": [
		  "mapAdd(${0:arg1}, ${1:arg2} [, ...])"
		],
		"description": "**mapAdd(arg1, arg2 [, ...])** \n\nCollect all the keys and sum corresponding values. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/tuple-map-functions/#mapadd)"
	  },
	  "CH mapSubtract": {
		"scope": "tinybird,sql",
		"prefix": [
		  "mapSubtract"
		],
		"body": [
		  "mapSubtract(${0:Tuple(${1:Array}}, ${1:Array}), ${0:Tuple(${1:Array}}, ${1:Array}) [, ...])"
		],
		"description": "**mapSubtract(Tuple(Array, Array), Tuple(Array, Array) [, ...])** \n\nCollect all the keys and subtract corresponding values. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/tuple-map-functions/#mapsubtract)"
	  },
	  "CH mapPopulateSeries": {
		"scope": "tinybird,sql",
		"prefix": [
		  "mapPopulateSeries"
		],
		"body": [
		  "mapPopulateSeries(${0:keys}, ${1:values}[, ${2:max}])"
		],
		"description": "**mapPopulateSeries(keys, values[, max])** \n\nFills missing keys in the maps (key and value array pair), where keys are integers. Also, it supports specifying the max key, which is used to extend the keys array. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/tuple-map-functions/#mappopulateseries)"
	  },
	  "CH mapContains": {
		"scope": "tinybird,sql",
		"prefix": [
		  "mapContains"
		],
		"body": [
		  "mapContains(${0:map}, ${1:key})"
		],
		"description": "**mapContains(map, key)** \n\nDetermines  whether the \\`map\\` contains the \\`key\\` parameter. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/tuple-map-functions/#mapcontains)"
	  },
	  "CH mapKeys": {
		"scope": "tinybird,sql",
		"prefix": [
		  "mapKeys"
		],
		"body": [
		  "${0:map}Keys(${0:map})"
		],
		"description": "**mapKeys(map)** \n\nReturns all keys from the \\`map\\` parameter.\n\n\n                            Can be optimized by enabling the [optimize_functions_to_subcolumns](../../operations/settings/settings.md#optimize-functions-to-subcolumns) setting. With \\`optimize_functions_to_subcolumns = 1\\` the function reads only [keys](../../sql-reference/data-types/map.md#map-subcolumns) subcolumn instead of reading and processing the whole column data. The query \\` [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/tuple-map-functions/#mapkeys)"
	  },
	  "CH mapValues": {
		"scope": "tinybird,sql",
		"prefix": [
		  "mapValues"
		],
		"body": [
		  "${0:map}Values(${0:map})"
		],
		"description": "**mapValues(map)** \n\nReturns all values from the \\`map\\` parameter.\n\n\n                            Can be optimized by enabling the [optimize_functions_to_subcolumns](../../operations/settings/settings.md#optimize-functions-to-subcolumns) setting. With \\`optimize_functions_to_subcolumns = 1\\` the function reads only [values](../../sql-reference/data-types/map.md#map-subcolumns) subcolumn instead of reading and processing the whole column data. The query \\` [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/tuple-map-functions/#mapvalues)"
	  },
	  "CH mapContainsKeyLike": {
		"scope": "tinybird,sql",
		"prefix": [
		  "mapContainsKeyLike"
		],
		"body": [
		  "mapContainsKeyLike(${0:map}, ${1:pattern})"
		],
		"description": "**mapContainsKeyLike(map, pattern)** \n\nsql [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/tuple-map-functions/#mapcontainskeylike)"
	  },
	  "CH mapExtractKeyLike": {
		"scope": "tinybird,sql",
		"prefix": [
		  "mapExtractKeyLike"
		],
		"body": [
		  "mapExtractKeyLike(${0:map}, ${1:pattern})"
		],
		"description": "**mapExtractKeyLike(map, pattern)** \n\nsql [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/tuple-map-functions/#mapextractkeylike)"
	  },
	  "CH mapApply": {
		"scope": "tinybird,sql",
		"prefix": [
		  "mapApply"
		],
		"body": [
		  "mapApply(${0:func}, ${1:map})"
		],
		"description": "**mapApply(func, map)** \n\nsql [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/tuple-map-functions/#mapapply)"
	  },
	  "CH mapFilter": {
		"scope": "tinybird,sql",
		"prefix": [
		  "mapFilter"
		],
		"body": [
		  "mapFilter(${0:func}, ${1:map})"
		],
		"description": "**mapFilter(func, map)** \n\nsql [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/tuple-map-functions/#mapfilter)"
	  },
	  "CH dictGet": {
		"scope": "tinybird,sql",
		"prefix": [
		  "dictGet"
		],
		"body": [
		  "dictGet(${0:x})"
		],
		"description": "**dictGet(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/ext-dict-functions/#dictget)"
	  },
	  "CH dictGetOrDefault": {
		"scope": "tinybird,sql",
		"prefix": [
		  "dictGetOrDefault"
		],
		"body": [
		  "dictGetOrDefault(${0:x})"
		],
		"description": "**dictGetOrDefault(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/ext-dict-functions/#dictget)"
	  },
	  "CH dictGetOrNull": {
		"scope": "tinybird,sql",
		"prefix": [
		  "dictGetOrNull"
		],
		"body": [
		  "dictGetOrNull(${0:x})"
		],
		"description": "**dictGetOrNull(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/ext-dict-functions/#dictget)"
	  },
	  "CH dictHas": {
		"scope": "tinybird,sql",
		"prefix": [
		  "dictHas"
		],
		"body": [
		  "dictHas(${0:x})"
		],
		"description": "**dictHas(x)** \n\nChecks whether a key is present in a dictionary. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/ext-dict-functions/#dicthas)"
	  },
	  "CH dictGetHierarchy": {
		"scope": "tinybird,sql",
		"prefix": [
		  "dictGetHierarchy"
		],
		"body": [
		  "dictGetHierarchy(${0:'dict_name'}, ${1:key})"
		],
		"description": "**dictGetHierarchy('dict_name', key)** \n\nCreates an array, containing all the parents of a key in the hierarchical dictionary. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/ext-dict-functions/#dictgethierarchy)"
	  },
	  "CH dictIsIn": {
		"scope": "tinybird,sql",
		"prefix": [
		  "dictIsIn"
		],
		"body": [
		  "dictIsIn(${0:'dict_name'}, ${1:child_id_expr}, ${2:ancestor_id_expr})"
		],
		"description": "**dictIsIn('dict_name', child_id_expr, ancestor_id_expr)** \n\nChecks the ancestor of a key through the whole hierarchical chain in the dictionary. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/ext-dict-functions/#dictisin)"
	  },
	  "CH dictGetChildren": {
		"scope": "tinybird,sql",
		"prefix": [
		  "dictGetChildren"
		],
		"body": [
		  "dictGetChildren(${0:dict_name}, ${1:key})"
		],
		"description": "**dictGetChildren(dict_name, key)** \n\nReturns first-level children as an array of indexes. It is the inverse transformation for [dictGetHierarchy](https://clickhouse.tech/docs/en/sql-reference/functions/ext-dict-functions#dictgethierarchy). [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/ext-dict-functions/#dictgetchildren)"
	  },
	  "CH dictGetDescendants": {
		"scope": "tinybird,sql",
		"prefix": [
		  "dictGetDescendants"
		],
		"body": [
		  "dictGetDescendants(${0:dict_name}, ${1:key}, ${2:level})"
		],
		"description": "**dictGetDescendants(dict_name, key, level)** \n\nReturns all descendants as if [dictGetChildren](https://clickhouse.tech/docs/en/sql-reference/functions/ext-dict-functions#dictgetchildren) function was applied \\`level\\` times recursively. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/ext-dict-functions/#dictgetdescendant)"
	  },
	  "CH in": {
		"scope": "tinybird,sql",
		"prefix": [
		  "in"
		],
		"body": [
		  "in(${0:x})"
		],
		"description": "**in(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/in-functions/#in)"
	  },
	  "CH notIn": {
		"scope": "tinybird,sql",
		"prefix": [
		  "notIn"
		],
		"body": [
		  "notIn(${0:x})"
		],
		"description": "**notIn(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/in-functions/#in)"
	  },
	  "CH globalIn": {
		"scope": "tinybird,sql",
		"prefix": [
		  "globalIn"
		],
		"body": [
		  "globalIn(${0:x})"
		],
		"description": "**globalIn(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/in-functions/#in)"
	  },
	  "CH globalNotIn": {
		"scope": "tinybird,sql",
		"prefix": [
		  "globalNotIn"
		],
		"body": [
		  "globalNotIn(${0:x})"
		],
		"description": "**globalNotIn(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/in-functions/#in)"
	  },
	  "CH file": {
		"scope": "tinybird,sql",
		"prefix": [
		  "file"
		],
		"body": [
		  "file(${0:path}[, ${1:default}])"
		],
		"description": "**file(path[, default])** \n\nReads file as a String. The file content is not parsed, so any information is read as one string and placed into the specified column.\n\n\n                            INSERT INTO table [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/files/#file)"
	  },
	  "CH length": {
		"scope": "tinybird,sql",
		"prefix": [
		  "length"
		],
		"body": [
		  "length(${0:x})"
		],
		"description": "**length(x)** \n\nReturns the number of items in the array.\n\n\n                            Can be optimized by enabling the [optimize_functions_to_subcolumns](../../operations/settings/settings.md#optimize-functions-to-subcolumns) setting. With \\`optimize_functions_to_subcolumns = 1\\` the function reads only [size0](../../sql-reference/data-types/array.md#array-size) subcolumn instead of reading and processing the whole array column. The query \\` [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#length)"
	  },
	  "CH emptyArrayUInt8": {
		"scope": "tinybird,sql",
		"prefix": [
		  "emptyArrayUInt8"
		],
		"body": [
		  "emptyArrayUInt8(${0:x})"
		],
		"description": "**emptyArrayUInt8(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#emptyarrayuint8)"
	  },
	  "CH emptyArrayUInt16": {
		"scope": "tinybird,sql",
		"prefix": [
		  "emptyArrayUInt16"
		],
		"body": [
		  "emptyArrayUInt16(${0:x})"
		],
		"description": "**emptyArrayUInt16(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#emptyarrayuint8)"
	  },
	  "CH emptyArrayUInt32": {
		"scope": "tinybird,sql",
		"prefix": [
		  "emptyArrayUInt32"
		],
		"body": [
		  "emptyArrayUInt32(${0:x})"
		],
		"description": "**emptyArrayUInt32(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#emptyarrayuint8)"
	  },
	  "CH emptyArrayUInt64": {
		"scope": "tinybird,sql",
		"prefix": [
		  "emptyArrayUInt64"
		],
		"body": [
		  "emptyArrayUInt64(${0:x})"
		],
		"description": "**emptyArrayUInt64(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#emptyarrayuint8)"
	  },
	  "CH emptyArrayInt8": {
		"scope": "tinybird,sql",
		"prefix": [
		  "emptyArrayInt8"
		],
		"body": [
		  "emptyArrayInt8(${0:x})"
		],
		"description": "**emptyArrayInt8(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#emptyarrayint8)"
	  },
	  "CH emptyArrayInt16": {
		"scope": "tinybird,sql",
		"prefix": [
		  "emptyArrayInt16"
		],
		"body": [
		  "emptyArrayInt16(${0:x})"
		],
		"description": "**emptyArrayInt16(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#emptyarrayint8)"
	  },
	  "CH emptyArrayInt32": {
		"scope": "tinybird,sql",
		"prefix": [
		  "emptyArrayInt32"
		],
		"body": [
		  "emptyArrayInt32(${0:x})"
		],
		"description": "**emptyArrayInt32(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#emptyarrayint8)"
	  },
	  "CH emptyArrayInt64": {
		"scope": "tinybird,sql",
		"prefix": [
		  "emptyArrayInt64"
		],
		"body": [
		  "emptyArrayInt64(${0:x})"
		],
		"description": "**emptyArrayInt64(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#emptyarrayint8)"
	  },
	  "CH emptyArrayFloat32": {
		"scope": "tinybird,sql",
		"prefix": [
		  "emptyArrayFloat32"
		],
		"body": [
		  "emptyArrayFloat32(${0:x})"
		],
		"description": "**emptyArrayFloat32(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#emptyarrayfloat32)"
	  },
	  "CH emptyArrayFloat64": {
		"scope": "tinybird,sql",
		"prefix": [
		  "emptyArrayFloat64"
		],
		"body": [
		  "emptyArrayFloat64(${0:x})"
		],
		"description": "**emptyArrayFloat64(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#emptyarrayfloat32)"
	  },
	  "CH emptyArrayDate": {
		"scope": "tinybird,sql",
		"prefix": [
		  "emptyArrayDate"
		],
		"body": [
		  "emptyArrayDate(${0:x})"
		],
		"description": "**emptyArrayDate(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#emptyarraydate)"
	  },
	  "CH emptyArrayDateTime": {
		"scope": "tinybird,sql",
		"prefix": [
		  "emptyArrayDateTime"
		],
		"body": [
		  "emptyArrayDateTime(${0:x})"
		],
		"description": "**emptyArrayDateTime(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#emptyarraydate)"
	  },
	  "CH emptyArrayString": {
		"scope": "tinybird,sql",
		"prefix": [
		  "emptyArrayString"
		],
		"body": [
		  "emptyArrayString(${0:x})"
		],
		"description": "**emptyArrayString(x)** \n\nAccepts zero arguments and returns an empty array of the appropriate type. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#emptyarraystring)"
	  },
	  "CH emptyArrayToSingle": {
		"scope": "tinybird,sql",
		"prefix": [
		  "emptyArrayToSingle"
		],
		"body": [
		  "emptyArrayToSingle(${0:x})"
		],
		"description": "**emptyArrayToSingle(x)** \n\nAccepts an empty array and returns a one-element array that is equal to the default value. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#emptyarraytosingle)"
	  },
	  "CH range": {
		"scope": "tinybird,sql",
		"prefix": [
		  "range"
		],
		"body": [
		  "range(${0:end})"
		],
		"description": "**range(end)** \n\nReturns an array of numbers from \\`start\\` to \\`end - 1\\` by \\`step\\`. The supported types are UInt8, UInt16, UInt32, UInt64, Int8, Int16, Int32, Int64. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#rangeend)"
	  },
	  "CH array": {
		"scope": "tinybird,sql",
		"prefix": [
		  "array"
		],
		"body": [
		  "array(${0:x1})"
		],
		"description": "**array(x1)** \n\nCreates an array from the function arguments. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#arrayx1)"
	  },
	  "CH arrayWithConstant": {
		"scope": "tinybird,sql",
		"prefix": [
		  "arrayWithConstant"
		],
		"body": [
		  "arrayWithConstant(${0:length}, ${1:elem})"
		],
		"description": "**arrayWithConstant(length, elem)** \n\nCreates an array of length \\`length\\` filled with the constant \\`elem\\`. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#arraywithconstantlength)"
	  },
	  "CH arrayConcat": {
		"scope": "tinybird,sql",
		"prefix": [
		  "arrayConcat"
		],
		"body": [
		  "arrayConcat(${0:arrays})"
		],
		"description": "**arrayConcat(arrays)** \n\nCombines arrays passed as arguments. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#arrayconcat)"
	  },
	  "CH arrayElement": {
		"scope": "tinybird,sql",
		"prefix": [
		  "arrayElement"
		],
		"body": [
		  "arrayElement(${0:arr}, ${1:n})"
		],
		"description": "**arrayElement(arr, n)** \n\nGet the element with the index \\`n\\` from the array \\`arr\\`. \\`n\\` must be any integer type. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#arrayelementarr)"
	  },
	  "CH has": {
		"scope": "tinybird,sql",
		"prefix": [
		  "has"
		],
		"body": [
		  "has(${0:arr}, ${1:elem})"
		],
		"description": "**has(arr, elem)** \n\nChecks whether the 'arr' array has the 'elem' element. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#hasarr)"
	  },
	  "CH hasAll": {
		"scope": "tinybird,sql",
		"prefix": [
		  "hasAll"
		],
		"body": [
		  "hasAll(${0:set}, sub${0:set})"
		],
		"description": "**hasAll(set, subset)** \n\nChecks whether one array is a subset of another.\n\n\n                            \\` [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#hasall)"
	  },
	  "CH hasAny": {
		"scope": "tinybird,sql",
		"prefix": [
		  "hasAny"
		],
		"body": [
		  "hasAny(${0:array1}, ${1:array2})"
		],
		"description": "**hasAny(array1, array2)** \n\nChecks whether two arrays have intersection by some elements.\n\n\n                            \\` [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#hasany)"
	  },
	  "CH hasSubstr": {
		"scope": "tinybird,sql",
		"prefix": [
		  "hasSubstr"
		],
		"body": [
		  "hasSubstr(${0:array1}, ${1:array2})"
		],
		"description": "**hasSubstr(array1, array2)** \n\nChecks whether all the elements of array2 appear in array1 in the same exact order. Therefore, the function will return 1, if and only if \\`array1 = prefix + array2 + suffix\\`.\n\n\n                            \\` [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#hassubstr)"
	  },
	  "CH indexOf": {
		"scope": "tinybird,sql",
		"prefix": [
		  "indexOf"
		],
		"body": [
		  "indexOf(${0:arr}, ${1:x})"
		],
		"description": "**indexOf(arr, x)** \n\nReturns the index of the first 'x' element (starting from 1) if it is in the array, or 0 if it is not. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#indexofarr)"
	  },
	  "CH arrayCount": {
		"scope": "tinybird,sql",
		"prefix": [
		  "arrayCount"
		],
		"body": [
		  "arrayCount([${0:func},] ${1:arr1})"
		],
		"description": "**arrayCount([func,] arr1)** \n\nReturns the number of elements for which \\`func(arr1[i], arrN[i])\\` returns something other than 0. If \\`func\\` is not specified, it returns the number of non-zero elements in the array. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#arraycount[func)"
	  },
	  "CH countEqual": {
		"scope": "tinybird,sql",
		"prefix": [
		  "countEqual"
		],
		"body": [
		  "countEqual(${0:arr}, ${1:x})"
		],
		"description": "**countEqual(arr, x)** \n\nReturns the number of elements in the array equal to x. Equivalent to arrayCount (elem -> elem = x, arr). [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#countequalarr)"
	  },
	  "CH arrayEnumerate": {
		"scope": "tinybird,sql",
		"prefix": [
		  "arrayEnumerate"
		],
		"body": [
		  "${0:arr}ayEnumerate(${0:arr})"
		],
		"description": "**arrayEnumerate(arr)** \n\nReturns the array [1, 2, 3, length (arr) ] [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#arrayenumeratearr)"
	  },
	  "CH arrayEnumerateUniq": {
		"scope": "tinybird,sql",
		"prefix": [
		  "arrayEnumerateUniq"
		],
		"body": [
		  "arrayEnumerateUniq(${0:arr})"
		],
		"description": "**arrayEnumerateUniq(arr)** \n\nReturns an array the same size as the source array, indicating for each element what its position is among elements with the same value. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#arrayenumerateuniqarr)"
	  },
	  "CH arrayPopBack": {
		"scope": "tinybird,sql",
		"prefix": [
		  "arrayPopBack"
		],
		"body": [
		  "${0:array}PopBack(${0:array})"
		],
		"description": "**arrayPopBack(array)** \n\nRemoves the last item from the array. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#arraypopback)"
	  },
	  "CH arrayPopFront": {
		"scope": "tinybird,sql",
		"prefix": [
		  "arrayPopFront"
		],
		"body": [
		  "${0:array}PopFront(${0:array})"
		],
		"description": "**arrayPopFront(array)** \n\nRemoves the first item from the array. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#arraypopfront)"
	  },
	  "CH arrayPushBack": {
		"scope": "tinybird,sql",
		"prefix": [
		  "arrayPushBack"
		],
		"body": [
		  "arrayPushBack(${0:array}, ${1:single_value})"
		],
		"description": "**arrayPushBack(array, single_value)** \n\nAdds one item to the end of the array. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#arraypushback)"
	  },
	  "CH arrayPushFront": {
		"scope": "tinybird,sql",
		"prefix": [
		  "arrayPushFront"
		],
		"body": [
		  "arrayPushFront(${0:array}, ${1:single_value})"
		],
		"description": "**arrayPushFront(array, single_value)** \n\nAdds one element to the beginning of the array. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#arraypushfront)"
	  },
	  "CH arrayResize": {
		"scope": "tinybird,sql",
		"prefix": [
		  "arrayResize"
		],
		"body": [
		  "arrayResize(${0:array}, ${1:size}[, ${2:extender}])"
		],
		"description": "**arrayResize(array, size[, extender])** \n\nChanges the length of the array. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#arrayresize)"
	  },
	  "CH arraySlice": {
		"scope": "tinybird,sql",
		"prefix": [
		  "arraySlice"
		],
		"body": [
		  "arraySlice(${0:array}, ${1:offset}[, ${2:length}])"
		],
		"description": "**arraySlice(array, offset[, length])** \n\nReturns a slice of the array. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#arrayslice)"
	  },
	  "CH arraySort": {
		"scope": "tinybird,sql",
		"prefix": [
		  "arraySort"
		],
		"body": [
		  "arraySort([${0:func},] ${1:arr})"
		],
		"description": "**arraySort([func,] arr)** \n\nSorts the elements of the \\`arr\\` array in ascending order. If the \\`func\\` function is specified, sorting order is determined by the result of the \\`func\\` function applied to the elements of the array. If \\`func\\` accepts multiple arguments, the \\`arraySort\\` function is passed several arrays that the arguments of \\`func\\` will correspond to. Detailed examples are shown at the end of \\`arraySort\\` description. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#arraysort[func)"
	  },
	  "CH arrayReverseSort": {
		"scope": "tinybird,sql",
		"prefix": [
		  "arrayReverseSort"
		],
		"body": [
		  "arrayReverseSort([${0:func},] ${1:arr})"
		],
		"description": "**arrayReverseSort([func,] arr)** \n\nSorts the elements of the \\`arr\\` array in descending order. If the \\`func\\` function is specified, \\`arr\\` is sorted according to the result of the \\`func\\` function applied to the elements of the array, and then the sorted array is reversed. If \\`func\\` accepts multiple arguments, the \\`arrayReverseSort\\` function is passed several arrays that the arguments of \\`func\\` will correspond to. Detailed examples are shown at the end of \\`arrayReverseSort\\` description. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#arrayreversesort[func)"
	  },
	  "CH arrayUniq": {
		"scope": "tinybird,sql",
		"prefix": [
		  "arrayUniq"
		],
		"body": [
		  "arrayUniq(${0:arr})"
		],
		"description": "**arrayUniq(arr)** \n\nIf one argument is passed, it counts the number of different elements in the array. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#arrayuniqarr)"
	  },
	  "CH arrayJoin": {
		"scope": "tinybird,sql",
		"prefix": [
		  "arrayJoin"
		],
		"body": [
		  "${0:arr}ayJoin(${0:arr})"
		],
		"description": "**arrayJoin(arr)** \n\nA special function. See the section \u201cArrayJoin function\u201d. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#arrayjoinarr)"
	  },
	  "CH arrayDifference": {
		"scope": "tinybird,sql",
		"prefix": [
		  "arrayDifference"
		],
		"body": [
		  "${0:array}Difference(${0:array})"
		],
		"description": "**arrayDifference(array)** \n\nCalculates the difference between adjacent array elements. Returns an array where the first element will be 0, the second is the difference between \\`a[1] - a[0]\\`, etc. The type of elements in the resulting array is determined by the type inference rules for subtraction (e.g.\u00a0\\`UInt8\\` - \\`UInt8\\` = \\`Int16\\`). [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#arraydifference)"
	  },
	  "CH arrayDistinct": {
		"scope": "tinybird,sql",
		"prefix": [
		  "arrayDistinct"
		],
		"body": [
		  "${0:array}Distinct(${0:array})"
		],
		"description": "**arrayDistinct(array)** \n\nTakes an array, returns an array containing the distinct elements only. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#arraydistinct)"
	  },
	  "CH arrayEnumerateDense": {
		"scope": "tinybird,sql",
		"prefix": [
		  "arrayEnumerateDense"
		],
		"body": [
		  "${0:arr}ayEnumerateDense(${0:arr})"
		],
		"description": "**arrayEnumerateDense(arr)** \n\nReturns an array of the same size as the source array, indicating where each element first appears in the source array. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#arrayenumeratedensearr)"
	  },
	  "CH arrayIntersect": {
		"scope": "tinybird,sql",
		"prefix": [
		  "arrayIntersect"
		],
		"body": [
		  "${0:arr}ayIntersect(${0:arr})"
		],
		"description": "**arrayIntersect(arr)** \n\nTakes multiple arrays, returns an array with elements that are present in all source arrays. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#arrayintersectarr)"
	  },
	  "CH arrayReduce": {
		"scope": "tinybird,sql",
		"prefix": [
		  "arrayReduce"
		],
		"body": [
		  "arrayReduce(${0:agg_func}, ${1:arr1}, ${2:arr2}, ..., ${4:arrN})"
		],
		"description": "**arrayReduce(agg_func, arr1, arr2, ..., arrN)** \n\nApplies an aggregate function to array elements and returns its result. The name of the aggregation function is passed as a string in single quotes \\`'max'\\`, \\`'sum'\\`. When using parametric aggregate functions, the parameter is indicated after the function name in parentheses \\`'uniqUpTo(6)'\\`. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#arrayreduce)"
	  },
	  "CH arrayReduceInRanges": {
		"scope": "tinybird,sql",
		"prefix": [
		  "arrayReduceInRanges"
		],
		"body": [
		  "arrayReduceInRanges(${0:agg_func}, ${1:ranges}, ${2:arr1}, ${3:arr2}, ..., ${5:arrN})"
		],
		"description": "**arrayReduceInRanges(agg_func, ranges, arr1, arr2, ..., arrN)** \n\nApplies an aggregate function to array elements in given ranges and returns an array containing the result corresponding to each range. The function will return the same result as multiple \\`arrayReduce(agg_func, arraySlice(arr1, index, length), ...)\\`. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#arrayreduceinranges)"
	  },
	  "CH arrayReverse": {
		"scope": "tinybird,sql",
		"prefix": [
		  "arrayReverse"
		],
		"body": [
		  "${0:arr}ayReverse(${0:arr})"
		],
		"description": "**arrayReverse(arr)** \n\nReturns an array of the same size as the original array containing the elements in reverse order. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#arrayreversearr)"
	  },
	  "CH reverse": {
		"scope": "tinybird,sql",
		"prefix": [
		  "reverse"
		],
		"body": [
		  "reverse(${0:arr})"
		],
		"description": "**reverse(arr)** \n\nSynonym for [\u201carrayReverse\u201d](https://clickhouse.tech/docs/en/sql-reference/functions/array-functions#arrayreverse) [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#reversearr)"
	  },
	  "CH arrayFlatten": {
		"scope": "tinybird,sql",
		"prefix": [
		  "arrayFlatten"
		],
		"body": [
		  "arrayFlatten(${0:x})"
		],
		"description": "**arrayFlatten(x)** \n\nConverts an array of arrays to a flat array. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#arrayflatten)"
	  },
	  "CH arrayCompact": {
		"scope": "tinybird,sql",
		"prefix": [
		  "arrayCompact"
		],
		"body": [
		  "${0:arr}ayCompact(${0:arr})"
		],
		"description": "**arrayCompact(arr)** \n\nRemoves consecutive duplicate elements from an array. The order of result values is determined by the order in the source array. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#arraycompact)"
	  },
	  "CH arrayZip": {
		"scope": "tinybird,sql",
		"prefix": [
		  "arrayZip"
		],
		"body": [
		  "arrayZip(${0:arr1}, ${1:arr2}, ..., ${3:arrN})"
		],
		"description": "**arrayZip(arr1, arr2, ..., arrN)** \n\nCombines multiple arrays into a single array. The resulting array contains the corresponding elements of the source arrays grouped into tuples in the listed order of arguments. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#arrayzip)"
	  },
	  "CH arrayAUC": {
		"scope": "tinybird,sql",
		"prefix": [
		  "arrayAUC"
		],
		"body": [
		  "arrayAUC(${0:arr_scores}, ${1:arr_labels})"
		],
		"description": "**arrayAUC(arr_scores, arr_labels)** \n\nCalculate AUC (Area Under the Curve, which is a concept in machine learning, see more details: https://en.wikipedia.org/wiki/Receiver_operating_characteristic#Area_under_the_curve).\n\n\n                            select arrayAUC([0.1, 0.4, 0.35, 0.8], [0, 0, 1, 1]);\n                            \n                             [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#arrayauc)"
	  },
	  "CH arrayMap": {
		"scope": "tinybird,sql",
		"prefix": [
		  "arrayMap"
		],
		"body": [
		  "arrayMap(${0:x -> x}, ${1:arr1})"
		],
		"description": "**arrayMap(x -> x, arr1)** \n\nReturns an array obtained from the original arrays by application of \\`func(arr1[i], arrN[i])\\` for each element. Arrays \\`arr1\\`  \\`arrN\\` must have the same number of elements. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#arraymapfunc)"
	  },
	  "CH arrayFilter": {
		"scope": "tinybird,sql",
		"prefix": [
		  "arrayFilter"
		],
		"body": [
		  "arrayFilter(${0:x -> x}, ${1:arr1})"
		],
		"description": "**arrayFilter(x -> x, arr1)** \n\nReturns an array containing only the elements in \\`arr1\\` for which \\`func(arr1[i], arrN[i])\\` returns something other than 0. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#arrayfilterfunc)"
	  },
	  "CH arrayFill": {
		"scope": "tinybird,sql",
		"prefix": [
		  "arrayFill"
		],
		"body": [
		  "arrayFill(${0:x -> x}, ${1:arr1})"
		],
		"description": "**arrayFill(x -> x, arr1)** \n\nScan through \\`arr1\\` from the first element to the last element and replace \\`arr1[i]\\` by \\`arr1[i - 1]\\` if \\`func(arr1[i], arrN[i])\\` returns 0. The first element of \\`arr1\\` will not be replaced. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#arrayfillfunc)"
	  },
	  "CH arrayReverseFill": {
		"scope": "tinybird,sql",
		"prefix": [
		  "arrayReverseFill"
		],
		"body": [
		  "arrayReverseFill(${0:x -> x}, ${1:arr1})"
		],
		"description": "**arrayReverseFill(x -> x, arr1)** \n\nScan through \\`arr1\\` from the last element to the first element and replace \\`arr1[i]\\` by \\`arr1[i + 1]\\` if \\`func(arr1[i], arrN[i])\\` returns 0. The last element of \\`arr1\\` will not be replaced. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#arrayreversefillfunc)"
	  },
	  "CH arraySplit": {
		"scope": "tinybird,sql",
		"prefix": [
		  "arraySplit"
		],
		"body": [
		  "arraySplit(${0:x -> x}, ${1:arr1})"
		],
		"description": "**arraySplit(x -> x, arr1)** \n\nSplit \\`arr1\\` into multiple arrays. When \\`func(arr1[i], arrN[i])\\` returns something other than 0, the array will be split on the left hand side of the element. The array will not be split before the first element. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#arraysplitfunc)"
	  },
	  "CH arrayReverseSplit": {
		"scope": "tinybird,sql",
		"prefix": [
		  "arrayReverseSplit"
		],
		"body": [
		  "arrayReverseSplit(${0:x -> x}, ${1:arr1})"
		],
		"description": "**arrayReverseSplit(x -> x, arr1)** \n\nSplit \\`arr1\\` into multiple arrays. When \\`func(arr1[i], arrN[i])\\` returns something other than 0, the array will be split on the right hand side of the element. The array will not be split after the last element. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#arrayreversesplitfunc)"
	  },
	  "CH arrayExists": {
		"scope": "tinybird,sql",
		"prefix": [
		  "arrayExists"
		],
		"body": [
		  "arrayExists([${0:func},] ${1:arr1})"
		],
		"description": "**arrayExists([func,] arr1)** \n\nReturns 1 if there is at least one element in \\`arr\\` for which \\`func(arr1[i], arrN[i])\\` returns something other than 0. Otherwise, it returns 0. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#arrayexists[func)"
	  },
	  "CH arrayAll": {
		"scope": "tinybird,sql",
		"prefix": [
		  "arrayAll"
		],
		"body": [
		  "arrayAll([${0:func},] ${1:arr1})"
		],
		"description": "**arrayAll([func,] arr1)** \n\nReturns 1 if \\`func(arr1[i], arrN[i])\\` returns something other than 0 for all the elements in arrays. Otherwise, it returns 0. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#arrayall[func)"
	  },
	  "CH arrayFirst": {
		"scope": "tinybird,sql",
		"prefix": [
		  "arrayFirst"
		],
		"body": [
		  "arrayFirst(${0:x -> x}, ${1:arr1})"
		],
		"description": "**arrayFirst(x -> x, arr1)** \n\nReturns the first element in the \\`arr1\\` array for which \\`func(arr1[i], arrN[i])\\` returns something other than 0. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#arrayfirstfunc)"
	  },
	  "CH arrayLast": {
		"scope": "tinybird,sql",
		"prefix": [
		  "arrayLast"
		],
		"body": [
		  "arrayLast(${0:x -> x}, ${1:arr1})"
		],
		"description": "**arrayLast(x -> x, arr1)** \n\nReturns the last element in the \\`arr1\\` array for which \\`func(arr1[i], arrN[i])\\` returns something other than 0. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#arraylastfunc)"
	  },
	  "CH arrayFirstIndex": {
		"scope": "tinybird,sql",
		"prefix": [
		  "arrayFirstIndex"
		],
		"body": [
		  "arrayFirstIndex(${0:x -> x}, ${1:arr1})"
		],
		"description": "**arrayFirstIndex(x -> x, arr1)** \n\nReturns the index of the first element in the \\`arr1\\` array for which \\`func(arr1[i], arrN[i])\\` returns something other than 0. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#arrayfirstindexfunc)"
	  },
	  "CH arrayLastIndex": {
		"scope": "tinybird,sql",
		"prefix": [
		  "arrayLastIndex"
		],
		"body": [
		  "arrayLastIndex(${0:x -> x}, ${1:arr1})"
		],
		"description": "**arrayLastIndex(x -> x, arr1)** \n\nReturns the index of the last element in the \\`arr1\\` array for which \\`func(arr1[i], arrN[i])\\` returns something other than 0. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#arraylastindexfunc)"
	  },
	  "CH arrayCumSum": {
		"scope": "tinybird,sql",
		"prefix": [
		  "arrayCumSum"
		],
		"body": [
		  "arrayCumSum([${0:func},] ${1:arr1})"
		],
		"description": "**arrayCumSum([func,] arr1)** \n\nReturns an array of partial sums of elements in the source array (a running sum). If the \\`func\\` function is specified, then the values of the array elements are converted by \\`func(arr1[i], arrN[i])\\` before summing. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#arraycumsum[func)"
	  },
	  "CH arrayCumSumNonNegative": {
		"scope": "tinybird,sql",
		"prefix": [
		  "arrayCumSumNonNegative"
		],
		"body": [
		  "${0:arr}ayCumSumNonNegative(${0:arr})"
		],
		"description": "**arrayCumSumNonNegative(arr)** \n\nSame as \\`arrayCumSum\\`, returns an array of partial sums of elements in the source array (a running sum). Different \\`arrayCumSum\\`, when then returned value contains a value less than zero, the value is replace with zero and the subsequent calculation is performed with zero parameters. For example: [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#arraycumsumnonnegativearr)"
	  },
	  "CH arrayProduct": {
		"scope": "tinybird,sql",
		"prefix": [
		  "arrayProduct"
		],
		"body": [
		  "${0:arr}ayProduct(${0:arr})"
		],
		"description": "**arrayProduct(arr)** \n\nMultiplies elements of an array. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/array-functions/#arrayproduct)"
	  },
	  "CH lengthUTF8": {
		"scope": "tinybird,sql",
		"prefix": [
		  "lengthUTF8"
		],
		"body": [
		  "lengthUTF8(${0:x})"
		],
		"description": "**lengthUTF8(x)** \n\nReturns the length of a string in Unicode code points (not in characters), assuming that the string contains a set of bytes that make up UTF-8 encoded text. If this assumption is not met, it returns some result (it does not throw an exception). [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-functions/#lengthutf8)"
	  },
	  "CH char_length": {
		"scope": "tinybird,sql",
		"prefix": [
		  "char_length"
		],
		"body": [
		  "char_length(${0:x})"
		],
		"description": "**char_length(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-functions/#char_length)"
	  },
	  "CH CHAR_LENGTH": {
		"scope": "tinybird,sql",
		"prefix": [
		  "CHAR_LENGTH"
		],
		"body": [
		  "CHAR_LENGTH(${0:x})"
		],
		"description": "**CHAR_LENGTH(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-functions/#char_length)"
	  },
	  "CH character_length": {
		"scope": "tinybird,sql",
		"prefix": [
		  "character_length"
		],
		"body": [
		  "character_length(${0:x})"
		],
		"description": "**character_length(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-functions/#character_length)"
	  },
	  "CH CHARACTER_LENGTH": {
		"scope": "tinybird,sql",
		"prefix": [
		  "CHARACTER_LENGTH"
		],
		"body": [
		  "CHARACTER_LENGTH(${0:x})"
		],
		"description": "**CHARACTER_LENGTH(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-functions/#character_length)"
	  },
	  "CH leftPad": {
		"scope": "tinybird,sql",
		"prefix": [
		  "leftPad"
		],
		"body": [
		  "leftPad(${0:'string'}, ${1:'length'}[, ${2:'pad_string'}])"
		],
		"description": "**leftPad('string', 'length'[, 'pad_string'])** \n\nPads the current string from the left with spaces or a specified string (multiple times, if needed) until the resulting string reaches the given length. Similarly to the MySQL \\`LPAD\\` function. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-functions/#leftpad)"
	  },
	  "CH rightPad": {
		"scope": "tinybird,sql",
		"prefix": [
		  "rightPad"
		],
		"body": [
		  "rightPad(${0:'string'}, ${1:'length'}[, ${2:'pad_string'}])"
		],
		"description": "**rightPad('string', 'length'[, 'pad_string'])** \n\nPads the current string from the right with spaces or a specified string (multiple times, if needed) until the resulting string reaches the given length. Similarly to the MySQL \\`RPAD\\` function. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-functions/#rightpad)"
	  },
	  "CH lower": {
		"scope": "tinybird,sql",
		"prefix": [
		  "lower"
		],
		"body": [
		  "lower(${0:x})"
		],
		"description": "**lower(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-functions/#lower)"
	  },
	  "CH lcase": {
		"scope": "tinybird,sql",
		"prefix": [
		  "lcase"
		],
		"body": [
		  "lcase(${0:x})"
		],
		"description": "**lcase(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-functions/#lower)"
	  },
	  "CH upper": {
		"scope": "tinybird,sql",
		"prefix": [
		  "upper"
		],
		"body": [
		  "upper(${0:x})"
		],
		"description": "**upper(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-functions/#upper)"
	  },
	  "CH ucase": {
		"scope": "tinybird,sql",
		"prefix": [
		  "ucase"
		],
		"body": [
		  "ucase(${0:x})"
		],
		"description": "**ucase(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-functions/#upper)"
	  },
	  "CH lowerUTF8": {
		"scope": "tinybird,sql",
		"prefix": [
		  "lowerUTF8"
		],
		"body": [
		  "lowerUTF8(${0:x})"
		],
		"description": "**lowerUTF8(x)** \n\nConverts a string to lowercase, assuming the string contains a set of bytes that make up a UTF-8 encoded text. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-functions/#lowerutf8)"
	  },
	  "CH upperUTF8": {
		"scope": "tinybird,sql",
		"prefix": [
		  "upperUTF8"
		],
		"body": [
		  "upperUTF8(${0:x})"
		],
		"description": "**upperUTF8(x)** \n\nConverts a string to uppercase, assuming the string contains a set of bytes that make up a UTF-8 encoded text. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-functions/#upperutf8)"
	  },
	  "CH isValidUTF8": {
		"scope": "tinybird,sql",
		"prefix": [
		  "isValidUTF8"
		],
		"body": [
		  "isValidUTF8(${0:x})"
		],
		"description": "**isValidUTF8(x)** \n\nReturns 1, if the set of bytes is valid UTF-8 encoded, otherwise 0. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-functions/#isvalidutf8)"
	  },
	  "CH toValidUTF8": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toValidUTF8"
		],
		"body": [
		  "toValidUTF8(${0:input_string})"
		],
		"description": "**toValidUTF8(input_string)** \n\nReplaces invalid UTF-8 characters by the \\`\ufffd\\` (U+FFFD) character. All running in a row invalid characters are collapsed into the one replacement character. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-functions/#tovalidutf8)"
	  },
	  "CH repeat": {
		"scope": "tinybird,sql",
		"prefix": [
		  "repeat"
		],
		"body": [
		  "repeat(${0:s}, ${1:n})"
		],
		"description": "**repeat(s, n)** \n\nRepeats a string as many times as specified and concatenates the replicated values as a single string. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-functions/#repeat)"
	  },
	  "CH reverseUTF8": {
		"scope": "tinybird,sql",
		"prefix": [
		  "reverseUTF8"
		],
		"body": [
		  "reverseUTF8(${0:x})"
		],
		"description": "**reverseUTF8(x)** \n\nReverses a sequence of Unicode code points, assuming that the string contains a set of bytes representing a UTF-8 text. Otherwise, it does something else (it does not throw an exception). [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-functions/#reverseutf8)"
	  },
	  "CH format": {
		"scope": "tinybird,sql",
		"prefix": [
		  "format"
		],
		"body": [
		  "format(${0:pattern}, ${1:s0}, ${2:s1})"
		],
		"description": "**format(pattern, s0, s1)** \n\nFormatting constant pattern with the string listed in the arguments. \\`pattern\\` is a simplified Python format pattern. Format string contains \u201creplacement fields\u201d surrounded by curly braces \\`{}\\`. Anything that is not contained in braces is considered literal text, which is copied unchanged to the output. If you need to include a brace character in the literal text, it can be escaped by doubling: \\`{{ '{{' }}\\` and \\`{{ '}}' }}\\`. Field names can be numbers (starting from zero) or empty (then they are treated as consequence numbers). [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-functions/#formatpattern)"
	  },
	  "CH concat": {
		"scope": "tinybird,sql",
		"prefix": [
		  "concat"
		],
		"body": [
		  "concat(${0:s1}, ${1:s2}, ...)"
		],
		"description": "**concat(s1, s2, ...)** \n\nConcatenates the strings listed in the arguments, without a separator. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-functions/#concat)"
	  },
	  "CH concatAssumeInjective": {
		"scope": "tinybird,sql",
		"prefix": [
		  "concatAssumeInjective"
		],
		"body": [
		  "concatAssumeInjective(${0:s1}, ${1:s2}, ...)"
		],
		"description": "**concatAssumeInjective(s1, s2, ...)** \n\nSame as [concat](https://clickhouse.tech/docs/en/sql-reference/functions/string-functions#concat), the difference is that you need to ensure that \\`concat(s1, s2, ...) \u2192 sn\\` is injective, it will be used for optimization of GROUP BY. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-functions/#concatassumeinjective)"
	  },
	  "CH substring": {
		"scope": "tinybird,sql",
		"prefix": [
		  "substring"
		],
		"body": [
		  "substring(${0:s}, off${0:s}et, ${2:length})"
		],
		"description": "**substring(s, offset, length)** \n\nReturns a substring starting with the byte from the 'offset' index that is 'length' bytes long. Character indexing starts from one (as in standard SQL). [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-functions/#substrings)"
	  },
	  "CH substringUTF8": {
		"scope": "tinybird,sql",
		"prefix": [
		  "substringUTF8"
		],
		"body": [
		  "substringUTF8(${0:s}, off${0:s}et, ${2:length})"
		],
		"description": "**substringUTF8(s, offset, length)** \n\nThe same as 'substring', but for Unicode code points. Works under the assumption that the string contains a set of bytes representing a UTF-8 encoded text. If this assumption is not met, it returns some result (it does not throw an exception). [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-functions/#substringutf8s)"
	  },
	  "CH appendTrailingCharIfAbsent": {
		"scope": "tinybird,sql",
		"prefix": [
		  "appendTrailingCharIfAbsent"
		],
		"body": [
		  "appendTrailingCharIfAbsent(${0:s}, ${1:c})"
		],
		"description": "**appendTrailingCharIfAbsent(s, c)** \n\nIf the 's' string is non-empty and does not contain the 'c' character at the end, it appends the 'c' character to the end. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-functions/#appendtrailingcharifabsents)"
	  },
	  "CH convertCharset": {
		"scope": "tinybird,sql",
		"prefix": [
		  "convertCharset"
		],
		"body": [
		  "convertCharset(${0:s}, ${1:from}, ${2:to})"
		],
		"description": "**convertCharset(s, from, to)** \n\nReturns the string 's' that was converted from the encoding in 'from' to the encoding in 'to'. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-functions/#convertcharsets)"
	  },
	  "CH base58Encode": {
		"scope": "tinybird,sql",
		"prefix": [
		  "base58Encode"
		],
		"body": [
		  "base58Encode(${0:plaintext})"
		],
		"description": "**base58Encode(plaintext)** \n\nAccepts a String and encodes it using [Base58](https://tools.ietf.org/id/draft-msporny-base58-01.html) encoding scheme using \"Bitcoin\" alphabet. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-functions/#base58encodeplaintext)"
	  },
	  "CH base58Decode": {
		"scope": "tinybird,sql",
		"prefix": [
		  "base58Decode"
		],
		"body": [
		  "base58Decode(${0:encoded_text})"
		],
		"description": "**base58Decode(encoded_text)** \n\nAccepts a String and decodes it using [Base58](https://tools.ietf.org/id/draft-msporny-base58-01.html) encoding scheme using \"Bitcoin\" alphabet. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-functions/#base58decodeencoded_text)"
	  },
	  "CH tryBase58Decode": {
		"scope": "tinybird,sql",
		"prefix": [
		  "tryBase58Decode"
		],
		"body": [
		  "tryBa${0:s}e58Decode(${0:s})"
		],
		"description": "**tryBase58Decode(s)** \n\nSimilar to base58Decode, but returns an empty string in case of error. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-functions/#trybase58decodes)"
	  },
	  "CH base64Encode": {
		"scope": "tinybird,sql",
		"prefix": [
		  "base64Encode"
		],
		"body": [
		  "ba${0:s}e64Encode(${0:s})"
		],
		"description": "**base64Encode(s)** \n\nEncodes 's' FixedString or String into base64. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-functions/#base64encodes)"
	  },
	  "CH base64Decode": {
		"scope": "tinybird,sql",
		"prefix": [
		  "base64Decode"
		],
		"body": [
		  "ba${0:s}e64Decode(${0:s})"
		],
		"description": "**base64Decode(s)** \n\nDecode base64-encoded FixedString or String 's' into original string. In case of failure raises an exception. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-functions/#base64decodes)"
	  },
	  "CH tryBase64Decode": {
		"scope": "tinybird,sql",
		"prefix": [
		  "tryBase64Decode"
		],
		"body": [
		  "tryBa${0:s}e64Decode(${0:s})"
		],
		"description": "**tryBase64Decode(s)** \n\nSimilar to base64Decode, but returns an empty string in case of error. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-functions/#trybase64decodes)"
	  },
	  "CH endsWith": {
		"scope": "tinybird,sql",
		"prefix": [
		  "endsWith"
		],
		"body": [
		  "endsWith(${0:s}, ${0:s}uffix)"
		],
		"description": "**endsWith(s, suffix)** \n\nReturns whether to end with the specified suffix. Returns 1 if the string ends with the specified suffix, otherwise it returns 0. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-functions/#endswiths)"
	  },
	  "CH startsWith": {
		"scope": "tinybird,sql",
		"prefix": [
		  "startsWith"
		],
		"body": [
		  "startsWith(${0:str}, ${1:prefix})"
		],
		"description": "**startsWith(str, prefix)** \n\nReturns 1 whether string starts with the specified prefix, otherwise it returns 0. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-functions/#startswithstr)"
	  },
	  "CH trim": {
		"scope": "tinybird,sql",
		"prefix": [
		  "trim"
		],
		"body": [
		  "trim([[${0:LEADING|TRAILING|BOTH] trim_character FROM] input_string})"
		],
		"description": "**trim([[LEADING|TRAILING|BOTH] trim_character FROM] input_string)** \n\nRemoves all specified characters from the start or end of a string. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-functions/#trim)"
	  },
	  "CH trimLeft": {
		"scope": "tinybird,sql",
		"prefix": [
		  "trimLeft"
		],
		"body": [
		  "trimLeft(${0:input_string})"
		],
		"description": "**trimLeft(input_string)** \n\nRemoves all consecutive occurrences of common whitespace (ASCII character 32) from the beginning of a string. It does not remove other kinds of whitespace characters (tab, no-break space, etc.). [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-functions/#trimleft)"
	  },
	  "CH trimRight": {
		"scope": "tinybird,sql",
		"prefix": [
		  "trimRight"
		],
		"body": [
		  "trimRight(${0:input_string})"
		],
		"description": "**trimRight(input_string)** \n\nRemoves all consecutive occurrences of common whitespace (ASCII character 32) from the end of a string. It does not remove other kinds of whitespace characters (tab, no-break space, etc.). [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-functions/#trimright)"
	  },
	  "CH trimBoth": {
		"scope": "tinybird,sql",
		"prefix": [
		  "trimBoth"
		],
		"body": [
		  "trimBoth(${0:input_string})"
		],
		"description": "**trimBoth(input_string)** \n\nRemoves all consecutive occurrences of common whitespace (ASCII character 32) from both ends of a string. It does not remove other kinds of whitespace characters (tab, no-break space, etc.). [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-functions/#trimboth)"
	  },
	  "CH CRC32": {
		"scope": "tinybird,sql",
		"prefix": [
		  "CRC32"
		],
		"body": [
		  "CRC32(${0:s})"
		],
		"description": "**CRC32(s)** \n\nReturns the CRC32 checksum of a string, using CRC-32-IEEE 802.3 polynomial and initial value \\`0xffffffff\\` (zlib implementation). [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-functions/#crc32s)"
	  },
	  "CH CRC32IEEE": {
		"scope": "tinybird,sql",
		"prefix": [
		  "CRC32IEEE"
		],
		"body": [
		  "CRC32IEEE(${0:s})"
		],
		"description": "**CRC32IEEE(s)** \n\nReturns the CRC32 checksum of a string, using CRC-32-IEEE 802.3 polynomial. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-functions/#crc32ieees)"
	  },
	  "CH CRC64": {
		"scope": "tinybird,sql",
		"prefix": [
		  "CRC64"
		],
		"body": [
		  "CRC64(${0:s})"
		],
		"description": "**CRC64(s)** \n\nReturns the CRC64 checksum of a string, using CRC-64-ECMA polynomial. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-functions/#crc64s)"
	  },
	  "CH normalizeQuery": {
		"scope": "tinybird,sql",
		"prefix": [
		  "normalizeQuery"
		],
		"body": [
		  "normalizeQuery(${0:x})"
		],
		"description": "**normalizeQuery(x)** \n\nReplaces literals, sequences of literals and complex aliases with placeholders. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-functions/#normalizequery)"
	  },
	  "CH normalizedQueryHash": {
		"scope": "tinybird,sql",
		"prefix": [
		  "normalizedQueryHash"
		],
		"body": [
		  "normalizedQueryHash(${0:x})"
		],
		"description": "**normalizedQueryHash(x)** \n\nReturns identical 64bit hash values without the values of literals for similar queries. It helps to analyze query log. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-functions/#normalizedqueryhash)"
	  },
	  "CH normalizeUTF8NFC": {
		"scope": "tinybird,sql",
		"prefix": [
		  "normalizeUTF8NFC"
		],
		"body": [
		  "normalizeUTF8NFC(${0:words})"
		],
		"description": "**normalizeUTF8NFC(words)** \n\nConverts a string to [NFC normalized form](https://en.wikipedia.org/wiki/Unicode_equivalence#Normal_forms), assuming the string contains a set of bytes that make up a UTF-8 encoded text. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-functions/#normalizeutf8nfc)"
	  },
	  "CH normalizeUTF8NFD": {
		"scope": "tinybird,sql",
		"prefix": [
		  "normalizeUTF8NFD"
		],
		"body": [
		  "normalizeUTF8NFD(${0:words})"
		],
		"description": "**normalizeUTF8NFD(words)** \n\nConverts a string to [NFD normalized form](https://en.wikipedia.org/wiki/Unicode_equivalence#Normal_forms), assuming the string contains a set of bytes that make up a UTF-8 encoded text. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-functions/#normalizeutf8nfd)"
	  },
	  "CH normalizeUTF8NFKC": {
		"scope": "tinybird,sql",
		"prefix": [
		  "normalizeUTF8NFKC"
		],
		"body": [
		  "normalizeUTF8NFKC(${0:words})"
		],
		"description": "**normalizeUTF8NFKC(words)** \n\nConverts a string to [NFKC normalized form](https://en.wikipedia.org/wiki/Unicode_equivalence#Normal_forms), assuming the string contains a set of bytes that make up a UTF-8 encoded text. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-functions/#normalizeutf8nfkc)"
	  },
	  "CH normalizeUTF8NFKD": {
		"scope": "tinybird,sql",
		"prefix": [
		  "normalizeUTF8NFKD"
		],
		"body": [
		  "normalizeUTF8NFKD(${0:words})"
		],
		"description": "**normalizeUTF8NFKD(words)** \n\nConverts a string to [NFKD normalized form](https://en.wikipedia.org/wiki/Unicode_equivalence#Normal_forms), assuming the string contains a set of bytes that make up a UTF-8 encoded text. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-functions/#normalizeutf8nfkd)"
	  },
	  "CH encodeXMLComponent": {
		"scope": "tinybird,sql",
		"prefix": [
		  "encodeXMLComponent"
		],
		"body": [
		  "encodeXMLComponent(${0:x})"
		],
		"description": "**encodeXMLComponent(x)** \n\nEscapes characters to place string into XML text node or attribute. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-functions/#encodexmlcomponent)"
	  },
	  "CH decodeXMLComponent": {
		"scope": "tinybird,sql",
		"prefix": [
		  "decodeXMLComponent"
		],
		"body": [
		  "decodeXMLComponent(${0:x})"
		],
		"description": "**decodeXMLComponent(x)** \n\nReplaces XML predefined entities with characters. Predefined entities are \\`&quot;\\` \\`&amp;\\` \\`&apos;\\` \\`&gt;\\` \\`&lt;\\` [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-functions/#decodexmlcomponent)"
	  },
	  "CH extractTextFromHTML": {
		"scope": "tinybird,sql",
		"prefix": [
		  "extractTextFromHTML"
		],
		"body": [
		  "e${0:x}tractTe${0:x}tFromHTML(${0:x})"
		],
		"description": "**extractTextFromHTML(x)** \n\nA function to extract text from HTML or XHTML. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-functions/#extracttextfromhtml)"
	  },
	  "CH ascii": {
		"scope": "tinybird,sql",
		"prefix": [
		  "ascii"
		],
		"body": [
		  "a${0:s}cii(${0:s})"
		],
		"description": "**ascii(s)** \n\nReturns the ASCII code point of the first character of str.  The result type is Int32. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-functions/#ascii)"
	  },
	  "CH concatWithSeparator": {
		"scope": "tinybird,sql",
		"prefix": [
		  "concatWithSeparator"
		],
		"body": [
		  "concatWithSeparator(${0:sep}, ${1:expr1}, ${2:expr2}, ${3:expr3}...)"
		],
		"description": "**concatWithSeparator(sep, expr1, expr2, expr3...)** \n\nReturns the concatenation strings separated by string separator. If any of the argument values is \\`NULL\\`, the function returns \\`NULL\\`. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/string-functions/#concatwithseparator)"
	  },
	  "CH timeZone": {
		"scope": "tinybird,sql",
		"prefix": [
		  "timeZone"
		],
		"body": [
		  "timeZone()"
		],
		"description": "**timeZone()** \n\nReturns the timezone of the server. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#timezone)"
	  },
	  "CH toTimezone": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toTimezone"
		],
		"body": [
		  "toTimezone(${0:value}, ${1:timezone})"
		],
		"description": "**toTimezone(value, timezone)** \n\nConverts time or date and time to the specified time zone. The time zone is an attribute of the \\`Date\\` and \\`DateTime\\` data types. The internal value (number of seconds) of the table field or of the resultset's column does not change, the column's type changes and its string representation changes accordingly. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#totimezone)"
	  },
	  "CH timeZoneOf": {
		"scope": "tinybird,sql",
		"prefix": [
		  "timeZoneOf"
		],
		"body": [
		  "timeZoneOf(${0:value})"
		],
		"description": "**timeZoneOf(value)** \n\nReturns the timezone name of DateTime data types. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#timezoneof)"
	  },
	  "CH timeZoneOffset": {
		"scope": "tinybird,sql",
		"prefix": [
		  "timeZoneOffset"
		],
		"body": [
		  "timeZoneOffset(${0:value})"
		],
		"description": "**timeZoneOffset(value)** \n\nReturns a timezone offset in seconds from [UTC](https://en.wikipedia.org/wiki/Coordinated_Universal_Time). The function takes into account [daylight saving time](https://en.wikipedia.org/wiki/Daylight_saving_time) and historical timezone changes at the specified date and time. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#timezoneoffset)"
	  },
	  "CH toYear": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toYear"
		],
		"body": [
		  "toYear(${0:x})"
		],
		"description": "**toYear(x)** \n\nConverts a date or date with time to a UInt16 number containing the year number (AD). [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#toyear)"
	  },
	  "CH toQuarter": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toQuarter"
		],
		"body": [
		  "toQuarter(${0:x})"
		],
		"description": "**toQuarter(x)** \n\nConverts a date or date with time to a UInt8 number containing the quarter number. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#toquarter)"
	  },
	  "CH toMonth": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toMonth"
		],
		"body": [
		  "toMonth(${0:x})"
		],
		"description": "**toMonth(x)** \n\nConverts a date or date with time to a UInt8 number containing the month number (1-12). [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#tomonth)"
	  },
	  "CH toDayOfYear": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toDayOfYear"
		],
		"body": [
		  "toDayOfYear(${0:x})"
		],
		"description": "**toDayOfYear(x)** \n\nConverts a date or date with time to a UInt16 number containing the number of the day of the year (1-366). [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#todayofyear)"
	  },
	  "CH toDayOfMonth": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toDayOfMonth"
		],
		"body": [
		  "toDayOfMonth(${0:x})"
		],
		"description": "**toDayOfMonth(x)** \n\nConverts a date or date with time to a UInt8 number containing the number of the day of the month (1-31). [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#todayofmonth)"
	  },
	  "CH toHour": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toHour"
		],
		"body": [
		  "toHour(${0:x})"
		],
		"description": "**toHour(x)** \n\nConverts a date with time to a UInt8 number containing the number of the hour in 24-hour time (0-23). [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#tohour)"
	  },
	  "CH toMinute": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toMinute"
		],
		"body": [
		  "toMinute(${0:x})"
		],
		"description": "**toMinute(x)** \n\nConverts a date with time to a UInt8 number containing the number of the minute of the hour (0-59). [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#tominute)"
	  },
	  "CH toSecond": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toSecond"
		],
		"body": [
		  "toSecond(${0:x})"
		],
		"description": "**toSecond(x)** \n\nConverts a date with time to a UInt8 number containing the number of the second in the minute (0-59). [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#tosecond)"
	  },
	  "CH toUnixTimestamp": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toUnixTimestamp"
		],
		"body": [
		  "toUnixTimestamp(${0:datetime})"
		],
		"description": "**toUnixTimestamp(datetime)** \n\nFor DateTime argument: converts value to the number with type UInt32 -- Unix Timestamp (https://en.wikipedia.org/wiki/Unix_time). [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#tounixtimestamp)"
	  },
	  "CH toStartOfYear": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toStartOfYear"
		],
		"body": [
		  "toStartOfYear(${0:x})"
		],
		"description": "**toStartOfYear(x)** \n\nRounds down a date or date with time to the first day of the year. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#tostartofyear)"
	  },
	  "CH toStartOfISOYear": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toStartOfISOYear"
		],
		"body": [
		  "toStartOfISOYear(${0:x})"
		],
		"description": "**toStartOfISOYear(x)** \n\nRounds down a date or date with time to the first day of ISO year. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#tostartofisoyear)"
	  },
	  "CH toStartOfQuarter": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toStartOfQuarter"
		],
		"body": [
		  "toStartOfQuarter(${0:x})"
		],
		"description": "**toStartOfQuarter(x)** \n\nRounds down a date or date with time to the first day of the quarter. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#tostartofquarter)"
	  },
	  "CH toStartOfMonth": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toStartOfMonth"
		],
		"body": [
		  "toStartOfMonth(${0:x})"
		],
		"description": "**toStartOfMonth(x)** \n\nRounds down a date or date with time to the first day of the month. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#tostartofmonth)"
	  },
	  "CH toLastDayOfMonth": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toLastDayOfMonth"
		],
		"body": [
		  "toLastDayOfMonth(${0:x})"
		],
		"description": "**toLastDayOfMonth(x)** \n\nRounds a date, or date with time, to the last day of the month. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#tolastdayofmonth)"
	  },
	  "CH toMonday": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toMonday"
		],
		"body": [
		  "toMonday(${0:x})"
		],
		"description": "**toMonday(x)** \n\nRounds down a date, or date with time, to the nearest Monday. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#tomonday)"
	  },
	  "CH toStartOfWeek": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toStartOfWeek"
		],
		"body": [
		  "toStartOfWeek(${0:t}[, ${1:mode}[, ${0:t}imezone]])"
		],
		"description": "**toStartOfWeek(t[, mode[, timezone]])** \n\nRounds a date or date with time down to the nearest Sunday or Monday. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#tostartofweek)"
	  },
	  "CH toStartOfDay": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toStartOfDay"
		],
		"body": [
		  "toStartOfDay(${0:x})"
		],
		"description": "**toStartOfDay(x)** \n\nRounds down a date with time to the start of the day. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#tostartofday)"
	  },
	  "CH toStartOfHour": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toStartOfHour"
		],
		"body": [
		  "toStartOfHour(${0:x})"
		],
		"description": "**toStartOfHour(x)** \n\nRounds down a date with time to the start of the hour. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#tostartofhour)"
	  },
	  "CH toStartOfMinute": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toStartOfMinute"
		],
		"body": [
		  "toStartOfMinute(${0:x})"
		],
		"description": "**toStartOfMinute(x)** \n\nRounds down a date with time to the start of the minute. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#tostartofminute)"
	  },
	  "CH toStartOfSecond": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toStartOfSecond"
		],
		"body": [
		  "toStartOfSecond(${0:value}, ${1:[timezone}])"
		],
		"description": "**toStartOfSecond(value, [timezone])** \n\nTruncates sub-seconds. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#tostartofsecond)"
	  },
	  "CH toStartOfFiveMinutes": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toStartOfFiveMinutes"
		],
		"body": [
		  "toStartOfFiveMinutes(${0:x})"
		],
		"description": "**toStartOfFiveMinutes(x)** \n\nRounds down a date with time to the start of the five-minute interval. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#tostartoffiveminutes)"
	  },
	  "CH toStartOfTenMinutes": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toStartOfTenMinutes"
		],
		"body": [
		  "toStartOfTenMinutes(${0:x})"
		],
		"description": "**toStartOfTenMinutes(x)** \n\nRounds down a date with time to the start of the ten-minute interval. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#tostartoftenminutes)"
	  },
	  "CH toStartOfFifteenMinutes": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toStartOfFifteenMinutes"
		],
		"body": [
		  "toStartOfFifteenMinutes(${0:x})"
		],
		"description": "**toStartOfFifteenMinutes(x)** \n\nRounds down the date with time to the start of the fifteen-minute interval. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#tostartoffifteenminutes)"
	  },
	  "CH toStartOfInterval": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toStartOfInterval"
		],
		"body": [
		  "toStartOfInterval(${0:time_or_data}, ${1:INTERVAL x unit} [, ${2:time_zone}])"
		],
		"description": "**toStartOfInterval(time_or_data, INTERVAL x unit [, time_zone])** \n\nThis is a generalization of other functions named \\`toStartOf*\\`. For example, [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#tostartofintervaltime_or_data)"
	  },
	  "CH toTime": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toTime"
		],
		"body": [
		  "toTime(${0:x})"
		],
		"description": "**toTime(x)** \n\nConverts a date with time to a certain fixed date, while preserving the time. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#totime)"
	  },
	  "CH toRelativeYearNum": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toRelativeYearNum"
		],
		"body": [
		  "toRelativeYearNum(${0:x})"
		],
		"description": "**toRelativeYearNum(x)** \n\nConverts a date, or date with time, to the number of the year, starting from a certain fixed point in the past. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#torelativeyearnum)"
	  },
	  "CH toRelativeQuarterNum": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toRelativeQuarterNum"
		],
		"body": [
		  "toRelativeQuarterNum(${0:x})"
		],
		"description": "**toRelativeQuarterNum(x)** \n\nConverts a date, or date with time, to the number of the quarter, starting from a certain fixed point in the past. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#torelativequarternum)"
	  },
	  "CH toRelativeMonthNum": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toRelativeMonthNum"
		],
		"body": [
		  "toRelativeMonthNum(${0:x})"
		],
		"description": "**toRelativeMonthNum(x)** \n\nConverts a date, or date with time, to the number of the month, starting from a certain fixed point in the past. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#torelativemonthnum)"
	  },
	  "CH toRelativeWeekNum": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toRelativeWeekNum"
		],
		"body": [
		  "toRelativeWeekNum(${0:x})"
		],
		"description": "**toRelativeWeekNum(x)** \n\nConverts a date, or date with time, to the number of the week, starting from a certain fixed point in the past. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#torelativeweeknum)"
	  },
	  "CH toRelativeDayNum": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toRelativeDayNum"
		],
		"body": [
		  "toRelativeDayNum(${0:x})"
		],
		"description": "**toRelativeDayNum(x)** \n\nConverts a date, or date with time, to the number of the day, starting from a certain fixed point in the past. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#torelativedaynum)"
	  },
	  "CH toRelativeHourNum": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toRelativeHourNum"
		],
		"body": [
		  "toRelativeHourNum(${0:x})"
		],
		"description": "**toRelativeHourNum(x)** \n\nConverts a date, or date with time, to the number of the hour, starting from a certain fixed point in the past. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#torelativehournum)"
	  },
	  "CH toRelativeMinuteNum": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toRelativeMinuteNum"
		],
		"body": [
		  "toRelativeMinuteNum(${0:x})"
		],
		"description": "**toRelativeMinuteNum(x)** \n\nConverts a date, or date with time, to the number of the minute, starting from a certain fixed point in the past. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#torelativeminutenum)"
	  },
	  "CH toRelativeSecondNum": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toRelativeSecondNum"
		],
		"body": [
		  "toRelativeSecondNum(${0:x})"
		],
		"description": "**toRelativeSecondNum(x)** \n\nConverts a date, or date with time, to the number of the second, starting from a certain fixed point in the past. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#torelativesecondnum)"
	  },
	  "CH toISOYear": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toISOYear"
		],
		"body": [
		  "toISOYear(${0:x})"
		],
		"description": "**toISOYear(x)** \n\nConverts a date, or date with time, to a UInt16 number containing the ISO Year number. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#toisoyear)"
	  },
	  "CH toISOWeek": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toISOWeek"
		],
		"body": [
		  "toISOWeek(${0:x})"
		],
		"description": "**toISOWeek(x)** \n\nConverts a date, or date with time, to a UInt8 number containing the ISO Week number. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#toisoweek)"
	  },
	  "CH toWeek": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toWeek"
		],
		"body": [
		  "toWeek()"
		],
		"description": "**toWeek()** \n\nReturns year and week for a date. The year in the result may be different from the year in the date argument for the first and the last week of the year. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#toyearweek)"
	  },
	  "CH age": {
		"scope": "tinybird,sql",
		"prefix": [
		  "age"
		],
		"body": [
		  "age(${0:'unit'}, ${1:startdate}, ${2:enddate}, ${3:[timezone}])"
		],
		"description": "**age('unit', startdate, enddate, [timezone])** \n\nReturns the \\`unit\\` component of the difference between \\`startdate\\` and \\`enddate\\`. The difference is calculated using a precision of 1 second. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#age)"
	  },
	  "CH date_trunc": {
		"scope": "tinybird,sql",
		"prefix": [
		  "date_trunc"
		],
		"body": [
		  "date_trunc(${0:unit}, ${1:value}[, ${2:timezone}])"
		],
		"description": "**date_trunc(unit, value[, timezone])** \n\nTruncates date and time data to the specified part of date. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#date_trunc)"
	  },
	  "CH date_add": {
		"scope": "tinybird,sql",
		"prefix": [
		  "date_add"
		],
		"body": [
		  "date_add(${0:unit}, ${1:value}, ${2:date})"
		],
		"description": "**date_add(unit, value, date)** \n\nAdds the time interval or date interval to the provided date or date with time. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#date_add)"
	  },
	  "CH date_sub": {
		"scope": "tinybird,sql",
		"prefix": [
		  "date_sub"
		],
		"body": [
		  "date_sub(${0:unit}, ${1:value}, ${2:date})"
		],
		"description": "**date_sub(unit, value, date)** \n\nSubtracts the time interval or date interval from the provided date or date with time. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#date_sub)"
	  },
	  "CH timestamp_add": {
		"scope": "tinybird,sql",
		"prefix": [
		  "timestamp_add"
		],
		"body": [
		  "timestamp_add(${0:date}, ${1:INTERVAL value unit})"
		],
		"description": "**timestamp_add(date, INTERVAL value unit)** \n\nAdds the specified time value with the provided date or date time value.\n\n\n                            select timestamp_add(toDate('2018-01-01'), INTERVAL 3 MONTH);\n                            \n                             [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#timestamp_add)"
	  },
	  "CH timestamp_sub": {
		"scope": "tinybird,sql",
		"prefix": [
		  "timestamp_sub"
		],
		"body": [
		  "timestamp_sub(${0:unit}, ${1:value}, ${2:date})"
		],
		"description": "**timestamp_sub(unit, value, date)** \n\nSubtracts the time interval from the provided date or date with time.\n\n\n                            select timestamp_sub(MONTH, 5, toDateTime('2018-12-18 01:02:03'));\n                            \n                             [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#timestamp_sub)"
	  },
	  "CH now": {
		"scope": "tinybird,sql",
		"prefix": [
		  "now"
		],
		"body": [
		  "now([${0:timezone}])"
		],
		"description": "**now([timezone])** \n\nReturns the current date and time at the moment of query analysis. The function is a constant expression. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#now)"
	  },
	  "CH now64": {
		"scope": "tinybird,sql",
		"prefix": [
		  "now64"
		],
		"body": [
		  "now64([${0:scale}], ${1:[timezone}])"
		],
		"description": "**now64([scale], [timezone])** \n\nReturns the current date and time with sub-second precision at the moment of query analysis. The function is a constant expression. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#now64)"
	  },
	  "CH nowInBlock": {
		"scope": "tinybird,sql",
		"prefix": [
		  "nowInBlock"
		],
		"body": [
		  "nowInBlock([${0:timezone}])"
		],
		"description": "**nowInBlock([timezone])** \n\nReturns the current date and time at the moment of processing of each block of data. In contrast to the function [now](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions#now), it is not a constant expression, and the returned value will be different in different blocks for long-running queries. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#nowinblock)"
	  },
	  "CH today": {
		"scope": "tinybird,sql",
		"prefix": [
		  "today"
		],
		"body": [
		  "today(${0:x})"
		],
		"description": "**today(x)** \n\nAccepts zero arguments and returns the current date at one of the moments of query analysis. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#today)"
	  },
	  "CH yesterday": {
		"scope": "tinybird,sql",
		"prefix": [
		  "yesterday"
		],
		"body": [
		  "yesterday(${0:x})"
		],
		"description": "**yesterday(x)** \n\nAccepts zero arguments and returns yesterday's date at one of the moments of query analysis. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#yesterday)"
	  },
	  "CH timeSlot": {
		"scope": "tinybird,sql",
		"prefix": [
		  "timeSlot"
		],
		"body": [
		  "timeSlot(${0:x})"
		],
		"description": "**timeSlot(x)** \n\nRounds the time to the half hour. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#timeslot)"
	  },
	  "CH toYYYYMM": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toYYYYMM"
		],
		"body": [
		  "toYYYYMM(${0:x})"
		],
		"description": "**toYYYYMM(x)** \n\nConverts a date or date with time to a UInt32 number containing the year and month number (YYYY * 100 + MM). [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#toyyyymm)"
	  },
	  "CH toYYYYMMDD": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toYYYYMMDD"
		],
		"body": [
		  "toYYYYMMDD(${0:x})"
		],
		"description": "**toYYYYMMDD(x)** \n\nConverts a date or date with time to a UInt32 number containing the year and month number (YYYY * 10000 + MM * 100 + DD). [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#toyyyymmdd)"
	  },
	  "CH toYYYYMMDDhhmmss": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toYYYYMMDDhhmmss"
		],
		"body": [
		  "toYYYYMMDDhhmmss(${0:x})"
		],
		"description": "**toYYYYMMDDhhmmss(x)** \n\nConverts a date or date with time to a UInt64 number containing the year and month number (YYYY * 10000000000 + MM * 100000000 + DD * 1000000 + hh * 10000 + mm * 100 + ss). [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#toyyyymmddhhmmss)"
	  },
	  "CH addYears": {
		"scope": "tinybird,sql",
		"prefix": [
		  "addYears"
		],
		"body": [
		  "addYears(${0:x})"
		],
		"description": "**addYears(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#addyears)"
	  },
	  "CH addMonths": {
		"scope": "tinybird,sql",
		"prefix": [
		  "addMonths"
		],
		"body": [
		  "addMonths(${0:x})"
		],
		"description": "**addMonths(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#addyears)"
	  },
	  "CH addWeeks": {
		"scope": "tinybird,sql",
		"prefix": [
		  "addWeeks"
		],
		"body": [
		  "addWeeks(${0:x})"
		],
		"description": "**addWeeks(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#addyears)"
	  },
	  "CH addDays": {
		"scope": "tinybird,sql",
		"prefix": [
		  "addDays"
		],
		"body": [
		  "addDays(${0:x})"
		],
		"description": "**addDays(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#addyears)"
	  },
	  "CH addHours": {
		"scope": "tinybird,sql",
		"prefix": [
		  "addHours"
		],
		"body": [
		  "addHours(${0:x})"
		],
		"description": "**addHours(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#addyears)"
	  },
	  "CH addMinutes": {
		"scope": "tinybird,sql",
		"prefix": [
		  "addMinutes"
		],
		"body": [
		  "addMinutes(${0:x})"
		],
		"description": "**addMinutes(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#addyears)"
	  },
	  "CH addSeconds": {
		"scope": "tinybird,sql",
		"prefix": [
		  "addSeconds"
		],
		"body": [
		  "addSeconds(${0:x})"
		],
		"description": "**addSeconds(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#addyears)"
	  },
	  "CH addQuarters": {
		"scope": "tinybird,sql",
		"prefix": [
		  "addQuarters"
		],
		"body": [
		  "addQuarters(${0:x})"
		],
		"description": "**addQuarters(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#addyears)"
	  },
	  "CH subtractYears": {
		"scope": "tinybird,sql",
		"prefix": [
		  "subtractYears"
		],
		"body": [
		  "subtractYears(${0:x})"
		],
		"description": "**subtractYears(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#subtractyears)"
	  },
	  "CH subtractMonths": {
		"scope": "tinybird,sql",
		"prefix": [
		  "subtractMonths"
		],
		"body": [
		  "subtractMonths(${0:x})"
		],
		"description": "**subtractMonths(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#subtractyears)"
	  },
	  "CH subtractWeeks": {
		"scope": "tinybird,sql",
		"prefix": [
		  "subtractWeeks"
		],
		"body": [
		  "subtractWeeks(${0:x})"
		],
		"description": "**subtractWeeks(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#subtractyears)"
	  },
	  "CH subtractDays": {
		"scope": "tinybird,sql",
		"prefix": [
		  "subtractDays"
		],
		"body": [
		  "subtractDays(${0:x})"
		],
		"description": "**subtractDays(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#subtractyears)"
	  },
	  "CH subtractHours": {
		"scope": "tinybird,sql",
		"prefix": [
		  "subtractHours"
		],
		"body": [
		  "subtractHours(${0:x})"
		],
		"description": "**subtractHours(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#subtractyears)"
	  },
	  "CH subtractMinutes": {
		"scope": "tinybird,sql",
		"prefix": [
		  "subtractMinutes"
		],
		"body": [
		  "subtractMinutes(${0:x})"
		],
		"description": "**subtractMinutes(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#subtractyears)"
	  },
	  "CH subtractSeconds": {
		"scope": "tinybird,sql",
		"prefix": [
		  "subtractSeconds"
		],
		"body": [
		  "subtractSeconds(${0:x})"
		],
		"description": "**subtractSeconds(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#subtractyears)"
	  },
	  "CH subtractQuarters": {
		"scope": "tinybird,sql",
		"prefix": [
		  "subtractQuarters"
		],
		"body": [
		  "subtractQuarters(${0:x})"
		],
		"description": "**subtractQuarters(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#subtractyears)"
	  },
	  "CH timeSlots": {
		"scope": "tinybird,sql",
		"prefix": [
		  "timeSlots"
		],
		"body": [
		  "timeSlots(${0:StartTime}, ${1:Duration},[, ${3:Size}])"
		],
		"description": "**timeSlots(StartTime, Duration,[, Size])** \n\nFor a time interval starting at 'StartTime' and continuing for 'Duration' seconds, it returns an array of moments in time, consisting of points from this interval rounded down to the 'Size' in seconds. 'Size' is an optional parameter set to 1800 (30 minutes) by default. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#timeslotsstarttime)"
	  },
	  "CH formatDateTime": {
		"scope": "tinybird,sql",
		"prefix": [
		  "formatDateTime"
		],
		"body": [
		  "formatDateTime(${0:Time}, ${1:Format}[, ${0:Time}zone])"
		],
		"description": "**formatDateTime(Time, Format[, Timezone])** \n\nFormats a Time according to the given Format string. Format is a constant expression, so you cannot have multiple formats for a single result column. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#formatdatetime)"
	  },
	  "CH \\formatDateTimeInJodaSyntax": {
		"scope": "tinybird,sql",
		"prefix": [
		  "\\formatDateTimeInJodaSyntax"
		],
		"body": [
		  "\\formatDateTimeInJodaSyntax(${0:toDateTime('2010-01-04 12:34:56'}), 'yyyy-MM-dd HH:mm:ss')\\"
		],
		"description": "**\\formatDateTimeInJodaSyntax(toDateTime('2010-01-04 12:34:56'), 'yyyy-MM-dd HH:mm:ss')\\** \n\nSimilar to formatDateTime, except that it formats datetime in Joda style instead of MySQL style. Refer to https://joda-time.sourceforge.net/apidocs/org/joda/time/format/DateTimeFormat.html. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#formatdatetimeinjodasyntax)"
	  },
	  "CH dateName": {
		"scope": "tinybird,sql",
		"prefix": [
		  "dateName"
		],
		"body": [
		  "dateName(${0:${1:date}_part}, ${1:date})"
		],
		"description": "**dateName(date_part, date)** \n\nReturns specified part of date. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#datename)"
	  },
	  "CH monthName": {
		"scope": "tinybird,sql",
		"prefix": [
		  "monthName"
		],
		"body": [
		  "monthName(${0:date})"
		],
		"description": "**monthName(date)** \n\nReturns name of the month. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#monthname)"
	  },
	  "CH \\FROM_UNIXTIME": {
		"scope": "tinybird,sql",
		"prefix": [
		  "\\FROM_UNIXTIME"
		],
		"body": [
		  "\\FROM_UNIXTIME(${0:423543535})\\"
		],
		"description": "**\\FROM_UNIXTIME(423543535)\\** \n\nFunction converts Unix timestamp to a calendar date and a time of a day. When there is only a single argument of Integer type. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#from_unixtime)"
	  },
	  "CH \\fromUnixTimestampInJodaSyntax": {
		"scope": "tinybird,sql",
		"prefix": [
		  "\\fromUnixTimestampInJodaSyntax"
		],
		"body": [
		  "\\fromUnixTimestampInJodaSyntax(${0:1669804872}, ${1:'yyyy-MM-dd HH:mm:ss'}, ${2:'UTC'})\\"
		],
		"description": "**\\fromUnixTimestampInJodaSyntax(1669804872, 'yyyy-MM-dd HH:mm:ss', 'UTC')\\** \n\nSimilar to FROM_UNIXTIME, except that it formats time in Joda style instead of MySQL style. Refer to https://joda-time.sourceforge.net/apidocs/org/joda/time/format/DateTimeFormat.html. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#fromunixtimestampinjodasyntax)"
	  },
	  "CH toModifiedJulianDay": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toModifiedJulianDay"
		],
		"body": [
		  "toModifiedJulianDay(${0:date})"
		],
		"description": "**toModifiedJulianDay(date)** \n\nConverts a [Proleptic Gregorian calendar](https://en.wikipedia.org/wiki/Proleptic_Gregorian_calendar) date in text form \\`YYYY-MM-DD\\` to a [Modified Julian Day](https://en.wikipedia.org/wiki/Julian_day#Variants) number in Int32. This function supports date from \\`0000-01-01\\` to \\`9999-12-31\\`. It raises an exception if the argument cannot be parsed as a date, or the date is invalid. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#tomodifiedjulianday)"
	  },
	  "CH toModifiedJulianDayOrNull": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toModifiedJulianDayOrNull"
		],
		"body": [
		  "toModifiedJulianDayOrNull(${0:date})"
		],
		"description": "**toModifiedJulianDayOrNull(date)** \n\nSimilar to [toModifiedJulianDay()](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions#tomodifiedjulianday), but instead of raising exceptions it returns \\`NULL\\`. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#tomodifiedjuliandayornull)"
	  },
	  "CH fromModifiedJulianDay": {
		"scope": "tinybird,sql",
		"prefix": [
		  "fromModifiedJulianDay"
		],
		"body": [
		  "fromModifiedJulianDay(${0:day})"
		],
		"description": "**fromModifiedJulianDay(day)** \n\nConverts a [Modified Julian Day](https://en.wikipedia.org/wiki/Julian_day#Variants) number to a [Proleptic Gregorian calendar](https://en.wikipedia.org/wiki/Proleptic_Gregorian_calendar) date in text form \\`YYYY-MM-DD\\`. This function supports day number from \\`-678941\\` to \\`2973119\\` (which represent 0000-01-01 and 9999-12-31 respectively). It raises an exception if the day number is outside of the supported range. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/date-time-functions/#frommodifiedjulianday)"
	  },
	  "CH and": {
		"scope": "tinybird,sql",
		"prefix": [
		  "and"
		],
		"body": [
		  "and(${0:val1}, ${1:val2}...)"
		],
		"description": "**and(val1, val2...)** \n\nCalculates the result of the logical conjunction between two or more values. Corresponds to Logical AND Operator.\n\n\n                            You can use the [short_circuit_function_evaluation](../../operations/settings/settings.md#short-circuit-function-evaluation) setting to calculate the \\`and\\` function according to a short scheme. If this setting is enabled, \\`vali\\` is evaluated only on rows where \\`(val1 AND val2 AND ... AND val{i-1})\\` is true. For example, an exception about division by zero is not thrown when executing the query \\` [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/logical-functions/#and)"
	  },
	  "CH not": {
		"scope": "tinybird,sql",
		"prefix": [
		  "not"
		],
		"body": [
		  "not(${0:val})"
		],
		"description": "**not(val)** \n\nCalculates the result of the logical negation of the value. Corresponds to Logical Negation Operator. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/logical-functions/#not)"
	  },
	  "CH floor": {
		"scope": "tinybird,sql",
		"prefix": [
		  "floor"
		],
		"body": [
		  "floor(${0:x}[, ${1:N}])"
		],
		"description": "**floor(x[, N])** \n\nReturns the largest round number that is less than or equal to \\`x\\`. A round number is a multiple of 1/10N, or the nearest number of the appropriate data type if 1 / 10N isn't exact. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/rounding-functions/#floorx[)"
	  },
	  "CH ceil": {
		"scope": "tinybird,sql",
		"prefix": [
		  "ceil"
		],
		"body": [
		  "ceil(${0:x}[, ${1:N}])"
		],
		"description": "**ceil(x[, N])** \n\nReturns the smallest round number that is greater than or equal to \\`x\\`. In every other way, it is the same as the \\`floor\\` function (see above). [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/rounding-functions/#ceilx[)"
	  },
	  "CH trunc": {
		"scope": "tinybird,sql",
		"prefix": [
		  "trunc"
		],
		"body": [
		  "trunc(${0:x}[, ${1:N}])"
		],
		"description": "**trunc(x[, N])** \n\nReturns the round number with largest absolute value that has an absolute value less than or equal to \\`x\\`'s. In every other way, it is the same as the 'floor' function (see above). [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/rounding-functions/#truncx[)"
	  },
	  "CH round": {
		"scope": "tinybird,sql",
		"prefix": [
		  "round"
		],
		"body": [
		  "round(${0:x}[, ${1:N}])"
		],
		"description": "**round(x[, N])** \n\nRounds a value to a specified number of decimal places. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/rounding-functions/#roundx[)"
	  },
	  "CH roundBankers": {
		"scope": "tinybird,sql",
		"prefix": [
		  "roundBankers"
		],
		"body": [
		  "roundBankers(${0:expression} [, ${1:decimal_places}])"
		],
		"description": "**roundBankers(expression [, decimal_places])** \n\nRounds a number to a specified decimal position. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/rounding-functions/#roundbankers)"
	  },
	  "CH roundToExp2": {
		"scope": "tinybird,sql",
		"prefix": [
		  "roundToExp2"
		],
		"body": [
		  "roundToExp2(${0:num})"
		],
		"description": "**roundToExp2(num)** \n\nAccepts a number. If the number is less than one, it returns 0. Otherwise, it rounds the number down to the nearest (whole non-negative) degree of two. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/rounding-functions/#roundtoexp2num)"
	  },
	  "CH roundDuration": {
		"scope": "tinybird,sql",
		"prefix": [
		  "roundDuration"
		],
		"body": [
		  "roundDuration(${0:num})"
		],
		"description": "**roundDuration(num)** \n\nAccepts a number. If the number is less than one, it returns 0. Otherwise, it rounds the number down to numbers from the set: 1, 10, 30, 60, 120, 180, 240, 300, 600, 1200, 1800, 3600, 7200, 18000, 36000. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/rounding-functions/#rounddurationnum)"
	  },
	  "CH roundAge": {
		"scope": "tinybird,sql",
		"prefix": [
		  "roundAge"
		],
		"body": [
		  "roundAge(${0:num})"
		],
		"description": "**roundAge(num)** \n\nAccepts a number. If the number is less than 18, it returns 0. Otherwise, it rounds the number down to a number from the set: 18, 25, 35, 45, 55. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/rounding-functions/#roundagenum)"
	  },
	  "CH uniqThetaUnion": {
		"scope": "tinybird,sql",
		"prefix": [
		  "uniqThetaUnion"
		],
		"body": [
		  "uniqThetaUnion(${0:x})"
		],
		"description": "**uniqThetaUnion(x)** \n\nTwo uniqThetaSketch objects to do union calculation(set operation \u222a), the result is a new uniqThetaSketch. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/uniqtheta-functions/#uniqthetaunion)"
	  },
	  "CH uniqThetaIntersect": {
		"scope": "tinybird,sql",
		"prefix": [
		  "uniqThetaIntersect"
		],
		"body": [
		  "uniqThetaIntersect(${0:x})"
		],
		"description": "**uniqThetaIntersect(x)** \n\nTwo uniqThetaSketch objects to do intersect calculation(set operation \u2229), the result is a new uniqThetaSketch. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/uniqtheta-functions/#uniqthetaintersect)"
	  },
	  "CH L1Norm": {
		"scope": "tinybird,sql",
		"prefix": [
		  "L1Norm"
		],
		"body": [
		  "L1Norm(${0:vector})"
		],
		"description": "**L1Norm(vector)** \n\nCalculates the sum of absolute values of a vector. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/distance-functions/#l1norm)"
	  },
	  "CH L2Norm": {
		"scope": "tinybird,sql",
		"prefix": [
		  "L2Norm"
		],
		"body": [
		  "L2Norm(${0:vector})"
		],
		"description": "**L2Norm(vector)** \n\nCalculates the square root of the sum of the squares of the vector values. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/distance-functions/#l2norm)"
	  },
	  "CH LinfNorm": {
		"scope": "tinybird,sql",
		"prefix": [
		  "LinfNorm"
		],
		"body": [
		  "LinfNorm(${0:vector})"
		],
		"description": "**LinfNorm(vector)** \n\nCalculates the maximum of absolute values of a vector. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/distance-functions/#linfnorm)"
	  },
	  "CH LpNorm": {
		"scope": "tinybird,sql",
		"prefix": [
		  "LpNorm"
		],
		"body": [
		  "LpNorm(${0:vector}, ${1:p})"
		],
		"description": "**LpNorm(vector, p)** \n\nCalculates the root of \\`p\\`-th power of the sum of the absolute values of a vector in the power of \\`p\\`. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/distance-functions/#lpnorm)"
	  },
	  "CH L1Distance": {
		"scope": "tinybird,sql",
		"prefix": [
		  "L1Distance"
		],
		"body": [
		  "L1Distance(${0:vector1}, ${1:vector2})"
		],
		"description": "**L1Distance(vector1, vector2)** \n\nCalculates the distance between two points (the values of the vectors are the coordinates) in \\`L1\\` space (1-norm ([taxicab geometry](https://en.wikipedia.org/wiki/Taxicab_geometry) distance)). [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/distance-functions/#l1distance)"
	  },
	  "CH L2Distance": {
		"scope": "tinybird,sql",
		"prefix": [
		  "L2Distance"
		],
		"body": [
		  "L2Distance(${0:vector1}, ${1:vector2})"
		],
		"description": "**L2Distance(vector1, vector2)** \n\nCalculates the distance between two points (the values of the vectors are the coordinates) in Euclidean space ([Euclidean distance](https://en.wikipedia.org/wiki/Euclidean_distance)). [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/distance-functions/#l2distance)"
	  },
	  "CH LinfDistance": {
		"scope": "tinybird,sql",
		"prefix": [
		  "LinfDistance"
		],
		"body": [
		  "LinfDistance(${0:vector1}, ${1:vector2})"
		],
		"description": "**LinfDistance(vector1, vector2)** \n\nCalculates the distance between two points (the values of the vectors are the coordinates) in \\`L_{inf}\\` space ([maximum norm](https://en.wikipedia.org/wiki/Norm_(mathematics)#Maximum_norm_(special_case_of:_infinity_norm,_uniform_norm,_or_supremum_norm))). [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/distance-functions/#linfdistance)"
	  },
	  "CH LpDistance": {
		"scope": "tinybird,sql",
		"prefix": [
		  "LpDistance"
		],
		"body": [
		  "LpDistance(${0:vector1}, ${1:vector2}, ${2:p})"
		],
		"description": "**LpDistance(vector1, vector2, p)** \n\nCalculates the distance between two points (the values of the vectors are the coordinates) in \\`Lp\\` space ([p-norm distance](https://en.wikipedia.org/wiki/Norm_(mathematics)#p-norm)). [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/distance-functions/#lpdistance)"
	  },
	  "CH L1Normalize": {
		"scope": "tinybird,sql",
		"prefix": [
		  "L1Normalize"
		],
		"body": [
		  "L1Normalize(${0:tuple})"
		],
		"description": "**L1Normalize(tuple)** \n\nCalculates the unit vector of a given vector (the values of the tuple are the coordinates) in \\`L1\\` space ([taxicab geometry](https://en.wikipedia.org/wiki/Taxicab_geometry)). [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/distance-functions/#l1normalize)"
	  },
	  "CH L2Normalize": {
		"scope": "tinybird,sql",
		"prefix": [
		  "L2Normalize"
		],
		"body": [
		  "L2Normalize(${0:tuple})"
		],
		"description": "**L2Normalize(tuple)** \n\nCalculates the unit vector of a given vector (the values of the tuple are the coordinates) in Euclidean space (using [Euclidean distance](https://en.wikipedia.org/wiki/Euclidean_distance)). [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/distance-functions/#l2normalize)"
	  },
	  "CH LinfNormalize": {
		"scope": "tinybird,sql",
		"prefix": [
		  "LinfNormalize"
		],
		"body": [
		  "LinfNormalize(${0:tuple})"
		],
		"description": "**LinfNormalize(tuple)** \n\nCalculates the unit vector of a given vector (the values of the tuple are the coordinates) in \\`L_{inf}\\` space (using [maximum norm](https://en.wikipedia.org/wiki/Norm_(mathematics)#Maximum_norm_(special_case_of:_infinity_norm,_uniform_norm,_or_supremum_norm))). [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/distance-functions/#linfnormalize)"
	  },
	  "CH LpNormalize": {
		"scope": "tinybird,sql",
		"prefix": [
		  "LpNormalize"
		],
		"body": [
		  "LpNormalize(${0:tu${1:p}le}, ${1:p})"
		],
		"description": "**LpNormalize(tuple, p)** \n\nCalculates the unit vector of a given vector (the values of the tuple are the coordinates) in \\`Lp\\` space (using [p-norm](https://en.wikipedia.org/wiki/Norm_(mathematics)#p-norm)). [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/distance-functions/#lpnormalize)"
	  },
	  "CH bitmapBuild": {
		"scope": "tinybird,sql",
		"prefix": [
		  "bitmapBuild"
		],
		"body": [
		  "bitmapBuild(${0:x})"
		],
		"description": "**bitmapBuild(x)** \n\nBuild a bitmap from unsigned integer array. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/bitmap-functions/#bitmapbuild)"
	  },
	  "CH bitmapToArray": {
		"scope": "tinybird,sql",
		"prefix": [
		  "bitmapToArray"
		],
		"body": [
		  "bitmapToArray(${0:x})"
		],
		"description": "**bitmapToArray(x)** \n\nConvert bitmap to integer array. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/bitmap-functions/#bitmaptoarray)"
	  },
	  "CH bitmapSubsetInRange": {
		"scope": "tinybird,sql",
		"prefix": [
		  "bitmapSubsetInRange"
		],
		"body": [
		  "bitmapSubsetInRange(${0:x})"
		],
		"description": "**bitmapSubsetInRange(x)** \n\nReturn subset in specified range (not include the range_end). [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/bitmap-functions/#bitmapsubsetinrange)"
	  },
	  "CH bitmapSubsetLimit": {
		"scope": "tinybird,sql",
		"prefix": [
		  "bitmapSubsetLimit"
		],
		"body": [
		  "bitmapSubsetLimit(${0:bitmap}, ${1:range_start}, ${2:cardinality_limit})"
		],
		"description": "**bitmapSubsetLimit(bitmap, range_start, cardinality_limit)** \n\nCreates a subset of bitmap with n elements taken between \\`range_start\\` and \\`cardinality_limit\\`. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/bitmap-functions/#bitmapsubsetlimit)"
	  },
	  "CH subBitmap": {
		"scope": "tinybird,sql",
		"prefix": [
		  "subBitmap"
		],
		"body": [
		  "subBitmap(${0:bitmap}, ${1:offset}, ${2:cardinality_limit})"
		],
		"description": "**subBitmap(bitmap, offset, cardinality_limit)** \n\nReturns the bitmap elements, starting from the \\`offset\\` position. The number of returned elements is limited by the \\`cardinality_limit\\` parameter. Analog of the [substring](string-functions.md#substring)) string function, but for bitmap. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/bitmap-functions/#subbitmap)"
	  },
	  "CH bitmapContains": {
		"scope": "tinybird,sql",
		"prefix": [
		  "bitmapContains"
		],
		"body": [
		  "bitmapContains(${0:haystack}, ${1:needle})"
		],
		"description": "**bitmapContains(haystack, needle)** \n\nChecks whether the bitmap contains an element. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/bitmap-functions/#bitmapcontains)"
	  },
	  "CH bitmapHasAny": {
		"scope": "tinybird,sql",
		"prefix": [
		  "bitmapHasAny"
		],
		"body": [
		  "bitmapHasAny(${0:bitmap1}, ${1:bitmap2})"
		],
		"description": "**bitmapHasAny(bitmap1, bitmap2)** \n\nChecks whether two bitmaps have intersection by some elements. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/bitmap-functions/#bitmaphasany)"
	  },
	  "CH bitmapHasAll": {
		"scope": "tinybird,sql",
		"prefix": [
		  "bitmapHasAll"
		],
		"body": [
		  "bitmapHasAll(${0:${1:bitmap}},${0:${1:bitmap}})"
		],
		"description": "**bitmapHasAll(bitmap,bitmap)** \n\nAnalogous to \\`hasAll(array, array)\\` returns 1 if the first bitmap contains all the elements of the second one, 0 otherwise. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/bitmap-functions/#bitmaphasall)"
	  },
	  "CH bitmapCardinality": {
		"scope": "tinybird,sql",
		"prefix": [
		  "bitmapCardinality"
		],
		"body": [
		  "${0:bitmap}Cardinality(${0:bitmap})"
		],
		"description": "**bitmapCardinality(bitmap)** \n\nRetrun bitmap cardinality of type UInt64. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/bitmap-functions/#bitmapcardinality)"
	  },
	  "CH bitmapMin": {
		"scope": "tinybird,sql",
		"prefix": [
		  "bitmapMin"
		],
		"body": [
		  "${0:bitmap}Min(${0:bitmap})"
		],
		"description": "**bitmapMin(bitmap)** \n\nRetrun the smallest value of type UInt64 in the set, UINT32_MAX if the set is empty. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/bitmap-functions/#bitmapmin)"
	  },
	  "CH bitmapMax": {
		"scope": "tinybird,sql",
		"prefix": [
		  "bitmapMax"
		],
		"body": [
		  "${0:bitmap}Max(${0:bitmap})"
		],
		"description": "**bitmapMax(bitmap)** \n\nRetrun the greatest value of type UInt64 in the set, 0 if the set is empty. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/bitmap-functions/#bitmapmax)"
	  },
	  "CH bitmapTransform": {
		"scope": "tinybird,sql",
		"prefix": [
		  "bitmapTransform"
		],
		"body": [
		  "bitmapTransform(${0:bitmap}, ${1:from_array}, ${2:to_array})"
		],
		"description": "**bitmapTransform(bitmap, from_array, to_array)** \n\nTransform an array of values in a bitmap to another array of values, the result is a new bitmap. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/bitmap-functions/#bitmaptransform)"
	  },
	  "CH bitmapAnd": {
		"scope": "tinybird,sql",
		"prefix": [
		  "bitmapAnd"
		],
		"body": [
		  "bitmapAnd(${0:${1:bitmap}},${0:${1:bitmap}})"
		],
		"description": "**bitmapAnd(bitmap,bitmap)** \n\nTwo bitmap and calculation, the result is a new bitmap. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/bitmap-functions/#bitmapand)"
	  },
	  "CH bitmapOr": {
		"scope": "tinybird,sql",
		"prefix": [
		  "bitmapOr"
		],
		"body": [
		  "bitmapOr(${0:${1:bitmap}},${0:${1:bitmap}})"
		],
		"description": "**bitmapOr(bitmap,bitmap)** \n\nTwo bitmap or calculation, the result is a new bitmap. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/bitmap-functions/#bitmapor)"
	  },
	  "CH bitmapXor": {
		"scope": "tinybird,sql",
		"prefix": [
		  "bitmapXor"
		],
		"body": [
		  "bitmapXor(${0:${1:bitmap}},${0:${1:bitmap}})"
		],
		"description": "**bitmapXor(bitmap,bitmap)** \n\nTwo bitmap xor calculation, the result is a new bitmap. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/bitmap-functions/#bitmapxor)"
	  },
	  "CH bitmapAndnot": {
		"scope": "tinybird,sql",
		"prefix": [
		  "bitmapAndnot"
		],
		"body": [
		  "bitmapAndnot(${0:${1:bitmap}},${0:${1:bitmap}})"
		],
		"description": "**bitmapAndnot(bitmap,bitmap)** \n\nTwo bitmap andnot calculation, the result is a new bitmap. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/bitmap-functions/#bitmapandnot)"
	  },
	  "CH bitmapAndCardinality": {
		"scope": "tinybird,sql",
		"prefix": [
		  "bitmapAndCardinality"
		],
		"body": [
		  "bitmapAndCardinality(${0:${1:bitmap}},${0:${1:bitmap}})"
		],
		"description": "**bitmapAndCardinality(bitmap,bitmap)** \n\nTwo bitmap and calculation, return cardinality of type UInt64. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/bitmap-functions/#bitmapandcardinality)"
	  },
	  "CH bitmapOrCardinality": {
		"scope": "tinybird,sql",
		"prefix": [
		  "bitmapOrCardinality"
		],
		"body": [
		  "bitmapOrCardinality(${0:${1:bitmap}},${0:${1:bitmap}})"
		],
		"description": "**bitmapOrCardinality(bitmap,bitmap)** \n\nTwo bitmap or calculation, return cardinality of type UInt64. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/bitmap-functions/#bitmaporcardinality)"
	  },
	  "CH bitmapXorCardinality": {
		"scope": "tinybird,sql",
		"prefix": [
		  "bitmapXorCardinality"
		],
		"body": [
		  "bitmapXorCardinality(${0:${1:bitmap}},${0:${1:bitmap}})"
		],
		"description": "**bitmapXorCardinality(bitmap,bitmap)** \n\nTwo bitmap xor calculation, return cardinality of type UInt64. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/bitmap-functions/#bitmapxorcardinality)"
	  },
	  "CH e": {
		"scope": "tinybird,sql",
		"prefix": [
		  "e"
		],
		"body": [
		  "e()"
		],
		"description": "**e()** \n\nReturns a Float64 number that is close to the number e. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/math-functions/#e)"
	  },
	  "CH pi": {
		"scope": "tinybird,sql",
		"prefix": [
		  "pi"
		],
		"body": [
		  "pi()"
		],
		"description": "**pi()** \n\nReturns a Float64 number that is close to the number \u03c0. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/math-functions/#pi)"
	  },
	  "CH exp": {
		"scope": "tinybird,sql",
		"prefix": [
		  "exp"
		],
		"body": [
		  "e${0:x}p(${0:x})"
		],
		"description": "**exp(x)** \n\nAccepts a numeric argument and returns a Float64 number close to the exponent of the argument. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/math-functions/#expx)"
	  },
	  "CH log": {
		"scope": "tinybird,sql",
		"prefix": [
		  "log"
		],
		"body": [
		  "log(${0:x})"
		],
		"description": "**log(x)** \n\nAccepts a numeric argument and returns a Float64 number close to the natural logarithm of the argument. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/math-functions/#logx)"
	  },
	  "CH exp2": {
		"scope": "tinybird,sql",
		"prefix": [
		  "exp2"
		],
		"body": [
		  "e${0:x}p2(${0:x})"
		],
		"description": "**exp2(x)** \n\nAccepts a numeric argument and returns a Float64 number close to 2 to the power of x. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/math-functions/#exp2x)"
	  },
	  "CH log2": {
		"scope": "tinybird,sql",
		"prefix": [
		  "log2"
		],
		"body": [
		  "log2(${0:x})"
		],
		"description": "**log2(x)** \n\nAccepts a numeric argument and returns a Float64 number close to the binary logarithm of the argument. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/math-functions/#log2x)"
	  },
	  "CH exp10": {
		"scope": "tinybird,sql",
		"prefix": [
		  "exp10"
		],
		"body": [
		  "e${0:x}p10(${0:x})"
		],
		"description": "**exp10(x)** \n\nAccepts a numeric argument and returns a Float64 number close to 10 to the power of x. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/math-functions/#exp10x)"
	  },
	  "CH log10": {
		"scope": "tinybird,sql",
		"prefix": [
		  "log10"
		],
		"body": [
		  "log10(${0:x})"
		],
		"description": "**log10(x)** \n\nAccepts a numeric argument and returns a Float64 number close to the decimal logarithm of the argument. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/math-functions/#log10x)"
	  },
	  "CH sqrt": {
		"scope": "tinybird,sql",
		"prefix": [
		  "sqrt"
		],
		"body": [
		  "sqrt(${0:x})"
		],
		"description": "**sqrt(x)** \n\nAccepts a numeric argument and returns a Float64 number close to the square root of the argument. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/math-functions/#sqrtx)"
	  },
	  "CH cbrt": {
		"scope": "tinybird,sql",
		"prefix": [
		  "cbrt"
		],
		"body": [
		  "cbrt(${0:x})"
		],
		"description": "**cbrt(x)** \n\nAccepts a numeric argument and returns a Float64 number close to the cubic root of the argument. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/math-functions/#cbrtx)"
	  },
	  "CH erf": {
		"scope": "tinybird,sql",
		"prefix": [
		  "erf"
		],
		"body": [
		  "erf(${0:x})"
		],
		"description": "**erf(x)** \n\nIf 'x' is non-negative, then \\`erf(x / \u03c3\u221a2)\\` is the probability that a random variable having a normal distribution with standard deviation '\u03c3' takes the value that is separated from the expected value by more than 'x'. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/math-functions/#erfx)"
	  },
	  "CH erfc": {
		"scope": "tinybird,sql",
		"prefix": [
		  "erfc"
		],
		"body": [
		  "erfc(${0:x})"
		],
		"description": "**erfc(x)** \n\nAccepts a numeric argument and returns a Float64 number close to 1 - erf(x), but without loss of precision for large 'x' values. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/math-functions/#erfcx)"
	  },
	  "CH lgamma": {
		"scope": "tinybird,sql",
		"prefix": [
		  "lgamma"
		],
		"body": [
		  "lgamma(${0:x})"
		],
		"description": "**lgamma(x)** \n\nThe logarithm of the gamma function. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/math-functions/#lgammax)"
	  },
	  "CH tgamma": {
		"scope": "tinybird,sql",
		"prefix": [
		  "tgamma"
		],
		"body": [
		  "tgamma(${0:x})"
		],
		"description": "**tgamma(x)** \n\nGamma function. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/math-functions/#tgammax)"
	  },
	  "CH sin": {
		"scope": "tinybird,sql",
		"prefix": [
		  "sin"
		],
		"body": [
		  "sin(${0:x})"
		],
		"description": "**sin(x)** \n\nThe sine. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/math-functions/#sinx)"
	  },
	  "CH cos": {
		"scope": "tinybird,sql",
		"prefix": [
		  "cos"
		],
		"body": [
		  "cos(${0:x})"
		],
		"description": "**cos(x)** \n\nThe cosine. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/math-functions/#cosx)"
	  },
	  "CH tan": {
		"scope": "tinybird,sql",
		"prefix": [
		  "tan"
		],
		"body": [
		  "tan(${0:x})"
		],
		"description": "**tan(x)** \n\nThe tangent. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/math-functions/#tanx)"
	  },
	  "CH asin": {
		"scope": "tinybird,sql",
		"prefix": [
		  "asin"
		],
		"body": [
		  "asin(${0:x})"
		],
		"description": "**asin(x)** \n\nThe arc sine. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/math-functions/#asinx)"
	  },
	  "CH acos": {
		"scope": "tinybird,sql",
		"prefix": [
		  "acos"
		],
		"body": [
		  "acos(${0:x})"
		],
		"description": "**acos(x)** \n\nThe arc cosine. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/math-functions/#acosx)"
	  },
	  "CH atan": {
		"scope": "tinybird,sql",
		"prefix": [
		  "atan"
		],
		"body": [
		  "atan(${0:x})"
		],
		"description": "**atan(x)** \n\nThe arc tangent. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/math-functions/#atanx)"
	  },
	  "CH pow": {
		"scope": "tinybird,sql",
		"prefix": [
		  "pow"
		],
		"body": [
		  "pow(${0:x}, ${1:y})"
		],
		"description": "**pow(x, y)** \n\nTakes two numeric arguments x and y. Returns a Float64 number close to x to the power of y. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/math-functions/#powx)"
	  },
	  "CH intExp2": {
		"scope": "tinybird,sql",
		"prefix": [
		  "intExp2"
		],
		"body": [
		  "intE${0:x}p2(${0:x})"
		],
		"description": "**intExp2(x)** \n\nAccepts a numeric argument and returns a UInt64 number close to 2 to the power of x. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/math-functions/#intexp2)"
	  },
	  "CH intExp10": {
		"scope": "tinybird,sql",
		"prefix": [
		  "intExp10"
		],
		"body": [
		  "intE${0:x}p10(${0:x})"
		],
		"description": "**intExp10(x)** \n\nAccepts a numeric argument and returns a UInt64 number close to 10 to the power of x. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/math-functions/#intexp10)"
	  },
	  "CH atan2": {
		"scope": "tinybird,sql",
		"prefix": [
		  "atan2"
		],
		"body": [
		  "atan2(${0:y}, ${1:x})"
		],
		"description": "**atan2(y, x)** \n\nThe [function](https://en.wikipedia.org/wiki/Atan2) calculates the angle in the Euclidean plane, given in radians, between the positive x axis and the ray to the point \\`(x, y) \u2260 (0, 0)\\`. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/math-functions/#atan2y)"
	  },
	  "CH hypot": {
		"scope": "tinybird,sql",
		"prefix": [
		  "hypot"
		],
		"body": [
		  "hypot(${0:x}, ${1:y})"
		],
		"description": "**hypot(x, y)** \n\nCalculates the length of the hypotenuse of a right-angle triangle. The [function](https://en.wikipedia.org/wiki/Hypot) avoids problems that occur when squaring very large or very small numbers. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/math-functions/#hypotx)"
	  },
	  "CH \\log1p": {
		"scope": "tinybird,sql",
		"prefix": [
		  "\\log1p"
		],
		"body": [
		  "\\log1p(${0:0})\\"
		],
		"description": "**\\log1p(0)\\** \n\nCalculates \\`log(1+x)\\`. The [function](https://en.wikipedia.org/wiki/Natural_logarithm#lnp1) \\`log1p(x)\\` is more accurate than \\`log(1+x)\\` for small values of x. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/math-functions/#log1px)"
	  },
	  "CH \\sign": {
		"scope": "tinybird,sql",
		"prefix": [
		  "\\sign"
		],
		"body": [
		  "\\sign(${0:0})\\"
		],
		"description": "**\\sign(0)\\** \n\nReturns the sign of a real number. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/math-functions/#signx)"
	  },
	  "CH \\degrees": {
		"scope": "tinybird,sql",
		"prefix": [
		  "\\degrees"
		],
		"body": [
		  "\\degrees(${0:3.141592653589793})\\"
		],
		"description": "**\\degrees(3.141592653589793)\\** \n\nConverts the input value in radians to degrees. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/math-functions/#degreesx)"
	  },
	  "CH \\\\\\\radians": {
		"scope": "tinybird,sql",
		"prefix": [
		  "\\\\\\\radians"
		],
		"body": [
		  "\\\\\\\radians(${0:180})\\"
		],
		"description": "**\\\\\\\radians(180)\\** \n\nConverts the input value in degrees to radians. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/math-functions/#radiansx)"
	  },
	  "CH factorial": {
		"scope": "tinybird,sql",
		"prefix": [
		  "factorial"
		],
		"body": [
		  "factorial(${0:n})"
		],
		"description": "**factorial(n)** \n\nComputes the factorial of an integer value. It works with any native integer type including UInt(8|16|32|64) and Int(8|16|32|64). The return type is UInt64. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/math-functions/#factorialn)"
	  },
	  "CH encrypt": {
		"scope": "tinybird,sql",
		"prefix": [
		  "encrypt"
		],
		"body": [
		  "encrypt(${0:'mode'}, ${1:'plaintext'}, ${2:'key'} [, ${3:iv}, ${4:aad}])"
		],
		"description": "**encrypt('mode', 'plaintext', 'key' [, iv, aad])** \n\nThis function encrypts data using these modes: [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/encryption-functions/#encrypt)"
	  },
	  "CH aes_encrypt_mysql": {
		"scope": "tinybird,sql",
		"prefix": [
		  "aes_encrypt_mysql"
		],
		"body": [
		  "aes_encrypt_mysql(${0:'mode'}, ${1:'plaintext'}, ${2:'key'} [, ${3:iv}])"
		],
		"description": "**aes_encrypt_mysql('mode', 'plaintext', 'key' [, iv])** \n\nCompatible with mysql encryption and resulting ciphertext can be decrypted with [AES_DECRYPT](https://dev.mysql.com/doc/refman/8.0/en/encryption-functions.html#function_aes-decrypt) function. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/encryption-functions/#aes_encrypt_mysql)"
	  },
	  "CH decrypt": {
		"scope": "tinybird,sql",
		"prefix": [
		  "decrypt"
		],
		"body": [
		  "decrypt(${0:'mode'}, ${1:'ciphertext'}, ${2:'key'} [, ${3:iv}, ${4:aad}])"
		],
		"description": "**decrypt('mode', 'ciphertext', 'key' [, iv, aad])** \n\nThis function decrypts ciphertext into a plaintext using these modes: [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/encryption-functions/#decrypt)"
	  },
	  "CH tryDecrypt": {
		"scope": "tinybird,sql",
		"prefix": [
		  "tryDecrypt"
		],
		"body": [
		  "tryDecrypt(${0:'aes-256-gcm'}, ${1:encrypted}, ${2:'keykeykeykeykeykeykeykeykeykey02'}, ${3:iv}) AS value"
		],
		"description": "**tryDecrypt('aes-256-gcm', encrypted, 'keykeykeykeykeykeykeykeykeykey02', iv) AS value** \n\nSimilar to \\`decrypt\\`, but returns NULL if decryption fails because of using the wrong key. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/encryption-functions/#trydecrypt)"
	  },
	  "CH plus": {
		"scope": "tinybird,sql",
		"prefix": [
		  "plus"
		],
		"body": [
		  "plus(${0:a}, ${1:b})"
		],
		"description": "**plus(a, b)** \n\nCalculates the sum of the numbers. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/arithmetic-functions/#plusa)"
	  },
	  "CH minus": {
		"scope": "tinybird,sql",
		"prefix": [
		  "minus"
		],
		"body": [
		  "minus(${0:a}, ${1:b})"
		],
		"description": "**minus(a, b)** \n\nCalculates the difference. The result is always signed. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/arithmetic-functions/#minusa)"
	  },
	  "CH multiply": {
		"scope": "tinybird,sql",
		"prefix": [
		  "multiply"
		],
		"body": [
		  "multiply(${0:a}, ${1:b})"
		],
		"description": "**multiply(a, b)** \n\nCalculates the product of the numbers. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/arithmetic-functions/#multiplya)"
	  },
	  "CH divide": {
		"scope": "tinybird,sql",
		"prefix": [
		  "divide"
		],
		"body": [
		  "divide(${0:a}, ${1:b})"
		],
		"description": "**divide(a, b)** \n\nCalculates the quotient of the numbers. The result type is always a floating-point type. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/arithmetic-functions/#dividea)"
	  },
	  "CH intDiv": {
		"scope": "tinybird,sql",
		"prefix": [
		  "intDiv"
		],
		"body": [
		  "intDiv(${0:a}, ${1:b})"
		],
		"description": "**intDiv(a, b)** \n\nCalculates the quotient of the numbers. Divides into integers, rounding down (by the absolute value). [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/arithmetic-functions/#intdiva)"
	  },
	  "CH intDivOrZero": {
		"scope": "tinybird,sql",
		"prefix": [
		  "intDivOrZero"
		],
		"body": [
		  "intDivOrZero(${0:a}, ${1:b})"
		],
		"description": "**intDivOrZero(a, b)** \n\nDiffers from 'intDiv' in that it returns zero when dividing by zero or when dividing a minimal negative number by minus one. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/arithmetic-functions/#intdivorzeroa)"
	  },
	  "CH modulo": {
		"scope": "tinybird,sql",
		"prefix": [
		  "modulo"
		],
		"body": [
		  "modulo(${0:a}, ${1:b})"
		],
		"description": "**modulo(a, b)** \n\nCalculates the remainder when dividing \\`a\\` by \\`b\\`. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/arithmetic-functions/#moduloa)"
	  },
	  "CH moduloOrZero": {
		"scope": "tinybird,sql",
		"prefix": [
		  "moduloOrZero"
		],
		"body": [
		  "moduloOrZero(${0:a}, ${1:b})"
		],
		"description": "**moduloOrZero(a, b)** \n\nDiffers from [modulo](https://clickhouse.tech/docs/en/sql-reference/functions/arithmetic-functions#modulo) in that it returns zero when the divisor is zero. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/arithmetic-functions/#moduloorzeroa)"
	  },
	  "CH positiveModulo": {
		"scope": "tinybird,sql",
		"prefix": [
		  "positiveModulo"
		],
		"body": [
		  "positiveModulo(${0:a}, ${1:b})"
		],
		"description": "**positiveModulo(a, b)** \n\nCalculates the remainder when dividing \\`a\\` by \\`b\\`. Similar to the function \\`modulo\\` except that \\`positive_modulo\\` always returns a non-negative number. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/arithmetic-functions/#positivemoduloa)"
	  },
	  "CH negate": {
		"scope": "tinybird,sql",
		"prefix": [
		  "negate"
		],
		"body": [
		  "neg${0:a}te(${0:a})"
		],
		"description": "**negate(a)** \n\nCalculates a number with the reverse sign. The result is always signed. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/arithmetic-functions/#negatea)"
	  },
	  "CH abs": {
		"scope": "tinybird,sql",
		"prefix": [
		  "abs"
		],
		"body": [
		  "${0:a}bs(${0:a})"
		],
		"description": "**abs(a)** \n\nCalculates the absolute value of the number (a). That is, if a < 0, it returns -a. For unsigned types it does not do anything. For signed integer types, it returns an unsigned number. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/arithmetic-functions/#absa)"
	  },
	  "CH gcd": {
		"scope": "tinybird,sql",
		"prefix": [
		  "gcd"
		],
		"body": [
		  "gcd(${0:a}, ${1:b})"
		],
		"description": "**gcd(a, b)** \n\nReturns the greatest common divisor of the numbers. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/arithmetic-functions/#gcda)"
	  },
	  "CH lcm": {
		"scope": "tinybird,sql",
		"prefix": [
		  "lcm"
		],
		"body": [
		  "lcm(${0:a}, ${1:b})"
		],
		"description": "**lcm(a, b)** \n\nReturns the least common multiple of the numbers. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/arithmetic-functions/#lcma)"
	  },
	  "CH max2": {
		"scope": "tinybird,sql",
		"prefix": [
		  "max2"
		],
		"body": [
		  "max2(${0:value1}, ${1:value2})"
		],
		"description": "**max2(value1, value2)** \n\nCompares two values and returns the maximum. The returned value is converted to Float64. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/arithmetic-functions/#max2)"
	  },
	  "CH min2": {
		"scope": "tinybird,sql",
		"prefix": [
		  "min2"
		],
		"body": [
		  "min2(${0:value1}, ${1:value2})"
		],
		"description": "**min2(value1, value2)** \n\nCompares two values and returns the minimum. The returned value is converted to Float64. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/arithmetic-functions/#min2)"
	  },
	  "CH multiplyDecimal": {
		"scope": "tinybird,sql",
		"prefix": [
		  "multiplyDecimal"
		],
		"body": [
		  "multiplyDecimal(${0:a}, ${1:b}[, result_sc${0:a}le])"
		],
		"description": "**multiplyDecimal(a, b[, result_scale])** \n\nPerforms multiplication on two decimals. Result value will be of type Decimal256. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/arithmetic-functions/#multiplydecimala)"
	  },
	  "CH toInt8": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toInt8"
		],
		"body": [
		  "toInt8(${0:x})"
		],
		"description": "**toInt8(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#toint8163264128256)"
	  },
	  "CH toInt16": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toInt16"
		],
		"body": [
		  "toInt16(${0:x})"
		],
		"description": "**toInt16(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#toint8163264128256)"
	  },
	  "CH toInt32": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toInt32"
		],
		"body": [
		  "toInt32(${0:x})"
		],
		"description": "**toInt32(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#toint8163264128256)"
	  },
	  "CH toInt64": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toInt64"
		],
		"body": [
		  "toInt64(${0:x})"
		],
		"description": "**toInt64(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#toint8163264128256)"
	  },
	  "CH toInt128": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toInt128"
		],
		"body": [
		  "toInt128(${0:x})"
		],
		"description": "**toInt128(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#toint8163264128256)"
	  },
	  "CH toInt256": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toInt256"
		],
		"body": [
		  "toInt256(${0:x})"
		],
		"description": "**toInt256(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#toint8163264128256)"
	  },
	  "CH toInt8OrZero": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toInt8OrZero"
		],
		"body": [
		  "toInt8OrZero(${0:x})"
		],
		"description": "**toInt8OrZero(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#toint8163264128256orzero)"
	  },
	  "CH toInt16OrZero": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toInt16OrZero"
		],
		"body": [
		  "toInt16OrZero(${0:x})"
		],
		"description": "**toInt16OrZero(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#toint8163264128256orzero)"
	  },
	  "CH toInt32OrZero": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toInt32OrZero"
		],
		"body": [
		  "toInt32OrZero(${0:x})"
		],
		"description": "**toInt32OrZero(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#toint8163264128256orzero)"
	  },
	  "CH toInt64OrZero": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toInt64OrZero"
		],
		"body": [
		  "toInt64OrZero(${0:x})"
		],
		"description": "**toInt64OrZero(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#toint8163264128256orzero)"
	  },
	  "CH toInt128OrZero": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toInt128OrZero"
		],
		"body": [
		  "toInt128OrZero(${0:x})"
		],
		"description": "**toInt128OrZero(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#toint8163264128256orzero)"
	  },
	  "CH toInt256OrZero": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toInt256OrZero"
		],
		"body": [
		  "toInt256OrZero(${0:x})"
		],
		"description": "**toInt256OrZero(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#toint8163264128256orzero)"
	  },
	  "CH toInt8OrNull": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toInt8OrNull"
		],
		"body": [
		  "toInt8OrNull(${0:x})"
		],
		"description": "**toInt8OrNull(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#toint8163264128256ornull)"
	  },
	  "CH toInt16OrNull": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toInt16OrNull"
		],
		"body": [
		  "toInt16OrNull(${0:x})"
		],
		"description": "**toInt16OrNull(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#toint8163264128256ornull)"
	  },
	  "CH toInt32OrNull": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toInt32OrNull"
		],
		"body": [
		  "toInt32OrNull(${0:x})"
		],
		"description": "**toInt32OrNull(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#toint8163264128256ornull)"
	  },
	  "CH toInt64OrNull": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toInt64OrNull"
		],
		"body": [
		  "toInt64OrNull(${0:x})"
		],
		"description": "**toInt64OrNull(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#toint8163264128256ornull)"
	  },
	  "CH toInt128OrNull": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toInt128OrNull"
		],
		"body": [
		  "toInt128OrNull(${0:x})"
		],
		"description": "**toInt128OrNull(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#toint8163264128256ornull)"
	  },
	  "CH toInt256OrNull": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toInt256OrNull"
		],
		"body": [
		  "toInt256OrNull(${0:x})"
		],
		"description": "**toInt256OrNull(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#toint8163264128256ornull)"
	  },
	  "CH toInt8OrDefault": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toInt8OrDefault"
		],
		"body": [
		  "toInt8OrDefault(${0:x})"
		],
		"description": "**toInt8OrDefault(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#toint8163264128256ordefault)"
	  },
	  "CH toInt16OrDefault": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toInt16OrDefault"
		],
		"body": [
		  "toInt16OrDefault(${0:x})"
		],
		"description": "**toInt16OrDefault(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#toint8163264128256ordefault)"
	  },
	  "CH toInt32OrDefault": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toInt32OrDefault"
		],
		"body": [
		  "toInt32OrDefault(${0:x})"
		],
		"description": "**toInt32OrDefault(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#toint8163264128256ordefault)"
	  },
	  "CH toInt64OrDefault": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toInt64OrDefault"
		],
		"body": [
		  "toInt64OrDefault(${0:x})"
		],
		"description": "**toInt64OrDefault(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#toint8163264128256ordefault)"
	  },
	  "CH toInt128OrDefault": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toInt128OrDefault"
		],
		"body": [
		  "toInt128OrDefault(${0:x})"
		],
		"description": "**toInt128OrDefault(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#toint8163264128256ordefault)"
	  },
	  "CH toInt256OrDefault": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toInt256OrDefault"
		],
		"body": [
		  "toInt256OrDefault(${0:x})"
		],
		"description": "**toInt256OrDefault(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#toint8163264128256ordefault)"
	  },
	  "CH toUInt8": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toUInt8"
		],
		"body": [
		  "toUInt8(${0:x})"
		],
		"description": "**toUInt8(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#touint8163264256)"
	  },
	  "CH toUInt16": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toUInt16"
		],
		"body": [
		  "toUInt16(${0:x})"
		],
		"description": "**toUInt16(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#touint8163264256)"
	  },
	  "CH toUInt32": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toUInt32"
		],
		"body": [
		  "toUInt32(${0:x})"
		],
		"description": "**toUInt32(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#touint8163264256)"
	  },
	  "CH toUInt64": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toUInt64"
		],
		"body": [
		  "toUInt64(${0:x})"
		],
		"description": "**toUInt64(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#touint8163264256)"
	  },
	  "CH toUInt256": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toUInt256"
		],
		"body": [
		  "toUInt256(${0:x})"
		],
		"description": "**toUInt256(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#touint8163264256)"
	  },
	  "CH toUInt8OrZero": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toUInt8OrZero"
		],
		"body": [
		  "toUInt8OrZero(${0:x})"
		],
		"description": "**toUInt8OrZero(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#touint8163264256orzero)"
	  },
	  "CH toUInt16OrZero": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toUInt16OrZero"
		],
		"body": [
		  "toUInt16OrZero(${0:x})"
		],
		"description": "**toUInt16OrZero(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#touint8163264256orzero)"
	  },
	  "CH toUInt32OrZero": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toUInt32OrZero"
		],
		"body": [
		  "toUInt32OrZero(${0:x})"
		],
		"description": "**toUInt32OrZero(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#touint8163264256orzero)"
	  },
	  "CH toUInt64OrZero": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toUInt64OrZero"
		],
		"body": [
		  "toUInt64OrZero(${0:x})"
		],
		"description": "**toUInt64OrZero(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#touint8163264256orzero)"
	  },
	  "CH toUInt256OrZero": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toUInt256OrZero"
		],
		"body": [
		  "toUInt256OrZero(${0:x})"
		],
		"description": "**toUInt256OrZero(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#touint8163264256orzero)"
	  },
	  "CH toUInt8OrNull": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toUInt8OrNull"
		],
		"body": [
		  "toUInt8OrNull(${0:x})"
		],
		"description": "**toUInt8OrNull(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#touint8163264256ornull)"
	  },
	  "CH toUInt16OrNull": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toUInt16OrNull"
		],
		"body": [
		  "toUInt16OrNull(${0:x})"
		],
		"description": "**toUInt16OrNull(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#touint8163264256ornull)"
	  },
	  "CH toUInt32OrNull": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toUInt32OrNull"
		],
		"body": [
		  "toUInt32OrNull(${0:x})"
		],
		"description": "**toUInt32OrNull(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#touint8163264256ornull)"
	  },
	  "CH toUInt64OrNull": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toUInt64OrNull"
		],
		"body": [
		  "toUInt64OrNull(${0:x})"
		],
		"description": "**toUInt64OrNull(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#touint8163264256ornull)"
	  },
	  "CH toUInt256OrNull": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toUInt256OrNull"
		],
		"body": [
		  "toUInt256OrNull(${0:x})"
		],
		"description": "**toUInt256OrNull(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#touint8163264256ornull)"
	  },
	  "CH toUInt8OrDefault": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toUInt8OrDefault"
		],
		"body": [
		  "toUInt8OrDefault(${0:x})"
		],
		"description": "**toUInt8OrDefault(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#touint8163264256ordefault)"
	  },
	  "CH toUInt16OrDefault": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toUInt16OrDefault"
		],
		"body": [
		  "toUInt16OrDefault(${0:x})"
		],
		"description": "**toUInt16OrDefault(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#touint8163264256ordefault)"
	  },
	  "CH toUInt32OrDefault": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toUInt32OrDefault"
		],
		"body": [
		  "toUInt32OrDefault(${0:x})"
		],
		"description": "**toUInt32OrDefault(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#touint8163264256ordefault)"
	  },
	  "CH toUInt64OrDefault": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toUInt64OrDefault"
		],
		"body": [
		  "toUInt64OrDefault(${0:x})"
		],
		"description": "**toUInt64OrDefault(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#touint8163264256ordefault)"
	  },
	  "CH toUInt256OrDefault": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toUInt256OrDefault"
		],
		"body": [
		  "toUInt256OrDefault(${0:x})"
		],
		"description": "**toUInt256OrDefault(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#touint8163264256ordefault)"
	  },
	  "CH toFloat32": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toFloat32"
		],
		"body": [
		  "toFloat32(${0:x})"
		],
		"description": "**toFloat32(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#tofloat3264)"
	  },
	  "CH toFloat64": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toFloat64"
		],
		"body": [
		  "toFloat64(${0:x})"
		],
		"description": "**toFloat64(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#tofloat3264)"
	  },
	  "CH toFloat32OrZero": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toFloat32OrZero"
		],
		"body": [
		  "toFloat32OrZero(${0:x})"
		],
		"description": "**toFloat32OrZero(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#tofloat3264orzero)"
	  },
	  "CH toFloat64OrZero": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toFloat64OrZero"
		],
		"body": [
		  "toFloat64OrZero(${0:x})"
		],
		"description": "**toFloat64OrZero(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#tofloat3264orzero)"
	  },
	  "CH toFloat32OrNull": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toFloat32OrNull"
		],
		"body": [
		  "toFloat32OrNull(${0:x})"
		],
		"description": "**toFloat32OrNull(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#tofloat3264ornull)"
	  },
	  "CH toFloat64OrNull": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toFloat64OrNull"
		],
		"body": [
		  "toFloat64OrNull(${0:x})"
		],
		"description": "**toFloat64OrNull(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#tofloat3264ornull)"
	  },
	  "CH toFloat32OrDefault": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toFloat32OrDefault"
		],
		"body": [
		  "toFloat32OrDefault(${0:x})"
		],
		"description": "**toFloat32OrDefault(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#tofloat3264ordefault)"
	  },
	  "CH toFloat64OrDefault": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toFloat64OrDefault"
		],
		"body": [
		  "toFloat64OrDefault(${0:x})"
		],
		"description": "**toFloat64OrDefault(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#tofloat3264ordefault)"
	  },
	  "CH toDate": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toDate"
		],
		"body": [
		  "toDate(${0:x})"
		],
		"description": "**toDate(x)** \n\nConverts the argument to [Date](/docs/en/sql-reference/data-types/date.md) data type. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#todate)"
	  },
	  "CH toDateOrZero": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toDateOrZero"
		],
		"body": [
		  "toDateOrZero(${0:x})"
		],
		"description": "**toDateOrZero(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#todateorzero)"
	  },
	  "CH toDateOrNull": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toDateOrNull"
		],
		"body": [
		  "toDateOrNull(${0:x})"
		],
		"description": "**toDateOrNull(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#todateornull)"
	  },
	  "CH toDateOrDefault": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toDateOrDefault"
		],
		"body": [
		  "toDateOrDefault(${0:x})"
		],
		"description": "**toDateOrDefault(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#todateordefault)"
	  },
	  "CH toDateTime": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toDateTime"
		],
		"body": [
		  "toDateTime(${0:x})"
		],
		"description": "**toDateTime(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#todatetime)"
	  },
	  "CH toDateTimeOrZero": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toDateTimeOrZero"
		],
		"body": [
		  "toDateTimeOrZero(${0:x})"
		],
		"description": "**toDateTimeOrZero(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#todatetimeorzero)"
	  },
	  "CH toDateTimeOrNull": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toDateTimeOrNull"
		],
		"body": [
		  "toDateTimeOrNull(${0:x})"
		],
		"description": "**toDateTimeOrNull(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#todatetimeornull)"
	  },
	  "CH toDateTimeOrDefault": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toDateTimeOrDefault"
		],
		"body": [
		  "toDateTimeOrDefault(${0:x})"
		],
		"description": "**toDateTimeOrDefault(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#todatetimeordefault)"
	  },
	  "CH toDate32": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toDate32"
		],
		"body": [
		  "toDate32(${0:expr})"
		],
		"description": "**toDate32(expr)** \n\nConverts the argument to the [Date32](/docs/en/sql-reference/data-types/date32.md) data type. If the value is outside the range, \\`toDate32\\` returns the border values supported by [Date32](/docs/en/sql-reference/data-types/date32.md). If the argument has [Date](/docs/en/sql-reference/data-types/date.md) type, it's borders are taken into account. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#todate32)"
	  },
	  "CH \\toDate32OrZero": {
		"scope": "tinybird,sql",
		"prefix": [
		  "\\toDate32OrZero"
		],
		"body": [
		  "\\toDate32OrZero(${0:'1899-01-01'})\\u252c\toDate32OrZero('')\\"
		],
		"description": "**\\toDate32OrZero('1899-01-01')\\u252c\toDate32OrZero('')\\** \n\nThe same as [toDate32](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions#todate32) but returns the min value of [Date32](/docs/en/sql-reference/data-types/date32.md) if an invalid argument is received. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#todate32orzero)"
	  },
	  "CH \\toDate32OrNull": {
		"scope": "tinybird,sql",
		"prefix": [
		  "\\toDate32OrNull"
		],
		"body": [
		  "\\toDate32OrNull(${0:'1955-01-01'})\\u252c\toDate32OrNull('')\\"
		],
		"description": "**\\toDate32OrNull('1955-01-01')\\u252c\toDate32OrNull('')\\** \n\nThe same as [toDate32](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions#todate32) but returns \\`NULL\\` if an invalid argument is received. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#todate32ornull)"
	  },
	  "CH toDateTime64": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toDateTime64"
		],
		"body": [
		  "toDateTime64(${0:expr}, ${1:scale}, ${2:[timezone}])"
		],
		"description": "**toDateTime64(expr, scale, [timezone])** \n\nConverts the argument to the [DateTime64](/docs/en/sql-reference/data-types/datetime64.md) data type. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#todatetime64)"
	  },
	  "CH toDecimal32": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toDecimal32"
		],
		"body": [
		  "toDecimal32(${0:x})"
		],
		"description": "**toDecimal32(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#todecimal3264128256)"
	  },
	  "CH toDecimal64": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toDecimal64"
		],
		"body": [
		  "toDecimal64(${0:x})"
		],
		"description": "**toDecimal64(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#todecimal3264128256)"
	  },
	  "CH toDecimal128": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toDecimal128"
		],
		"body": [
		  "toDecimal128(${0:x})"
		],
		"description": "**toDecimal128(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#todecimal3264128256)"
	  },
	  "CH toDecimal256": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toDecimal256"
		],
		"body": [
		  "toDecimal256(${0:x})"
		],
		"description": "**toDecimal256(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#todecimal3264128256)"
	  },
	  "CH toDecimal32OrNull": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toDecimal32OrNull"
		],
		"body": [
		  "toDecimal32OrNull(${0:x})"
		],
		"description": "**toDecimal32OrNull(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#todecimal3264128256ornull)"
	  },
	  "CH toDecimal64OrNull": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toDecimal64OrNull"
		],
		"body": [
		  "toDecimal64OrNull(${0:x})"
		],
		"description": "**toDecimal64OrNull(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#todecimal3264128256ornull)"
	  },
	  "CH toDecimal128OrNull": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toDecimal128OrNull"
		],
		"body": [
		  "toDecimal128OrNull(${0:x})"
		],
		"description": "**toDecimal128OrNull(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#todecimal3264128256ornull)"
	  },
	  "CH toDecimal256OrNull": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toDecimal256OrNull"
		],
		"body": [
		  "toDecimal256OrNull(${0:x})"
		],
		"description": "**toDecimal256OrNull(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#todecimal3264128256ornull)"
	  },
	  "CH toDecimal32OrDefault": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toDecimal32OrDefault"
		],
		"body": [
		  "toDecimal32OrDefault(${0:x})"
		],
		"description": "**toDecimal32OrDefault(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#todecimal3264128256ordefault)"
	  },
	  "CH toDecimal64OrDefault": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toDecimal64OrDefault"
		],
		"body": [
		  "toDecimal64OrDefault(${0:x})"
		],
		"description": "**toDecimal64OrDefault(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#todecimal3264128256ordefault)"
	  },
	  "CH toDecimal128OrDefault": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toDecimal128OrDefault"
		],
		"body": [
		  "toDecimal128OrDefault(${0:x})"
		],
		"description": "**toDecimal128OrDefault(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#todecimal3264128256ordefault)"
	  },
	  "CH toDecimal256OrDefault": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toDecimal256OrDefault"
		],
		"body": [
		  "toDecimal256OrDefault(${0:x})"
		],
		"description": "**toDecimal256OrDefault(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#todecimal3264128256ordefault)"
	  },
	  "CH toDecimal32OrZero": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toDecimal32OrZero"
		],
		"body": [
		  "toDecimal32OrZero(${0:x})"
		],
		"description": "**toDecimal32OrZero(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#todecimal3264128256orzero)"
	  },
	  "CH toDecimal64OrZero": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toDecimal64OrZero"
		],
		"body": [
		  "toDecimal64OrZero(${0:x})"
		],
		"description": "**toDecimal64OrZero(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#todecimal3264128256orzero)"
	  },
	  "CH toDecimal128OrZero": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toDecimal128OrZero"
		],
		"body": [
		  "toDecimal128OrZero(${0:x})"
		],
		"description": "**toDecimal128OrZero(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#todecimal3264128256orzero)"
	  },
	  "CH toDecimal256OrZero": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toDecimal256OrZero"
		],
		"body": [
		  "toDecimal256OrZero(${0:x})"
		],
		"description": "**toDecimal256OrZero(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#todecimal3264128256orzero)"
	  },
	  "CH toString": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toString"
		],
		"body": [
		  "toString(${0:now}(), 'Asia/Yekaterinburg') AS now_yekat"
		],
		"description": "**toString(now(), 'Asia/Yekaterinburg') AS now_yekat** \n\nFunctions for converting between numbers, strings (but not fixed strings), dates, and dates with times. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#tostring)"
	  },
	  "CH toFixedString": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toFixedString"
		],
		"body": [
		  "toFixedString(${0:s}, ${1:N})"
		],
		"description": "**toFixedString(s, N)** \n\nConverts a [String](/docs/en/sql-reference/data-types/string.md) type argument to a [FixedString(N)](/docs/en/sql-reference/data-types/fixedstring.md) type (a string of fixed length N). [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#tofixedstrings)"
	  },
	  "CH toStringCutToZero": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toStringCutToZero"
		],
		"body": [
		  "toStringCutToZero(${0:s})"
		],
		"description": "**toStringCutToZero(s)** \n\nAccepts a String or FixedString argument. Returns the String with the content truncated at the first zero byte found. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#tostringcuttozeros)"
	  },
	  "CH reinterpretAsUInt8": {
		"scope": "tinybird,sql",
		"prefix": [
		  "reinterpretAsUInt8"
		],
		"body": [
		  "reinterpretAsUInt8(${0:x})"
		],
		"description": "**reinterpretAsUInt8(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#reinterpretasuint8163264)"
	  },
	  "CH reinterpretAsUInt16": {
		"scope": "tinybird,sql",
		"prefix": [
		  "reinterpretAsUInt16"
		],
		"body": [
		  "reinterpretAsUInt16(${0:x})"
		],
		"description": "**reinterpretAsUInt16(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#reinterpretasuint8163264)"
	  },
	  "CH reinterpretAsUInt32": {
		"scope": "tinybird,sql",
		"prefix": [
		  "reinterpretAsUInt32"
		],
		"body": [
		  "reinterpretAsUInt32(${0:x})"
		],
		"description": "**reinterpretAsUInt32(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#reinterpretasuint8163264)"
	  },
	  "CH reinterpretAsUInt64": {
		"scope": "tinybird,sql",
		"prefix": [
		  "reinterpretAsUInt64"
		],
		"body": [
		  "reinterpretAsUInt64(${0:x})"
		],
		"description": "**reinterpretAsUInt64(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#reinterpretasuint8163264)"
	  },
	  "CH reinterpretAsInt8": {
		"scope": "tinybird,sql",
		"prefix": [
		  "reinterpretAsInt8"
		],
		"body": [
		  "reinterpretAsInt8(${0:x})"
		],
		"description": "**reinterpretAsInt8(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#reinterpretasint8163264)"
	  },
	  "CH reinterpretAsInt16": {
		"scope": "tinybird,sql",
		"prefix": [
		  "reinterpretAsInt16"
		],
		"body": [
		  "reinterpretAsInt16(${0:x})"
		],
		"description": "**reinterpretAsInt16(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#reinterpretasint8163264)"
	  },
	  "CH reinterpretAsInt32": {
		"scope": "tinybird,sql",
		"prefix": [
		  "reinterpretAsInt32"
		],
		"body": [
		  "reinterpretAsInt32(${0:x})"
		],
		"description": "**reinterpretAsInt32(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#reinterpretasint8163264)"
	  },
	  "CH reinterpretAsInt64": {
		"scope": "tinybird,sql",
		"prefix": [
		  "reinterpretAsInt64"
		],
		"body": [
		  "reinterpretAsInt64(${0:x})"
		],
		"description": "**reinterpretAsInt64(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#reinterpretasint8163264)"
	  },
	  "CH reinterpretAsFloat32": {
		"scope": "tinybird,sql",
		"prefix": [
		  "reinterpretAsFloat32"
		],
		"body": [
		  "reinterpretAsFloat32(${0:x})"
		],
		"description": "**reinterpretAsFloat32(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#reinterpretasfloat3264)"
	  },
	  "CH reinterpretAsFloat64": {
		"scope": "tinybird,sql",
		"prefix": [
		  "reinterpretAsFloat64"
		],
		"body": [
		  "reinterpretAsFloat64(${0:x})"
		],
		"description": "**reinterpretAsFloat64(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#reinterpretasfloat3264)"
	  },
	  "CH reinterpretAsDate": {
		"scope": "tinybird,sql",
		"prefix": [
		  "reinterpretAsDate"
		],
		"body": [
		  "reinterpretAsDate(${0:x})"
		],
		"description": "**reinterpretAsDate(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#reinterpretasdate)"
	  },
	  "CH reinterpretAsDateTime": {
		"scope": "tinybird,sql",
		"prefix": [
		  "reinterpretAsDateTime"
		],
		"body": [
		  "reinterpretAsDateTime(${0:x})"
		],
		"description": "**reinterpretAsDateTime(x)** \n\nThese functions accept a string and interpret the bytes placed at the beginning of the string as a number in host order (little endian). If the string isn't long enough, the functions work as if the string is padded with the necessary number of null bytes. If the string is longer than needed, the extra bytes are ignored. A date is interpreted as the number of days since the beginning of the Unix Epoch, and a date with time is interpreted as the number of seconds since the beginning of the Unix Epoch. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#reinterpretasdatetime)"
	  },
	  "CH reinterpretAsString": {
		"scope": "tinybird,sql",
		"prefix": [
		  "reinterpretAsString"
		],
		"body": [
		  "reinterpretAsString(${0:x})"
		],
		"description": "**reinterpretAsString(x)** \n\nThis function accepts a number or date or date with time and returns a string containing bytes representing the corresponding value in host order (little endian). Null bytes are dropped from the end. For example, a UInt32 type value of 255 is a string that is one byte long. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#reinterpretasstring)"
	  },
	  "CH reinterpretAsFixedString": {
		"scope": "tinybird,sql",
		"prefix": [
		  "reinterpretAsFixedString"
		],
		"body": [
		  "reinterpretAsFi${0:x}edString(${0:x})"
		],
		"description": "**reinterpretAsFixedString(x)** \n\nThis function accepts a number or date or date with time and returns a FixedString containing bytes representing the corresponding value in host order (little endian). Null bytes are dropped from the end. For example, a UInt32 type value of 255 is a FixedString that is one byte long. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#reinterpretasfixedstring)"
	  },
	  "CH reinterpretAsUUID": {
		"scope": "tinybird,sql",
		"prefix": [
		  "reinterpretAsUUID"
		],
		"body": [
		  "reinterpretAsUUID(${0:fixed_string})"
		],
		"description": "**reinterpretAsUUID(fixed_string)** \n\n:::note [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#reinterpretasuuid)"
	  },
	  "CH reinterpret": {
		"scope": "tinybird,sql",
		"prefix": [
		  "reinterpret"
		],
		"body": [
		  "reinterpret(${0:x}, ${1:T})"
		],
		"description": "**reinterpret(x, T)** \n\nUses the same source in-memory bytes sequence for \\`x\\` value and reinterprets it to destination type. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#reinterpretx)"
	  },
	  "CH CAST": {
		"scope": "tinybird,sql",
		"prefix": [
		  "CAST"
		],
		"body": [
		  "CAST(${0:x}, ${1:T})"
		],
		"description": "**CAST(x, T)** \n\nConverts an input value to the specified data type. Unlike the [reinterpret](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions#type_conversion_function-reinterpret) function, \\`CAST\\` tries to present the same value using the new data type. If the conversion can not be done then an exception is raised. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#castx)"
	  },
	  "CH accurateCast": {
		"scope": "tinybird,sql",
		"prefix": [
		  "accurateCast"
		],
		"body": [
		  "accurateCast(${0:x}, ${1:T})"
		],
		"description": "**accurateCast(x, T)** \n\nConverts \\`x\\` to the \\`T\\` data type. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#accuratecastx)"
	  },
	  "CH accurateCastOrNull": {
		"scope": "tinybird,sql",
		"prefix": [
		  "accurateCastOrNull"
		],
		"body": [
		  "accurateCastOrNull(${0:x}, ${1:T})"
		],
		"description": "**accurateCastOrNull(x, T)** \n\nConverts input value \\`x\\` to the specified data type \\`T\\`. Always returns [Nullable](/docs/en/sql-reference/data-types/nullable.md) type and returns [NULL](/docs/en/sql-reference/syntax.md/#null-literal) if the casted value is not representable in the target type. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#accuratecastornullx)"
	  },
	  "CH accurateCastOrDefault": {
		"scope": "tinybird,sql",
		"prefix": [
		  "accurateCastOrDefault"
		],
		"body": [
		  "accurateCastOrDefault(${0:x}, ${1:T}[, ${2:default_value}])"
		],
		"description": "**accurateCastOrDefault(x, T[, default_value])** \n\nConverts input value \\`x\\` to the specified data type \\`T\\`. Returns default type value or \\`default_value\\` if specified if the casted value is not representable in the target type. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#accuratecastordefaultx)"
	  },
	  "CH toIntervalYear": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toIntervalYear"
		],
		"body": [
		  "toIntervalYear(${0:x})"
		],
		"description": "**toIntervalYear(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#tointervalyearquartermonthweekdayhourminutesecond)"
	  },
	  "CH toIntervalQuarter": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toIntervalQuarter"
		],
		"body": [
		  "toIntervalQuarter(${0:x})"
		],
		"description": "**toIntervalQuarter(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#tointervalyearquartermonthweekdayhourminutesecond)"
	  },
	  "CH toIntervalMonth": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toIntervalMonth"
		],
		"body": [
		  "toIntervalMonth(${0:x})"
		],
		"description": "**toIntervalMonth(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#tointervalyearquartermonthweekdayhourminutesecond)"
	  },
	  "CH toIntervalWeek": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toIntervalWeek"
		],
		"body": [
		  "toIntervalWeek(${0:x})"
		],
		"description": "**toIntervalWeek(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#tointervalyearquartermonthweekdayhourminutesecond)"
	  },
	  "CH toIntervalDay": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toIntervalDay"
		],
		"body": [
		  "toIntervalDay(${0:x})"
		],
		"description": "**toIntervalDay(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#tointervalyearquartermonthweekdayhourminutesecond)"
	  },
	  "CH toIntervalHour": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toIntervalHour"
		],
		"body": [
		  "toIntervalHour(${0:x})"
		],
		"description": "**toIntervalHour(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#tointervalyearquartermonthweekdayhourminutesecond)"
	  },
	  "CH toIntervalMinute": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toIntervalMinute"
		],
		"body": [
		  "toIntervalMinute(${0:x})"
		],
		"description": "**toIntervalMinute(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#tointervalyearquartermonthweekdayhourminutesecond)"
	  },
	  "CH toIntervalSecond": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toIntervalSecond"
		],
		"body": [
		  "toIntervalSecond(${0:x})"
		],
		"description": "**toIntervalSecond(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#tointervalyearquartermonthweekdayhourminutesecond)"
	  },
	  "CH parseDateTimeBestEffort": {
		"scope": "tinybird,sql",
		"prefix": [
		  "parseDateTimeBestEffort"
		],
		"body": [
		  "parseDateTimeBestEffort(${0:x})"
		],
		"description": "**parseDateTimeBestEffort(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#parsedatetimebesteffort)"
	  },
	  "CH parseDateTime32BestEffort": {
		"scope": "tinybird,sql",
		"prefix": [
		  "parseDateTime32BestEffort"
		],
		"body": [
		  "parseDateTime32BestEffort(${0:x})"
		],
		"description": "**parseDateTime32BestEffort(x)** \n\nConverts a date and time in the [String](/docs/en/sql-reference/data-types/string.md) representation to [DateTime](/docs/en/sql-reference/data-types/datetime.md/#data_type-datetime) data type. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#parsedatetime32besteffort)"
	  },
	  "CH parseDateTimeBestEffortUS": {
		"scope": "tinybird,sql",
		"prefix": [
		  "parseDateTimeBestEffortUS"
		],
		"body": [
		  "parseDateTimeBestEffortUS(${0:x})"
		],
		"description": "**parseDateTimeBestEffortUS(x)** \n\nThis function behaves like [parseDateTimeBestEffort](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions#parsedatetimebesteffort) for ISO date formats, e.g. \\`YYYY-MM-DD hh:mm:ss\\`, and other date formats where the month and date components can be unambiguously extracted, e.g. \\`YYYYMMDDhhmmss\\`, \\`YYYY-MM\\`, \\`DD hh\\`, or \\`YYYY-MM-DD hh:mm:ss \u00b1h:mm\\`. If the month and the date components cannot be unambiguously extracted, e.g. \\`MM/DD/YYYY\\`, \\`MM-DD-YYYY\\`, or \\`MM-DD-YY\\`, it prefers the US date format instead of \\`DD/MM/YYYY\\`, \\`DD-MM-YYYY\\`, or \\`DD-MM-YY\\`. As an exception from the latter, if the month is bigger than 12 and smaller or equal than 31, this function falls back to the behavior of [parseDateTimeBestEffort](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions#parsedatetimebesteffort), e.g. \\`15/08/2020\\` is parsed as \\`2020-08-15\\`. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#parsedatetimebesteffortus)"
	  },
	  "CH parseDateTimeBestEffortOrNull": {
		"scope": "tinybird,sql",
		"prefix": [
		  "parseDateTimeBestEffortOrNull"
		],
		"body": [
		  "parseDateTimeBestEffortOrNull(${0:x})"
		],
		"description": "**parseDateTimeBestEffortOrNull(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#parsedatetimebesteffortornull)"
	  },
	  "CH parseDateTime32BestEffortOrNull": {
		"scope": "tinybird,sql",
		"prefix": [
		  "parseDateTime32BestEffortOrNull"
		],
		"body": [
		  "parseDateTime32BestEffortOrNull(${0:x})"
		],
		"description": "**parseDateTime32BestEffortOrNull(x)** \n\nSame as for [parseDateTimeBestEffort](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions#parsedatetimebesteffort) except that it returns \\`NULL\\` when it encounters a date format that cannot be processed. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#parsedatetime32besteffortornull)"
	  },
	  "CH parseDateTimeBestEffortOrZero": {
		"scope": "tinybird,sql",
		"prefix": [
		  "parseDateTimeBestEffortOrZero"
		],
		"body": [
		  "parseDateTimeBestEffortOrZero(${0:x})"
		],
		"description": "**parseDateTimeBestEffortOrZero(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#parsedatetimebesteffortorzero)"
	  },
	  "CH parseDateTime32BestEffortOrZero": {
		"scope": "tinybird,sql",
		"prefix": [
		  "parseDateTime32BestEffortOrZero"
		],
		"body": [
		  "parseDateTime32BestEffortOrZero(${0:x})"
		],
		"description": "**parseDateTime32BestEffortOrZero(x)** \n\nSame as for [parseDateTimeBestEffort](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions#parsedatetimebesteffort) except that it returns zero date or zero date time when it encounters a date format that cannot be processed. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#parsedatetime32besteffortorzero)"
	  },
	  "CH parseDateTimeBestEffortUSOrNull": {
		"scope": "tinybird,sql",
		"prefix": [
		  "parseDateTimeBestEffortUSOrNull"
		],
		"body": [
		  "parseDateTimeBestEffortUSOrNull(${0:x})"
		],
		"description": "**parseDateTimeBestEffortUSOrNull(x)** \n\nSame as [parseDateTimeBestEffortUS](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions#parsedatetimebesteffortUS) function except that it returns \\`NULL\\` when it encounters a date format that cannot be processed. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#parsedatetimebesteffortusornull)"
	  },
	  "CH parseDateTimeBestEffortUSOrZero": {
		"scope": "tinybird,sql",
		"prefix": [
		  "parseDateTimeBestEffortUSOrZero"
		],
		"body": [
		  "parseDateTimeBestEffortUSOrZero(${0:x})"
		],
		"description": "**parseDateTimeBestEffortUSOrZero(x)** \n\nSame as [parseDateTimeBestEffortUS](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions#parsedatetimebesteffortUS) function except that it returns zero date (\\`1970-01-01\\`) or zero date with time (\\`1970-01-01 00:00:00\\`) when it encounters a date format that cannot be processed. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#parsedatetimebesteffortusorzero)"
	  },
	  "CH parseDateTime64BestEffort": {
		"scope": "tinybird,sql",
		"prefix": [
		  "parseDateTime64BestEffort"
		],
		"body": [
		  "parseDateTime64BestEffort(${0:time_string} [, ${1:precision} [, ${2:time_zone}]])"
		],
		"description": "**parseDateTime64BestEffort(time_string [, precision [, time_zone]])** \n\nSame as [parseDateTimeBestEffort](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions#parsedatetimebesteffort) function but also parse milliseconds and microseconds and returns [DateTime](/docs/en/sql-reference/functions/type-conversion-functions.md/#data_type-datetime) data type. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#parsedatetime64besteffort)"
	  },
	  "CH parseDateTime64BestEffortUS": {
		"scope": "tinybird,sql",
		"prefix": [
		  "parseDateTime64BestEffortUS"
		],
		"body": [
		  "parseDateTime64BestEffortUS(${0:x})"
		],
		"description": "**parseDateTime64BestEffortUS(x)** \n\nSame as for [parseDateTime64BestEffort](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions#parsedatetime64besteffort), except that this function prefers US date format (\\`MM/DD/YYYY\\` etc.) in case of ambiguity. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#parsedatetime64besteffortus)"
	  },
	  "CH parseDateTime64BestEffortOrNull": {
		"scope": "tinybird,sql",
		"prefix": [
		  "parseDateTime64BestEffortOrNull"
		],
		"body": [
		  "parseDateTime64BestEffortOrNull(${0:x})"
		],
		"description": "**parseDateTime64BestEffortOrNull(x)** \n\nSame as for [parseDateTime64BestEffort](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions#parsedatetime64besteffort) except that it returns \\`NULL\\` when it encounters a date format that cannot be processed. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#parsedatetime64besteffortornull)"
	  },
	  "CH parseDateTime64BestEffortOrZero": {
		"scope": "tinybird,sql",
		"prefix": [
		  "parseDateTime64BestEffortOrZero"
		],
		"body": [
		  "parseDateTime64BestEffortOrZero(${0:x})"
		],
		"description": "**parseDateTime64BestEffortOrZero(x)** \n\nSame as for [parseDateTime64BestEffort](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions#parsedatetime64besteffort) except that it returns zero date or zero date time when it encounters a date format that cannot be processed. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#parsedatetime64besteffortorzero)"
	  },
	  "CH parseDateTime64BestEffortUSOrNull": {
		"scope": "tinybird,sql",
		"prefix": [
		  "parseDateTime64BestEffortUSOrNull"
		],
		"body": [
		  "parseDateTime64BestEffortUSOrNull(${0:x})"
		],
		"description": "**parseDateTime64BestEffortUSOrNull(x)** \n\nSame as for [parseDateTime64BestEffort](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions#parsedatetime64besteffort), except that this function prefers US date format (\\`MM/DD/YYYY\\` etc.) in case of ambiguity and returns \\`NULL\\` when it encounters a date format that cannot be processed. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#parsedatetime64besteffortusornull)"
	  },
	  "CH parseDateTime64BestEffortUSOrZero": {
		"scope": "tinybird,sql",
		"prefix": [
		  "parseDateTime64BestEffortUSOrZero"
		],
		"body": [
		  "parseDateTime64BestEffortUSOrZero(${0:x})"
		],
		"description": "**parseDateTime64BestEffortUSOrZero(x)** \n\nSame as for [parseDateTime64BestEffort](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions#parsedatetime64besteffort), except that this function prefers US date format (\\`MM/DD/YYYY\\` etc.) in case of ambiguity and returns zero date or zero date time when it encounters a date format that cannot be processed. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#parsedatetime64besteffortusorzero)"
	  },
	  "CH toLowCardinality": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toLowCardinality"
		],
		"body": [
		  "toLowCardinality(${0:expr})"
		],
		"description": "**toLowCardinality(expr)** \n\nConverts input parameter to the [LowCardinality](/docs/en/sql-reference/data-types/lowcardinality.md) version of same data type. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#tolowcardinality)"
	  },
	  "CH toUnixTimestamp64Milli": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toUnixTimestamp64Milli"
		],
		"body": [
		  "toUni${0:x}Timestamp64Milli(${0:x})"
		],
		"description": "**toUnixTimestamp64Milli(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#tounixtimestamp64milli)"
	  },
	  "CH toUnixTimestamp64Micro": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toUnixTimestamp64Micro"
		],
		"body": [
		  "toUni${0:x}Timestamp64Micro(${0:x})"
		],
		"description": "**toUnixTimestamp64Micro(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#tounixtimestamp64micro)"
	  },
	  "CH toUnixTimestamp64Nano": {
		"scope": "tinybird,sql",
		"prefix": [
		  "toUnixTimestamp64Nano"
		],
		"body": [
		  "toUnixTimestamp64Nano(${0:value})"
		],
		"description": "**toUnixTimestamp64Nano(value)** \n\nConverts a \\`DateTime64\\` to a \\`Int64\\` value with fixed sub-second precision. Input value is scaled up or down appropriately depending on it precision. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#tounixtimestamp64nano)"
	  },
	  "CH fromUnixTimestamp64Milli": {
		"scope": "tinybird,sql",
		"prefix": [
		  "fromUnixTimestamp64Milli"
		],
		"body": [
		  "fromUni${0:x}Timestamp64Milli(${0:x})"
		],
		"description": "**fromUnixTimestamp64Milli(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#fromunixtimestamp64milli)"
	  },
	  "CH fromUnixTimestamp64Micro": {
		"scope": "tinybird,sql",
		"prefix": [
		  "fromUnixTimestamp64Micro"
		],
		"body": [
		  "fromUni${0:x}Timestamp64Micro(${0:x})"
		],
		"description": "**fromUnixTimestamp64Micro(x)**  [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#fromunixtimestamp64micro)"
	  },
	  "CH fromUnixTimestamp64Nano": {
		"scope": "tinybird,sql",
		"prefix": [
		  "fromUnixTimestamp64Nano"
		],
		"body": [
		  "fromUnixTimestamp64Nano(${0:value} [, ${1:timezone}])"
		],
		"description": "**fromUnixTimestamp64Nano(value [, timezone])** \n\nConverts an \\`Int64\\` to a \\`DateTime64\\` value with fixed sub-second precision and optional timezone. Input value is scaled up or down appropriately depending on it's precision. Please note that input value is treated as UTC timestamp, not timestamp at given (or implicit) timezone. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#fromunixtimestamp64nano)"
	  },
	  "CH formatRow": {
		"scope": "tinybird,sql",
		"prefix": [
		  "formatRow"
		],
		"body": [
		  "formatRow(${0:format}, ${1:x}, ${2:y}, ...)"
		],
		"description": "**formatRow(format, x, y, ...)** \n\nConverts arbitrary expressions into a string via given format. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#formatrow)"
	  },
	  "CH formatRowNoNewline": {
		"scope": "tinybird,sql",
		"prefix": [
		  "formatRowNoNewline"
		],
		"body": [
		  "formatRowNoNewline(${0:format}, ${1:x}, ${2:y}, ...)"
		],
		"description": "**formatRowNoNewline(format, x, y, ...)** \n\nConverts arbitrary expressions into a string via given format. Differs from formatRow in that this function trims the last \\`n\\` if any. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#formatrownonewline)"
	  },
	  "CH snowflakeToDateTime": {
		"scope": "tinybird,sql",
		"prefix": [
		  "snowflakeToDateTime"
		],
		"body": [
		  "snowflakeToDateTime(${0:value} [, ${1:time_zone}])"
		],
		"description": "**snowflakeToDateTime(value [, time_zone])** \n\nExtracts time from [Snowflake ID](https://en.wikipedia.org/wiki/Snowflake_ID) as [DateTime](/docs/en/sql-reference/data-types/datetime.md) format. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#snowflaketodatetime)"
	  },
	  "CH snowflakeToDateTime64": {
		"scope": "tinybird,sql",
		"prefix": [
		  "snowflakeToDateTime64"
		],
		"body": [
		  "snowflakeToDateTime64(${0:value} [, ${1:time_zone}])"
		],
		"description": "**snowflakeToDateTime64(value [, time_zone])** \n\nExtracts time from [Snowflake ID](https://en.wikipedia.org/wiki/Snowflake_ID) as [DateTime64](/docs/en/sql-reference/data-types/datetime64.md) format. [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#snowflaketodatetime64)"
	  },
	  "CH dateTimeToSnowflake": {
		"scope": "tinybird,sql",
		"prefix": [
		  "dateTimeToSnowflake"
		],
		"body": [
		  "dateTimeToSnowflake(${0:value})"
		],
		"description": "**dateTimeToSnowflake(value)** \n\nConverts [DateTime](/docs/en/sql-reference/data-types/datetime.md) value to the first [Snowflake ID](https://en.wikipedia.org/wiki/Snowflake_ID) at the giving time.\n\n\n                            WITH toDateTime('2021-08-15 18:57:56', 'Asia/Shanghai') AS dt [Learn more](https://clickhouse.tech/docs/en/sql-reference/functions/type-conversion-functions/#datetimetosnowflake)"
	  },
	  "CH median": {
		"scope": "tinybird,sql",
		"prefix": [
		  "median"
		],
		"body": [
		  "median(${0:x})"
		],
		"description": "**median(x)** \n\nThe \\`median*\\` functions are the aliases for the corresponding \\`quantile*\\` functions. They calculate median of a numeric data sample. [Learn more](https://clickhouse.tech/docs/en/sql-reference/aggregate-functions/reference/median/#median)"
	  },
	  "CH welchTTest": {
		"scope": "tinybird,sql",
		"prefix": [
		  "welchTTest"
		],
		"body": [
		  "welchTTest([${0:confidence_level}])(sample_data, sample_index)"
		],
		"description": "**welchTTest([confidence_level])(sample_data, sample_index)** \n\nApplies Welch's t-test to samples from two populations. [Learn more](https://clickhouse.tech/docs/en/sql-reference/aggregate-functions/reference/welchttest/#welchttest)"
	  },
	  "CH groupArrayMovingSum": {
		"scope": "tinybird,sql",
		"prefix": [
		  "groupArrayMovingSum"
		],
		"body": [
		  "groupArrayMovingSum(${0:x})"
		],
		"description": "**groupArrayMovingSum(x)** \n\nCalculates the moving sum of input values. [Learn more](https://clickhouse.tech/docs/en/sql-reference/aggregate-functions/reference/grouparraymovingsum/#grouparraymovingsum)"
	  },
	  "CH topKWeighted": {
		"scope": "tinybird,sql",
		"prefix": [
		  "topKWeighted"
		],
		"body": [
		  "topKWeighted(${0:N})(x, weight)"
		],
		"description": "**topKWeighted(N)(x, weight)** \n\nReturns an array of the approximately most frequent values in the specified column. The resulting array is sorted in descending order of approximate frequency of values (not by the values themselves). Additionally, the weight of the value is taken into account. [Learn more](https://clickhouse.tech/docs/en/sql-reference/aggregate-functions/reference/topkweighted/#topkweighted)"
	  },
	  "CH covarSamp": {
		"scope": "tinybird,sql",
		"prefix": [
		  "covarSamp"
		],
		"body": [
		  "covarSamp(${0:x})"
		],
		"description": "**covarSamp(x)** \n\nCalculates the value of \\`\u03a3((x - x\u0305)(y - y\u0305)) / (n - 1)\\`. [Learn more](https://clickhouse.tech/docs/en/sql-reference/aggregate-functions/reference/covarsamp/#covarsamp)"
	  },
	  "CH varSamp": {
		"scope": "tinybird,sql",
		"prefix": [
		  "varSamp"
		],
		"body": [
		  "varSamp(${0:x})"
		],
		"description": "**varSamp(x)** \n\nCalculates the amount \\`\u03a3((x - x\u0305)^2) / (n - 1)\\`, where \\`n\\` is the sample size and \\`x\u0305\\`is the average value of \\`x\\`. [Learn more](https://clickhouse.tech/docs/en/sql-reference/aggregate-functions/reference/varsamp/#varsamp)"
	  },
	  "CH cramersVBiasCorrected": {
		"scope": "tinybird,sql",
		"prefix": [
		  "cramersVBiasCorrected"
		],
		"body": [
		  "cramersVBiasCorrected(${0:column1}, ${1:column2})"
		],
		"description": "**cramersVBiasCorrected(column1, column2)** \n\nCram\u00e9r's V is a measure of association between two columns in a table. The result of the \\`cramersV\\` function. [Learn more](https://clickhouse.tech/docs/en/sql-reference/aggregate-functions/reference/cramersvbiascorrected/#cramersvbiascorrected)"
	  },
	  "CH quantiles": {
		"scope": "tinybird,sql",
		"prefix": [
		  "quantiles"
		],
		"body": [
		  "quantiles(${0:level1}, ${1:level2})(x)"
		],
		"description": "**quantiles(level1, level2)(x)** \n\n## quantiles [Learn more](https://clickhouse.tech/docs/en/sql-reference/aggregate-functions/reference/quantiles/#quantiles)"
	  },
	  "CH anyLast": {
		"scope": "tinybird,sql",
		"prefix": [
		  "anyLast"
		],
		"body": [
		  "anyLast(${0:x})"
		],
		"description": "**anyLast(x)** \n\nSelects the last value encountered. [Learn more](https://clickhouse.tech/docs/en/sql-reference/aggregate-functions/reference/anylast/#anylast)"
	  },
	  "CH maxIntersections": {
		"scope": "tinybird,sql",
		"prefix": [
		  "maxIntersections"
		],
		"body": [
		  "maxIntersections(${0:start_column}, ${1:end_column})"
		],
		"description": "**maxIntersections(start_column, end_column)** \n\nAggregate function that calculates the maximum number of times that a group of intervals intersects each other (if all the intervals intersect at least once). [Learn more](https://clickhouse.tech/docs/en/sql-reference/aggregate-functions/reference/maxintersections/#maxintersections)"
	  },
	  "CH uniq": {
		"scope": "tinybird,sql",
		"prefix": [
		  "uniq"
		],
		"body": [
		  "uniq(${0:x})"
		],
		"description": "**uniq(x)** \n\nCalculates the approximate number of different values of the argument. [Learn more](https://clickhouse.tech/docs/en/sql-reference/aggregate-functions/reference/uniq/#uniq)"
	  },
	  "CH quantileTDigest": {
		"scope": "tinybird,sql",
		"prefix": [
		  "quantileTDigest"
		],
		"body": [
		  "quantileTDigest(${0:level})(expr)"
		],
		"description": "**quantileTDigest(level)(expr)** \n\nComputes an approximate [quantile](https://en.wikipedia.org/wiki/Quantile) of a numeric data sequence using the [t-digest](https://github.com/tdunning/t-digest/blob/master/docs/t-digest-paper/histo.pdf) algorithm. [Learn more](https://clickhouse.tech/docs/en/sql-reference/aggregate-functions/reference/quantiletdigest/#quantiletdigest)"
	  },
	  "CH groupArrayMovingAvg": {
		"scope": "tinybird,sql",
		"prefix": [
		  "groupArrayMovingAvg"
		],
		"body": [
		  "groupArrayMovingAvg(${0:x})"
		],
		"description": "**groupArrayMovingAvg(x)** \n\nCalculates the moving average of input values. [Learn more](https://clickhouse.tech/docs/en/sql-reference/aggregate-functions/reference/grouparraymovingavg/#grouparraymovingavg)"
	  },
	  "CH rankCorr": {
		"scope": "tinybird,sql",
		"prefix": [
		  "rankCorr"
		],
		"body": [
		  "rankCorr(${0:x}, ${1:y})"
		],
		"description": "**rankCorr(x, y)** \n\nComputes a rank correlation coefficient. [Learn more](https://clickhouse.tech/docs/en/sql-reference/aggregate-functions/reference/rankCorr/#rankcorr)"
	  },
	  "CH avgWeighted": {
		"scope": "tinybird,sql",
		"prefix": [
		  "avgWeighted"
		],
		"body": [
		  "avgWeighted(${0:x}, ${1:weight})"
		],
		"description": "**avgWeighted(x, weight)** \n\nCalculates the [weighted arithmetic mean](https://en.wikipedia.org/wiki/Weighted_arithmetic_mean). [Learn more](https://clickhouse.tech/docs/en/sql-reference/aggregate-functions/reference/avgweighted/#avgweighted)"
	  },
	  "CH skewSamp": {
		"scope": "tinybird,sql",
		"prefix": [
		  "skewSamp"
		],
		"body": [
		  "skewSamp(${0:x})"
		],
		"description": "**skewSamp(x)** \n\nComputes the [sample skewness](https://en.wikipedia.org/wiki/Skewness) of a sequence. [Learn more](https://clickhouse.tech/docs/en/sql-reference/aggregate-functions/reference/skewsamp/#skewsamp)"
	  },
	  "CH groupArrayInsertAt": {
		"scope": "tinybird,sql",
		"prefix": [
		  "groupArrayInsertAt"
		],
		"body": [
		  "groupArrayInsertAt(${0:default_x}, ${1:size})(x, pos)"
		],
		"description": "**groupArrayInsertAt(default_x, size)(x, pos)** \n\nInserts a value into the array at the specified position. [Learn more](https://clickhouse.tech/docs/en/sql-reference/aggregate-functions/reference/grouparrayinsertat/#grouparrayinsertat)"
	  },
	  "CH entropy": {
		"scope": "tinybird,sql",
		"prefix": [
		  "entropy"
		],
		"body": [
		  "entropy(${0:val})"
		],
		"description": "**entropy(val)** \n\nCalculates [Shannon entropy](https://en.wikipedia.org/wiki/Entropy_(information_theory)) of a column of values. [Learn more](https://clickhouse.tech/docs/en/sql-reference/aggregate-functions/reference/entropy/#entropy)"
	  },
	  "CH quantileDeterministic": {
		"scope": "tinybird,sql",
		"prefix": [
		  "quantileDeterministic"
		],
		"body": [
		  "quantileDeterministic(${0:level})(expr, determinator)"
		],
		"description": "**quantileDeterministic(level)(expr, determinator)** \n\nComputes an approximate [quantile](https://en.wikipedia.org/wiki/Quantile) of a numeric data sequence. [Learn more](https://clickhouse.tech/docs/en/sql-reference/aggregate-functions/reference/quantiledeterministic/#quantiledeterministic)"
	  },
	  "CH simpleLinearRegression": {
		"scope": "tinybird,sql",
		"prefix": [
		  "simpleLinearRegression"
		],
		"body": [
		  "simpleLinearRegression(${0:x})"
		],
		"description": "**simpleLinearRegression(x)** \n\nPerforms simple (unidimensional) linear regression. [Learn more](https://clickhouse.tech/docs/en/sql-reference/aggregate-functions/reference/simplelinearregression/#simplelinearregression)"
	  },
	  "CH covarPop": {
		"scope": "tinybird,sql",
		"prefix": [
		  "covarPop"
		],
		"body": [
		  "covarPop(${0:x}, ${1:y})"
		],
		"description": "**covarPop(x, y)** \n\nSyntax: \\`covarPop(x, y)\\` [Learn more](https://clickhouse.tech/docs/en/sql-reference/aggregate-functions/reference/covarpop/#covarpop)"
	  },
	  "CH maxMap": {
		"scope": "tinybird,sql",
		"prefix": [
		  "maxMap"
		],
		"body": [
		  "maxMap(${0:key}, ${1:value})"
		],
		"description": "**maxMap(key, value)** \n\nSyntax: \\`maxMap(key, value)\\` or \\`maxMap(Tuple(key, value))\\` [Learn more](https://clickhouse.tech/docs/en/sql-reference/aggregate-functions/reference/maxmap/#maxmap)"
	  },
	  "CH \\avg": {
		"scope": "tinybird,sql",
		"prefix": [
		  "\\avg"
		],
		"body": [
		  "\\avg(${0:x})\\"
		],
		"description": "**\\avg(x)\\** \n\nCalculates the arithmetic mean. [Learn more](https://clickhouse.tech/docs/en/sql-reference/aggregate-functions/reference/avg/#avg)"
	  },
	  "CH kurtPop": {
		"scope": "tinybird,sql",
		"prefix": [
		  "kurtPop"
		],
		"body": [
		  "kurtPop(${0:x})"
		],
		"description": "**kurtPop(x)** \n\nComputes the [kurtosis](https://en.wikipedia.org/wiki/Kurtosis) of a sequence. [Learn more](https://clickhouse.tech/docs/en/sql-reference/aggregate-functions/reference/kurtpop/#kurtpop)"
	  },
	  "CH argMin": {
		"scope": "tinybird,sql",
		"prefix": [
		  "argMin"
		],
		"body": [
		  "argMin(${0:arg}, ${1:val})"
		],
		"description": "**argMin(arg, val)** \n\nCalculates the \\`arg\\` value for a minimum \\`val\\` value. If there are several different values of \\`arg\\` for minimum values of \\`val\\`, returns the first of these values encountered. [Learn more](https://clickhouse.tech/docs/en/sql-reference/aggregate-functions/reference/argmin/#argmin)"
	  },
	  "CH count": {
		"scope": "tinybird,sql",
		"prefix": [
		  "count"
		],
		"body": [
		  "count()"
		],
		"description": "**count()** \n\nCounts the number of rows or not-NULL values.\n\n\n                            The \\` [Learn more](https://clickhouse.tech/docs/en/sql-reference/aggregate-functions/reference/count/#count)"
	  },
	  "CH studentTTest": {
		"scope": "tinybird,sql",
		"prefix": [
		  "studentTTest"
		],
		"body": [
		  "studentTTest([${0:confidence_level}])(sample_data, sample_index)"
		],
		"description": "**studentTTest([confidence_level])(sample_data, sample_index)** \n\nApplies Student's t-test to samples from two populations. [Learn more](https://clickhouse.tech/docs/en/sql-reference/aggregate-functions/reference/studentttest/#studentttest)"
	  },
	  "CH sumWithOverflow": {
		"scope": "tinybird,sql",
		"prefix": [
		  "sumWithOverflow"
		],
		"body": [
		  "sumWithOverflow(${0:x})"
		],
		"description": "**sumWithOverflow(x)** \n\nComputes the sum of the numbers, using the same data type for the result as for the input parameters. If the sum exceeds the maximum value for this data type, it is calculated with overflow. [Learn more](https://clickhouse.tech/docs/en/sql-reference/aggregate-functions/reference/sumwithoverflow/#sumwithoverflow)"
	  },
	  "CH sum": {
		"scope": "tinybird,sql",
		"prefix": [
		  "sum"
		],
		"body": [
		  "sum(${0:x})"
		],
		"description": "**sum(x)** \n\nCalculates the sum. Only works for numbers. [Learn more](https://clickhouse.tech/docs/en/sql-reference/aggregate-functions/reference/sum/#sum)"
	  },
	  "CH uniqExact": {
		"scope": "tinybird,sql",
		"prefix": [
		  "uniqExact"
		],
		"body": [
		  "uniqE${0:x}act(${0:x})"
		],
		"description": "**uniqExact(x)** \n\nCalculates the exact number of different argument values. [Learn more](https://clickhouse.tech/docs/en/sql-reference/aggregate-functions/reference/uniqexact/#uniqexact)"
	  },
	  "CH topK": {
		"scope": "tinybird,sql",
		"prefix": [
		  "topK"
		],
		"body": [
		  "topK(${0:x})"
		],
		"description": "**topK(x)** \n\nReturns an array of the approximately most frequent values in the specified column. The resulting array is sorted in descending order of approximate frequency of values (not by the values themselves). [Learn more](https://clickhouse.tech/docs/en/sql-reference/aggregate-functions/reference/topk/#topk)"
	  },
	  "CH maxIntersectionsPosition": {
		"scope": "tinybird,sql",
		"prefix": [
		  "maxIntersectionsPosition"
		],
		"body": [
		  "maxIntersectionsPosition(${0:start_column}, ${1:end_column})"
		],
		"description": "**maxIntersectionsPosition(start_column, end_column)** \n\nAggregate function that calculates the positions of the occurrences of the \\`maxIntersections\\` function. [Learn more](https://clickhouse.tech/docs/en/sql-reference/aggregate-functions/reference/maxintersectionsposition/#maxintersectionsposition)"
	  },
	  "CH varPop": {
		"scope": "tinybird,sql",
		"prefix": [
		  "varPop"
		],
		"body": [
		  "varPop(${0:x})"
		],
		"description": "**varPop(x)** \n\nCalculates the amount \\`\u03a3((x - x\u0305)^2) / n\\`, where \\`n\\` is the sample size and \\`x\u0305\\`is the average value of \\`x\\`. [Learn more](https://clickhouse.tech/docs/en/sql-reference/aggregate-functions/reference/varpop/#varpopx)"
	  },
	  "CH quantileExactWeighted": {
		"scope": "tinybird,sql",
		"prefix": [
		  "quantileExactWeighted"
		],
		"body": [
		  "quantileExactWeighted(${0:level})(expr, weight)"
		],
		"description": "**quantileExactWeighted(level)(expr, weight)** \n\nExactly computes the [quantile](https://en.wikipedia.org/wiki/Quantile) of a numeric data sequence, taking into account the weight of each element. [Learn more](https://clickhouse.tech/docs/en/sql-reference/aggregate-functions/reference/quantileexactweighted/#quantileexactweighted)"
	  },
	  "CH sparkbar": {
		"scope": "tinybird,sql",
		"prefix": [
		  "sparkbar"
		],
		"body": [
		  "sparkbar(${0:buckets}[, ${1:min_x}, ${2:max_x}])(x, y)"
		],
		"description": "**sparkbar(buckets[, min_x, max_x])(x, y)** \n\nThe function plots a frequency histogram for values \\`x\\` and the repetition rate \\`y\\` of these values over the interval \\`[min_x, max_x]\\`. [Learn more](https://clickhouse.tech/docs/en/sql-reference/aggregate-functions/reference/sparkbar/#sparkbar)"
	  },
	  "CH contingency": {
		"scope": "tinybird,sql",
		"prefix": [
		  "contingency"
		],
		"body": [
		  "contingency(${0:column1}, ${1:column2})"
		],
		"description": "**contingency(column1, column2)** \n\nThe \\`contingency\\` function calculates the contingency coefficient but with a different denominator in the square root. [Learn more](https://clickhouse.tech/docs/en/sql-reference/aggregate-functions/reference/contingency/#contingency)"
	  },
	  "CH any": {
		"scope": "tinybird,sql",
		"prefix": [
		  "any"
		],
		"body": [
		  "any(${0:x})"
		],
		"description": "**any(x)** \n\nSelects the first encountered (non-NULL) value, unless all rows have NULL values in that column. [Learn more](https://clickhouse.tech/docs/en/sql-reference/aggregate-functions/reference/any/#any)"
	  },
	  "CH groupArrayLast": {
		"scope": "tinybird,sql",
		"prefix": [
		  "groupArrayLast"
		],
		"body": [
		  "groupArrayLast(${0:max_size})(x)"
		],
		"description": "**groupArrayLast(max_size)(x)** \n\nSyntax: \\`groupArrayLast(max_size)(x)\\` [Learn more](https://clickhouse.tech/docs/en/sql-reference/aggregate-functions/reference/grouparraylast/#grouparraylast)"
	  },
	  "CH theilsU": {
		"scope": "tinybird,sql",
		"prefix": [
		  "theilsU"
		],
		"body": [
		  "theilsU(${0:column1}, ${1:column2})"
		],
		"description": "**theilsU(column1, column2)** \n\nThe \\`theilsU\\` function calculates the [Theil's U uncertainty coefficient](https://en.wikipedia.org/wiki/Contingency_table#Uncertainty_coefficient), a value that measures the association between two columns in a table. Its values range from \u22121.0 (100% negative association, or perfect inversion) to +1.0 (100% positive association, or perfect agreement). A value of 0.0 indicates the absence of association. [Learn more](https://clickhouse.tech/docs/en/sql-reference/aggregate-functions/reference/theilsu/#theilsu)"
	  },
	  "CH cramersV": {
		"scope": "tinybird,sql",
		"prefix": [
		  "cramersV"
		],
		"body": [
		  "cramersV(${0:column1}, ${1:column2})"
		],
		"description": "**cramersV(column1, column2)** \n\n[Cram\u00e9r's V](https://en.wikipedia.org/wiki/Cram%C3%A9r%27s_V) (sometimes referred to as Cram\u00e9r's phi) is a measure of association between two columns in a table. The result of the \\`cramersV\\` function ranges from 0 (corresponding to no association between the variables) to 1 and can reach 1 only when each value is completely determined by the other. It may be viewed as the association between two variables as a percentage of their maximum possible variation. [Learn more](https://clickhouse.tech/docs/en/sql-reference/aggregate-functions/reference/cramersv/#cramersv)"
	  },
	  "CH quantileTiming": {
		"scope": "tinybird,sql",
		"prefix": [
		  "quantileTiming"
		],
		"body": [
		  "quantileTiming(${0:level})(expr)"
		],
		"description": "**quantileTiming(level)(expr)** \n\nWith the determined precision computes the [quantile](https://en.wikipedia.org/wiki/Quantile) of a numeric data sequence.\n\n\n                            If no values are passed to the function (when using \\`quantileTimingIf\\`), [NaN](../../../sql-reference/data-types/float.md#data_type-float-nan-inf) is returned. The purpose of this is to differentiate these cases from cases that result in zero. See [ORDER BY clause](../../../sql-reference/statements/select/order-by.md#select-order-by) for notes on sorting \\`NaN\\` values.\n                            \n                             [Learn more](https://clickhouse.tech/docs/en/sql-reference/aggregate-functions/reference/quantiletiming/#quantiletiming)"
	  },
	  "CH groupBitmap": {
		"scope": "tinybird,sql",
		"prefix": [
		  "groupBitmap"
		],
		"body": [
		  "groupBitmap(${0:x})"
		],
		"description": "**groupBitmap(x)** \n\nBitmap or Aggregate calculations from a unsigned integer column, return cardinality of type UInt64, if add suffix -State, then return bitmap object. [Learn more](https://clickhouse.tech/docs/en/sql-reference/aggregate-functions/reference/groupbitmap/#groupbitmap)"
	  },
	  "CH minMap": {
		"scope": "tinybird,sql",
		"prefix": [
		  "minMap"
		],
		"body": [
		  "minMap(${0:key}, ${1:value})"
		],
		"description": "**minMap(key, value)** \n\nSyntax: \\`minMap(key, value)\\` or \\`minMap(Tuple(key, value))\\` [Learn more](https://clickhouse.tech/docs/en/sql-reference/aggregate-functions/reference/minmap/#minmap)"
	  },
	  "CH skewPop": {
		"scope": "tinybird,sql",
		"prefix": [
		  "skewPop"
		],
		"body": [
		  "skewPop(${0:x})"
		],
		"description": "**skewPop(x)** \n\nComputes the [skewness](https://en.wikipedia.org/wiki/Skewness) of a sequence. [Learn more](https://clickhouse.tech/docs/en/sql-reference/aggregate-functions/reference/skewpop/#skewpop)"
	  },
	  "CH mannWhitneyUTest[": {
		"scope": "tinybird,sql",
		"prefix": [
		  "mannWhitneyUTest["
		],
		"body": [
		  "mannWhitneyUTest[(${0:alternative}[, ${1:continuity_correction}])](sample_data, sample_index)"
		],
		"description": "**mannWhitneyUTest[(alternative[, continuity_correction])](sample_data, sample_index)** \n\nApplies the Mann-Whitney rank test to samples from two populations. [Learn more](https://clickhouse.tech/docs/en/sql-reference/aggregate-functions/reference/mannwhitneyutest/#mannwhitneyutest)"
	  },
	  "CH groupArraySample": {
		"scope": "tinybird,sql",
		"prefix": [
		  "groupArraySample"
		],
		"body": [
		  "groupArraySample(${0:max_size}[, ${1:seed}])(x)"
		],
		"description": "**groupArraySample(max_size[, seed])(x)** \n\nCreates an array of sample argument values. The size of the resulting array is limited to \\`max_size\\` elements. Argument values are selected and added to the array randomly. [Learn more](https://clickhouse.tech/docs/en/sql-reference/aggregate-functions/reference/grouparraysample/#grouparraysample)"
	  },
	  "CH stddevSamp": {
		"scope": "tinybird,sql",
		"prefix": [
		  "stddevSamp"
		],
		"body": [
		  "stddevSamp(${0:x})"
		],
		"description": "**stddevSamp(x)** \n\nThe result is equal to the square root of varSamp. [Learn more](https://clickhouse.tech/docs/en/sql-reference/aggregate-functions/reference/stddevsamp/#stddevsamp)"
	  },
	  "CH quantile": {
		"scope": "tinybird,sql",
		"prefix": [
		  "quantile"
		],
		"body": [
		  "quantile(${0:level})(expr)"
		],
		"description": "**quantile(level)(expr)** \n\nComputes an approximate [quantile](https://en.wikipedia.org/wiki/Quantile) of a numeric data sequence. [Learn more](https://clickhouse.tech/docs/en/sql-reference/aggregate-functions/reference/quantile/#quantile)"
	  },
	  "CH groupArray": {
		"scope": "tinybird,sql",
		"prefix": [
		  "groupArray"
		],
		"body": [
		  "groupArray(${0:x})"
		],
		"description": "**groupArray(x)** \n\nSyntax: \\`groupArray(x)\\` or \\`groupArray(max_size)(x)\\` [Learn more](https://clickhouse.tech/docs/en/sql-reference/aggregate-functions/reference/grouparray/#grouparray)"
	  },
	  "CH corr": {
		"scope": "tinybird,sql",
		"prefix": [
		  "corr"
		],
		"body": [
		  "corr(${0:x}, ${1:y})"
		],
		"description": "**corr(x, y)** \n\nSyntax: \\`corr(x, y)\\` [Learn more](https://clickhouse.tech/docs/en/sql-reference/aggregate-functions/reference/corr/#corr)"
	  },
	  "CH anyHeavy": {
		"scope": "tinybird,sql",
		"prefix": [
		  "anyHeavy"
		],
		"body": [
		  "anyHeavy(${0:x})"
		],
		"description": "**anyHeavy(x)** \n\nSelects a frequently occurring value using the [heavy hitters](https://doi.org/10.1145/762471.762473) algorithm. If there is a value that occurs more than in half the cases in each of the query's execution threads, this value is returned. Normally, the result is nondeterministic. [Learn more](https://clickhouse.tech/docs/en/sql-reference/aggregate-functions/reference/anyheavy/#anyheavy)"
	  },
	  "CH quantileBFloat16Weighted": {
		"scope": "tinybird,sql",
		"prefix": [
		  "quantileBFloat16Weighted"
		],
		"body": [
		  "quantileBFloat16Weighted(${0:x})"
		],
		"description": "**quantileBFloat16Weighted(x)** \n\nLike \\`quantileBFloat16\\` but takes into account the weight of each sequence member. [Learn more](https://clickhouse.tech/docs/en/sql-reference/aggregate-functions/reference/quantilebfloat16/#quantilebfloat16weighted)"
	  },
	  "CH groupBitXor": {
		"scope": "tinybird,sql",
		"prefix": [
		  "groupBitXor"
		],
		"body": [
		  "groupBitXor(${0:x})"
		],
		"description": "**groupBitXor(x)** \n\nApplies bitwise \\`XOR\\` for series of numbers. [Learn more](https://clickhouse.tech/docs/en/sql-reference/aggregate-functions/reference/groupbitxor/#groupbitxor)"
	  },
	  "CH quantileTimingWeighted": {
		"scope": "tinybird,sql",
		"prefix": [
		  "quantileTimingWeighted"
		],
		"body": [
		  "quantileTimingWeighted(${0:level})(expr, weight)"
		],
		"description": "**quantileTimingWeighted(level)(expr, weight)** \n\nWith the determined precision computes the [quantile](https://en.wikipedia.org/wiki/Quantile) of a numeric data sequence according to the weight of each sequence member. [Learn more](https://clickhouse.tech/docs/en/sql-reference/aggregate-functions/reference/quantiletimingweighted/#quantiletimingweighted)"
	  },
	  "CH quantileInterpolatedWeighted": {
		"scope": "tinybird,sql",
		"prefix": [
		  "quantileInterpolatedWeighted"
		],
		"body": [
		  "quantileInterpolatedWeighted(${0:level})(expr, weight)"
		],
		"description": "**quantileInterpolatedWeighted(level)(expr, weight)** \n\nComputes [quantile](https://en.wikipedia.org/wiki/Quantile) of a numeric data sequence using linear interpolation, taking into account the weight of each element. [Learn more](https://clickhouse.tech/docs/en/sql-reference/aggregate-functions/reference/quantileinterpolatedweighted/#quantileinterpolatedweighted)"
	  },
	  "CH stddevPop": {
		"scope": "tinybird,sql",
		"prefix": [
		  "stddevPop"
		],
		"body": [
		  "stddevPop(${0:x})"
		],
		"description": "**stddevPop(x)** \n\nThe result is equal to the square root of varPop. [Learn more](https://clickhouse.tech/docs/en/sql-reference/aggregate-functions/reference/stddevpop/#stddevpop)"
	  },
	  "CH uniqCombined": {
		"scope": "tinybird,sql",
		"prefix": [
		  "uniqCombined"
		],
		"body": [
		  "uniqCombined(${0:x})"
		],
		"description": "**uniqCombined(x)** \n\nCalculates the approximate number of different argument values. [Learn more](https://clickhouse.tech/docs/en/sql-reference/aggregate-functions/reference/uniqcombined/#uniqcombined)"
	  },
	  "CH argMax": {
		"scope": "tinybird,sql",
		"prefix": [
		  "argMax"
		],
		"body": [
		  "argMax(${0:arg}, ${1:val})"
		],
		"description": "**argMax(arg, val)** \n\nCalculates the \\`arg\\` value for a maximum \\`val\\` value. If there are several different values of \\`arg\\` for maximum values of \\`val\\`, returns the first of these values encountered. [Learn more](https://clickhouse.tech/docs/en/sql-reference/aggregate-functions/reference/argmax/#argmax)"
	  },
	  "CH groupBitOr": {
		"scope": "tinybird,sql",
		"prefix": [
		  "groupBitOr"
		],
		"body": [
		  "groupBitOr(${0:x})"
		],
		"description": "**groupBitOr(x)** \n\nApplies bitwise \\`OR\\` for series of numbers. [Learn more](https://clickhouse.tech/docs/en/sql-reference/aggregate-functions/reference/groupbitor/#groupbitor)"
	  },
	  "CH quantileTDigestWeighted": {
		"scope": "tinybird,sql",
		"prefix": [
		  "quantileTDigestWeighted"
		],
		"body": [
		  "quantileTDigestWeighted(${0:level})(expr, weight)"
		],
		"description": "**quantileTDigestWeighted(level)(expr, weight)** \n\nComputes an approximate [quantile](https://en.wikipedia.org/wiki/Quantile) of a numeric data sequence using the [t-digest](https://github.com/tdunning/t-digest/blob/master/docs/t-digest-paper/histo.pdf) algorithm. The function takes into account the weight of each sequence member. The maximum error is 1%. Memory consumption is \\`log(n)\\`, where \\`n\\` is a number of values. [Learn more](https://clickhouse.tech/docs/en/sql-reference/aggregate-functions/reference/quantiletdigestweighted/#quantiletdigestweighted)"
	  },
	  "CH sumMap": {
		"scope": "tinybird,sql",
		"prefix": [
		  "sumMap"
		],
		"body": [
		  "sumMap(${0:key}, ${1:value})"
		],
		"description": "**sumMap(key, value)** \n\nSyntax: \\`sumMap(key, value)\\` or \\`sumMap(Tuple(key, value))\\` [Learn more](https://clickhouse.tech/docs/en/sql-reference/aggregate-functions/reference/summap/#summap)"
	  },
	  "CH kurtSamp": {
		"scope": "tinybird,sql",
		"prefix": [
		  "kurtSamp"
		],
		"body": [
		  "kurtSamp(${0:x})"
		],
		"description": "**kurtSamp(x)** \n\nComputes the [sample kurtosis](https://en.wikipedia.org/wiki/Kurtosis) of a sequence. [Learn more](https://clickhouse.tech/docs/en/sql-reference/aggregate-functions/reference/kurtsamp/#kurtsamp)"
	  },
	  "CH stochasticLogisticRegression": {
		"scope": "tinybird,sql",
		"prefix": [
		  "stochasticLogisticRegression"
		],
		"body": [
		  "stochasticLogisticRegression(${0:x})"
		],
		"description": "**stochasticLogisticRegression(x)** \n\nThis function implements stochastic logistic regression. It can be used for binary classification problem, supports the same custom parameters as stochasticLinearRegression and works the same way. [Learn more](https://clickhouse.tech/docs/en/sql-reference/aggregate-functions/reference/stochasticlogisticregression/#stochasticlogisticregression)"
	  },
	  "CH uniqCombined64": {
		"scope": "tinybird,sql",
		"prefix": [
		  "uniqCombined64"
		],
		"body": [
		  "uniqCombined64(${0:x})"
		],
		"description": "**uniqCombined64(x)** \n\nSame as uniqCombined, but uses 64-bit hash for all data types. [Learn more](https://clickhouse.tech/docs/en/sql-reference/aggregate-functions/reference/uniqcombined64/#uniqcombined64)"
	  },
	  "CH meanZTest": {
		"scope": "tinybird,sql",
		"prefix": [
		  "meanZTest"
		],
		"body": [
		  "meanZTest(${0:population_variance_x}, ${1:population_variance_y}, ${2:confidence_level})(sample_data, sample_index)"
		],
		"description": "**meanZTest(population_variance_x, population_variance_y, confidence_level)(sample_data, sample_index)** \n\nApplies mean z-test to samples from two populations. [Learn more](https://clickhouse.tech/docs/en/sql-reference/aggregate-functions/reference/meanztest/#meanztest)"
	  },
	  "CH uniqHLL12": {
		"scope": "tinybird,sql",
		"prefix": [
		  "uniqHLL12"
		],
		"body": [
		  "uniqHLL12(${0:x})"
		],
		"description": "**uniqHLL12(x)** \n\nCalculates the approximate number of different argument values, using the [HyperLogLog](https://en.wikipedia.org/wiki/HyperLogLog) algorithm. [Learn more](https://clickhouse.tech/docs/en/sql-reference/aggregate-functions/reference/uniqhll12/#uniqhll12)"
	  },
	  "CH groupUniqArray": {
		"scope": "tinybird,sql",
		"prefix": [
		  "groupUniqArray"
		],
		"body": [
		  "groupUniqArray(${0:x})"
		],
		"description": "**groupUniqArray(x)** \n\nSyntax: \\`groupUniqArray(x)\\` or \\`groupUniqArray(max_size)(x)\\` [Learn more](https://clickhouse.tech/docs/en/sql-reference/aggregate-functions/reference/groupuniqarray/#groupuniqarray)"
	  },
	  "CH groupBitAnd": {
		"scope": "tinybird,sql",
		"prefix": [
		  "groupBitAnd"
		],
		"body": [
		  "groupBitAnd(${0:x})"
		],
		"description": "**groupBitAnd(x)** \n\nApplies bitwise \\`AND\\` for series of numbers. [Learn more](https://clickhouse.tech/docs/en/sql-reference/aggregate-functions/reference/groupbitand/#groupbitand)"
	  },
	  "CH deltaSum": {
		"scope": "tinybird,sql",
		"prefix": [
		  "deltaSum"
		],
		"body": [
		  "deltaSum(${0:value})"
		],
		"description": "**deltaSum(value)** \n\nSums the arithmetic difference between consecutive rows. If the difference is negative, it is ignored. [Learn more](https://clickhouse.tech/docs/en/sql-reference/aggregate-functions/reference/deltasum/#deltasum)"
	  }
}